# This file is the master GN build configuration, all variables
# declare here will be implicitly global.
#
# Copyright (c) [2020] Huawei Technologies Co.,Ltd.All rights reserved.
#
# OpenArkCompiler is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#
#     http://license.coscl.org.cn/MulanPSL2
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.
#

# List all the input args
declare_args() {
  GN_INSTALL_PREFIX = ""
  GN_BUILD_TYPE = ""
  HOST_ARCH = 64
  MIR_JAVA = 1
  COV_CHECK = 0
  GCONLY = 0
  OPT = "O2"
  TARGET = ""
}

# Define global args
MAPLE_ROOT = getenv("MAPLE_ROOT")
ANDROID_ROOT = "${MAPLE_ROOT}/android"
AOSP_ROOT = "${MAPLE_ROOT}/third_party/aosp_modified"
MAPLE_BUILD_TYPE = getenv("MAPLE_BUILD_TYPE")
MAPLE_BUILD_OUTPUT = getenv("MAPLE_BUILD_OUTPUT")
TOOL_BIN_PATH = getenv("TOOL_BIN_PATH")
QEMU_PATH = getenv("TOOL_BIN_PATH")
OLD_OS = getenv("OLD_OS")
if (OLD_OS == "1") {
  DESIGNATOR="-Wno-gnu-designator"
} else {
  DESIGNATOR="-Wno-c99-designator"
}

DYNAMICLANG = true
RC_V2 = true
TEST_BENCHMARK = false
MEMORY_LEAK_CHECK = false
MARK_CYCLE_ROOTS = false

OPENSOURCE_DEPS = "${MAPLE_ROOT}/src/mapleall/deplibs"
OPENSOURCE_OUTPUT = "${MAPLE_BUILD_OUTPUT}"
AST2MPL_ROOT = "${MAPLE_ROOT}/src/ast2mpl"
IS_AST2MPL_EXISTS = getenv("IS_AST2MPL_EXISTS")
MAPLEALL_ROOT = "${MAPLE_ROOT}/src"
MAPLEALL_ROOT = "${MAPLE_ROOT}/src/mapleall"
MPLFE_ROOT = "${MAPLE_ROOT}/src/mplfe"
MAPLE_MRT_ROOT = "${MAPLE_ROOT}/src/mrt"
THIRD_PARTY_ROOT = "${MAPLE_ROOT}/third_party"

# Put all built library files under lib
GN_ARCHIVE_OUTPUT_DIRECTORY = "${MAPLE_BUILD_OUTPUT}/ar/host-x86_64-${OPT}"
GN_LIBRARY_OUTPUT_DIRECTORY = "${MAPLE_BUILD_OUTPUT}/lib"

# Put all built binary files under bin
GN_BINARY_OUTPUT_DIRECTORY = "${MAPLE_BUILD_OUTPUT}/bin"

import("${MAPLE_ROOT}/build/config.gni")

# C/CXX Build flags
cflags = []
cflags_cc = []
cflags_c = []
if (GN_BUILD_TYPE == "RELEASE") {
  cflags_cc += [
    "-O2",
    "-fno-strict-aliasing",
    "-D_FORTIFY_SOURCE=2",
  ]
  cflags_c += [
    "-O2",
    "-fno-strict-aliasing",
    "-D_FORTIFY_SOURCE=2",
  ]
} else if (GN_BUILD_TYPE == "DEBUG") {
  cflags_cc += [
    "-O0",
    "-g3",
    "-ftrapv",
    "-fstack-check",
  ]
  cflags_c += [
    "-O0",
    "-g3",
    "-ftrapv",
    "-fstack-check",
  ]
} else {
  cflags_cc += [
    "-O2",
    "-fno-strict-aliasing",
    "-g",
  ]
  cflags_c += [
    "-O2",
    "-fno-strict-aliasing",
    "-g",
  ]
}

cflags_c += [
  "-Wall",
  "-fstack-protector-strong",
  "-fPIC",
  "-fPIE",
  "-fvisibility=hidden",
  "-pipe",
  "-Werror",
  "-Wdate-time",
  "-Wfloat-equal",
  "${DESIGNATOR}",
]

cflags_cc += [
  "-Wall",
  "-fstack-protector-strong",
  "-fPIC",
  "-fPIE",
  "-fvisibility=hidden",
  "-pipe",
  "-Wno-c99-designator",
  "-Wno-range-loop-construct",
  "-Werror",
  "-Wdate-time",
  "-Wfloat-equal",
  "${DESIGNATOR}",
]

if (HOST_ARCH == 64) {
  cflags_c += [ "-m64" ]
  cflags_cc += [ "-m64" ]
} else {
  cflags_c += [ "-m32" ]
  cflags_cc += [ "-m32" ]
}

if (DYNAMICLANG) {
  cflags_cc += [ "-DDYNAMICLANG" ]
}

if (RC_V2) {
  cflags_cc += [ "-DRC_NO_MMAP" ]
}

if (TEST_BENCHMARK) {
  cflags_cc += [ "-DTEST_BENCHMARK" ]
}

if (MEMORY_LEAK_CHECK) {
  cflags_cc += [ "-DMEMORY_LEAK_CHECK" ]
}

if (MARK_CYCLE_ROOTS) {
  cflags_cc += [ "-DMARK_CYCLE_ROOTS" ]
}

cflags_cc += [ "-DMIR_FEATURE_FULL=1" ]

if (MIR_JAVA == 1) {
  cflags_cc += [ "-DMIR_JAVA=1" ]
} else {
  TARGET = "vm"
  cflags_cc += [ "-DMIR_JAVA=0" ]
}
