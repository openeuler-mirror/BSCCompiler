diff -ur art_aosp/libartbase/arch/instruction_set.cc art/libartbase/arch/instruction_set.cc
--- art_aosp/libartbase/arch/instruction_set.cc	2021-01-29 11:00:02.202266487 +0800
+++ art/libartbase/arch/instruction_set.cc	2021-01-29 10:34:50.012986865 +0800
@@ -19,6 +19,7 @@
 #include "android-base/logging.h"
 #include "base/bit_utils.h"
 #include "base/globals.h"
+#include <string.h>
 
 namespace art {
 
@@ -115,11 +116,23 @@
 static_assert(IsAligned<kPageSize>(kX86StackOverflowReservedBytes), "X86 gap not page aligned");
 static_assert(IsAligned<kPageSize>(kX86_64StackOverflowReservedBytes),
               "X86_64 gap not page aligned");
-
+/*
+cflags += [
+        "-DART_STACK_OVERFLOW_GAP_arm=8192",
+        "-DART_STACK_OVERFLOW_GAP_arm64=8192",
+        "-DART_STACK_OVERFLOW_GAP_mips=16384",
+        "-DART_STACK_OVERFLOW_GAP_mips64=16384",
+        "-DART_STACK_OVERFLOW_GAP_x86=16384",
+        "-DART_STACK_OVERFLOW_GAP_x86_64=20480",
+        "-DART_FRAME_SIZE_LIMIT=7400",
+    ]
+ */
+/* 
 #if !defined(ART_FRAME_SIZE_LIMIT)
 #error "ART frame size limit missing"
 #endif
-
+*/
+const uint32_t ART_FRAME_SIZE_LIMIT = 7400;
 // TODO: Should we require an extra page (RoundUp(SIZE) + kPageSize)?
 static_assert(ART_FRAME_SIZE_LIMIT < kArmStackOverflowReservedBytes, "Frame size limit too large");
 static_assert(ART_FRAME_SIZE_LIMIT < kArm64StackOverflowReservedBytes,
diff -ur art_aosp/libartbase/arch/instruction_set.h art/libartbase/arch/instruction_set.h
--- art_aosp/libartbase/arch/instruction_set.h	2021-01-29 11:00:02.202266487 +0800
+++ art/libartbase/arch/instruction_set.h	2021-01-29 10:34:50.012986865 +0800
@@ -227,19 +227,30 @@
 }
 
 namespace instruction_set_details {
-
+/*
+cflags += [
+        "-DART_STACK_OVERFLOW_GAP_arm=8192",
+        "-DART_STACK_OVERFLOW_GAP_arm64=8192",
+        "-DART_STACK_OVERFLOW_GAP_mips=16384",
+        "-DART_STACK_OVERFLOW_GAP_mips64=16384",
+        "-DART_STACK_OVERFLOW_GAP_x86=16384",
+        "-DART_STACK_OVERFLOW_GAP_x86_64=20480",
+        "-DART_FRAME_SIZE_LIMIT=7400",
+    ]
+ */
+ /* 
 #if !defined(ART_STACK_OVERFLOW_GAP_arm) || !defined(ART_STACK_OVERFLOW_GAP_arm64) || \
     !defined(ART_STACK_OVERFLOW_GAP_mips) || !defined(ART_STACK_OVERFLOW_GAP_mips64) || \
     !defined(ART_STACK_OVERFLOW_GAP_x86) || !defined(ART_STACK_OVERFLOW_GAP_x86_64)
 #error "Missing defines for stack overflow gap"
 #endif
-
-static constexpr size_t kArmStackOverflowReservedBytes    = ART_STACK_OVERFLOW_GAP_arm;
-static constexpr size_t kArm64StackOverflowReservedBytes  = ART_STACK_OVERFLOW_GAP_arm64;
-static constexpr size_t kMipsStackOverflowReservedBytes   = ART_STACK_OVERFLOW_GAP_mips;
-static constexpr size_t kMips64StackOverflowReservedBytes = ART_STACK_OVERFLOW_GAP_mips64;
-static constexpr size_t kX86StackOverflowReservedBytes    = ART_STACK_OVERFLOW_GAP_x86;
-static constexpr size_t kX86_64StackOverflowReservedBytes = ART_STACK_OVERFLOW_GAP_x86_64;
+*/
+static constexpr size_t kArmStackOverflowReservedBytes    = 8192;
+static constexpr size_t kArm64StackOverflowReservedBytes  = 8192;
+static constexpr size_t kMipsStackOverflowReservedBytes   = 16384;
+static constexpr size_t kMips64StackOverflowReservedBytes = 16384;
+static constexpr size_t kX86StackOverflowReservedBytes    = 16384;
+static constexpr size_t kX86_64StackOverflowReservedBytes = 20480;
 
 NO_RETURN void GetStackOverflowReservedBytesFailure(const char* error_msg);
 
diff -ur art_aosp/libartbase/base/arena_allocator.h art/libartbase/base/arena_allocator.h
--- art_aosp/libartbase/base/arena_allocator.h	2021-01-29 11:00:02.198266452 +0800
+++ art/libartbase/base/arena_allocator.h	2021-01-29 10:34:50.012986865 +0800
@@ -25,6 +25,7 @@
 #include "dchecked_vector.h"
 #include "macros.h"
 #include "memory_tool.h"
+#include <string.h>
 
 namespace art {
 
diff -ur art_aosp/libartbase/base/bit_vector.h art/libartbase/base/bit_vector.h
--- art_aosp/libartbase/base/bit_vector.h	2021-01-29 11:00:02.202266487 +0800
+++ art/libartbase/base/bit_vector.h	2021-01-29 10:34:50.012986865 +0800
@@ -19,7 +19,7 @@
 
 #include <stdint.h>
 #include <iterator>
-
+#include <string.h>
 #include "bit_utils.h"
 #include "globals.h"
 
diff -ur art_aosp/libartbase/base/file_magic.cc art/libartbase/base/file_magic.cc
--- art_aosp/libartbase/base/file_magic.cc	2021-01-29 11:00:02.198266452 +0800
+++ art/libartbase/base/file_magic.cc	2021-01-29 10:34:50.012986865 +0800
@@ -19,7 +19,7 @@
 #include <fcntl.h>
 #include <sys/stat.h>
 #include <sys/types.h>
-
+#include <string.h>
 #include <android-base/logging.h>
 #include <android-base/stringprintf.h>
 
diff -ur art_aosp/libartbase/base/file_utils.cc art/libartbase/base/file_utils.cc
--- art_aosp/libartbase/base/file_utils.cc	2021-01-29 11:00:02.198266452 +0800
+++ art/libartbase/base/file_utils.cc	2021-01-29 10:34:50.012986865 +0800
@@ -40,7 +40,7 @@
 
 
 #include <memory>
-
+#include <string.h>
 #include "android-base/stringprintf.h"
 #include "android-base/strings.h"
 
@@ -401,7 +401,7 @@
                                                &error_msg);
   return (android_root != nullptr)
       && (runtime_root != nullptr)
-      && (std::string_view(android_root) != std::string_view(runtime_root));
+      && (StringView(android_root) != StringView(runtime_root));
 }
 
 int DupCloexec(int fd) {
diff -ur art_aosp/libartbase/base/hiddenapi_stubs.h art/libartbase/base/hiddenapi_stubs.h
--- art_aosp/libartbase/base/hiddenapi_stubs.h	2021-01-29 11:00:02.198266452 +0800
+++ art/libartbase/base/hiddenapi_stubs.h	2021-01-29 10:34:50.012986865 +0800
@@ -18,11 +18,16 @@
 #define ART_LIBARTBASE_BASE_HIDDENAPI_STUBS_H_
 
 #include <set>
-#include <string_view>
+#include "string_view_format.h"
 
 namespace art {
 namespace hiddenapi {
 
+const std::string kPublicApiStr = "public-api";
+const std::string kSystemApiStr = "system-api";
+const std::string kTestApiStr = "test-api";
+const std::string kCorePlatformApiStr = "core-platform-api";
+
 class ApiStubs {
  public:
   enum class Kind {
@@ -32,7 +37,7 @@
     kCorePlatformApi,
   };
 
-  static const std::string_view ToString(Kind api) {
+  static std::string ToString(Kind api) {
     switch (api) {
       case Kind::kPublicApi:
         return kPublicApiStr;
@@ -45,16 +50,10 @@
     }
   }
 
-  static bool IsStubsFlag(const std::string_view& api_flag_name) {
+  static bool IsStubsFlag(const std::string& api_flag_name) {
     return api_flag_name == kPublicApiStr || api_flag_name == kSystemApiStr ||
         api_flag_name == kTestApiStr || api_flag_name == kCorePlatformApiStr;
   }
-
- private:
-  static constexpr std::string_view kPublicApiStr{"public-api"};
-  static constexpr std::string_view kSystemApiStr{"system-api"};
-  static constexpr std::string_view kTestApiStr{"test-api"};
-  static constexpr std::string_view kCorePlatformApiStr{"core-platform-api"};
 };
 
 }  // namespace hiddenapi
diff -ur art_aosp/libartbase/base/logging.cc art/libartbase/base/logging.cc
--- art_aosp/libartbase/base/logging.cc	2021-01-29 11:00:02.202266487 +0800
+++ art/libartbase/base/logging.cc	2021-01-29 10:34:50.012986865 +0800
@@ -23,6 +23,7 @@
 #include "aborting.h"
 #include "os.h"
 #include "unix_file/fd_file.h"
+#include <string.h>
 
 // Headers for LogMessage::LogLine.
 #ifdef ART_TARGET_ANDROID
diff -ur art_aosp/libartbase/base/memfd.cc art/libartbase/base/memfd.cc
--- art_aosp/libartbase/base/memfd.cc	2021-01-29 11:00:02.198266452 +0800
+++ art/libartbase/base/memfd.cc	2021-01-29 10:34:50.016986900 +0800
@@ -25,6 +25,7 @@
 #endif
 
 #include "macros.h"
+#include <string.h>
 
 // When building for linux host, glibc in prebuilts does not include memfd_create system call
 // number. As a temporary testing measure, we add the definition here.
diff -ur art_aosp/libartbase/base/os_linux.cc art/libartbase/base/os_linux.cc
--- art_aosp/libartbase/base/os_linux.cc	2021-01-29 11:00:02.202266487 +0800
+++ art/libartbase/base/os_linux.cc	2021-01-29 10:34:50.016986900 +0800
@@ -62,8 +62,7 @@
   CHECK(name != nullptr);
   bool read_only = ((flags & O_ACCMODE) == O_RDONLY);
   bool check_usage = !read_only && auto_flush;
-  std::unique_ptr<File> file(
-      new File(name, flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH, check_usage));
+  std::unique_ptr<File> file(new File(name, flags, 0666, check_usage));
   if (!file->IsOpened()) {
     return nullptr;
   }
diff -ur art_aosp/libartbase/base/safe_copy.cc art/libartbase/base/safe_copy.cc
--- art_aosp/libartbase/base/safe_copy.cc	2021-01-29 11:00:02.202266487 +0800
+++ art/libartbase/base/safe_copy.cc	2021-01-29 10:34:50.016986900 +0800
@@ -56,10 +56,10 @@
     }
 
     src_iovs[iovecs_used].iov_base = const_cast<char*>(cur);
-    if (!IsAlignedParam(cur, PAGE_SIZE)) {
-      src_iovs[iovecs_used].iov_len = AlignUp(cur, PAGE_SIZE) - cur;
+    if (!IsAlignedParam(cur, sysconf(_SC_PAGE_SIZE))) {
+      src_iovs[iovecs_used].iov_len = AlignUp(cur, sysconf(_SC_PAGE_SIZE)) - cur;
     } else {
-      src_iovs[iovecs_used].iov_len = PAGE_SIZE;
+      src_iovs[iovecs_used].iov_len = sysconf(_SC_PAGE_SIZE);
     }
 
     src_iovs[iovecs_used].iov_len = std::min(src_iovs[iovecs_used].iov_len, len);
diff -ur art_aosp/libartbase/base/scoped_flock.cc art/libartbase/base/scoped_flock.cc
--- art_aosp/libartbase/base/scoped_flock.cc	2021-01-29 11:00:02.202266487 +0800
+++ art/libartbase/base/scoped_flock.cc	2021-01-29 10:34:50.016986900 +0800
@@ -24,6 +24,7 @@
 
 #include "file_utils.h"
 #include "unix_file/fd_file.h"
+#include <string.h>
 
 namespace art {
 
diff -ur art_aosp/libartbase/base/string_view_cpp20.h art/libartbase/base/string_view_cpp20.h
--- art_aosp/libartbase/base/string_view_cpp20.h	2021-01-29 11:00:02.198266452 +0800
+++ art/libartbase/base/string_view_cpp20.h	2021-01-29 10:34:50.016986900 +0800
@@ -17,21 +17,21 @@
 #ifndef ART_LIBARTBASE_BASE_STRING_VIEW_CPP20_H_
 #define ART_LIBARTBASE_BASE_STRING_VIEW_CPP20_H_
 
-#include <string_view>
+#include "string_view_format.h"
 
 namespace art {
 
-// Replacement functions for std::string_view::starts_with(), ends_with()
+// Replacement functions for StringView::starts_with(), ends_with()
 // which shall be available in C++20.
 #if __cplusplus >= 202000L
 #error "When upgrading to C++20, remove this error and file a bug to remove this workaround."
 #endif
 
-inline bool StartsWith(std::string_view sv, std::string_view prefix) {
+inline bool StartsWith(StringView sv, StringView prefix) {
   return sv.substr(0u, prefix.size()) == prefix;
 }
 
-inline bool EndsWith(std::string_view sv, std::string_view suffix) {
+inline bool EndsWith(StringView sv, StringView suffix) {
   return sv.size() >= suffix.size() && sv.substr(sv.size() - suffix.size()) == suffix;
 }
 
diff -ur art_aosp/libartbase/base/unix_file/fd_file.cc art/libartbase/base/unix_file/fd_file.cc
--- art_aosp/libartbase/base/unix_file/fd_file.cc	2021-01-29 11:00:02.202266487 +0800
+++ art/libartbase/base/unix_file/fd_file.cc	2021-01-29 10:34:50.016986900 +0800
@@ -20,6 +20,7 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
+#include <string.h>
 
 #if defined(__BIONIC__)
 #include <android/fdsan.h>
diff -ur art_aosp/libartbase/base/utils.cc art/libartbase/base/utils.cc
--- art_aosp/libartbase/base/utils.cc	2021-01-29 11:00:02.202266487 +0800
+++ art/libartbase/base/utils.cc	2021-01-29 10:34:50.016986900 +0800
@@ -29,7 +29,6 @@
 #include "android-base/stringprintf.h"
 #include "android-base/strings.h"
 
-#include "bit_utils.h"
 #include "os.h"
 
 #if defined(__APPLE__)
@@ -63,98 +62,6 @@
 using android::base::ReadFileToString;
 using android::base::StringPrintf;
 
-#if defined(__arm__)
-
-namespace {
-
-// Bitmap of caches to flush for cacheflush(2). Must be zero for ARM.
-static constexpr int kCacheFlushFlags = 0x0;
-
-// Number of retry attempts when flushing cache ranges.
-static constexpr size_t kMaxFlushAttempts = 4;
-
-int CacheFlush(uintptr_t start, uintptr_t limit) {
-  // The signature of cacheflush(2) seems to vary by source. On ARM the system call wrapper
-  //    (bionic/SYSCALLS.TXT) has the form: int cacheflush(long start, long end, long flags);
-  int r = cacheflush(start, limit, kCacheFlushFlags);
-  if (r == -1) {
-    CHECK_NE(errno, EINVAL);
-  }
-  return r;
-}
-
-bool TouchAndFlushCacheLinesWithinPage(uintptr_t start, uintptr_t limit, size_t attempts) {
-  CHECK_LT(start, limit);
-  CHECK_EQ(RoundDown(start, kPageSize), RoundDown(limit - 1, kPageSize)) << "range spans pages";
-  // Declare a volatile variable so the compiler does not elide reads from the page being touched.
-  volatile uint8_t v = 0;
-  for (size_t i = 0; i < attempts; ++i) {
-    // Touch page to maximize chance page is resident.
-    v = *reinterpret_cast<uint8_t*>(start);
-
-    if (LIKELY(CacheFlush(start, limit) == 0)) {
-      return true;
-    }
-  }
-  return false;
-}
-
-}  // namespace
-
-bool FlushCpuCaches(void* begin, void* end) {
-  // This method is specialized for ARM as the generic implementation below uses the
-  // __builtin___clear_cache() intrinsic which is declared as void. On ARMv7 flushing the CPU
-  // caches is a privileged operation. The Linux kernel allows these operations to fail when they
-  // trigger a fault (e.g. page not resident). We use a wrapper for the ARM specific cacheflush()
-  // system call to detect the failure and potential erroneous state of the data and instruction
-  // caches.
-  //
-  // The Android bug for this is b/132205399 and there's a similar discussion on
-  // https://reviews.llvm.org/D37788. This is primarily an issue for the dual view JIT where the
-  // pages where code is executed are only ever RX and never RWX. When attempting to invalidate
-  // instruction cache lines in the RX mapping after writing fresh code in the RW mapping, the
-  // page may not be resident (due to memory pressure), and this means that a fault is raised in
-  // the midst of a cacheflush() call and the instruction cache lines are not invalidated and so
-  // have stale code.
-  //
-  // Other architectures fair better for reasons such as:
-  //
-  // (1) stronger coherence between the data and instruction caches.
-  //
-  // (2) fault handling that allows flushing/invalidation to continue after
-  //     a missing page has been faulted in.
-
-  // In the common case, this flush of the complete range succeeds.
-  uintptr_t start = reinterpret_cast<uintptr_t>(begin);
-  const uintptr_t limit = reinterpret_cast<uintptr_t>(end);
-  if (LIKELY(CacheFlush(start, limit) == 0)) {
-    return true;
-  }
-
-  // A rare failure has occurred implying that part of the range (begin, end] has been swapped
-  // out. Retry flushing but this time grouping cache-line flushes on individual pages and
-  // touching each page before flushing.
-  uintptr_t next_page = RoundUp(start + 1, kPageSize);
-  while (start < limit) {
-    uintptr_t boundary = std::min(next_page, limit);
-    if (!TouchAndFlushCacheLinesWithinPage(start, boundary, kMaxFlushAttempts)) {
-      return false;
-    }
-    start = boundary;
-    next_page += kPageSize;
-  }
-  return true;
-}
-
-#else
-
-bool FlushCpuCaches(void* begin, void* end) {
-  __builtin___clear_cache(reinterpret_cast<char*>(begin), reinterpret_cast<char*>(end));
-  return true;
-}
-
-#endif
-
 pid_t GetTid() {
 #if defined(__APPLE__)
   uint64_t owner;
diff -ur art_aosp/libartbase/base/utils.h art/libartbase/base/utils.h
--- art_aosp/libartbase/base/utils.h	2021-01-29 11:00:02.198266452 +0800
+++ art/libartbase/base/utils.h	2021-01-29 10:34:50.016986900 +0800
@@ -113,8 +113,15 @@
 // Sleep forever and never come back.
 NO_RETURN void SleepForever();
 
-// Flush CPU caches. Returns true on success, false if flush failed.
-WARN_UNUSED bool FlushCpuCaches(void* begin, void* end);
+inline void FlushDataCache(void* begin, void* end) {
+  __builtin___clear_cache(reinterpret_cast<char*>(begin), reinterpret_cast<char*>(end));
+}
+
+inline void FlushInstructionCache(void* begin, void* end) {
+  // Same as FlushInstructionCache for lack of other builtin. __builtin___clear_cache
+  // flushes both caches.
+  __builtin___clear_cache(reinterpret_cast<char*>(begin), reinterpret_cast<char*>(end));
+}
 
 template <typename T>
 constexpr PointerSize ConvertToPointerSize(T any) {
diff -ur art_aosp/libartpalette/system/palette_fake.cc art/libartpalette/system/palette_fake.cc
--- art_aosp/libartpalette/system/palette_fake.cc	2021-01-29 11:01:59.615297526 +0800
+++ art/libartpalette/system/palette_fake.cc	2021-01-29 10:34:50.016986900 +0800
@@ -21,7 +21,7 @@
 
 #include <android-base/logging.h>
 #include <android-base/macros.h>  // For ATTRIBUTE_UNUSED
-
+#include "string_view_format.h"
 #include "palette_system.h"
 
 enum PaletteStatus PaletteGetVersion(int32_t* version) {
@@ -54,7 +54,7 @@
 }
 
 enum PaletteStatus PaletteWriteCrashThreadStacks(/*in*/ const char* stacks, size_t stacks_len) {
-  LOG(INFO) << std::string_view(stacks, stacks_len);
+  LOG(INFO) << StringView(stacks, stacks_len);
   return PaletteStatus::kOkay;
 }
 
diff -ur art_aosp/libdexfile/dex/compact_dex_file.cc art/libdexfile/dex/compact_dex_file.cc
--- art_aosp/libdexfile/dex/compact_dex_file.cc	2021-01-29 11:02:31.435577410 +0800
+++ art/libdexfile/dex/compact_dex_file.cc	2021-01-29 10:34:50.016986900 +0800
@@ -19,6 +19,8 @@
 #include "base/leb128.h"
 #include "code_item_accessors-inl.h"
 #include "dex_file-inl.h"
+#include <string.h>
+#include <algorithm>
 
 namespace art {
 
diff -ur art_aosp/libdexfile/dex/compact_offset_table.h art/libdexfile/dex/compact_offset_table.h
--- art_aosp/libdexfile/dex/compact_offset_table.h	2021-01-29 11:02:32.119583426 +0800
+++ art/libdexfile/dex/compact_offset_table.h	2021-01-29 10:34:50.016986900 +0800
@@ -28,7 +28,7 @@
  public:
   // This value is coupled with the leb chunk bitmask. That logic must also be adjusted when the
   // integer is modified.
-  static constexpr size_t kElementsPerIndex = 16;
+  static constexpr std::size_t kElementsPerIndex = 16;
 
   // Leb block format:
   // [uint16_t] 16 bit mask for what indexes actually have a non zero offset for the chunk.
@@ -61,7 +61,7 @@
                     uint32_t* out_table_offset);
 
   // 32 bit aligned for the offset table.
-  static constexpr size_t kAlignment = sizeof(uint32_t);
+  static constexpr std::size_t kAlignment = sizeof(uint32_t);
 };
 
 }  // namespace art
diff -ur art_aosp/libdexfile/dex/descriptors_names.cc art/libdexfile/dex/descriptors_names.cc
--- art_aosp/libdexfile/dex/descriptors_names.cc	2021-01-29 11:02:30.463568859 +0800
+++ art/libdexfile/dex/descriptors_names.cc	2021-01-29 10:34:50.016986900 +0800
@@ -21,6 +21,8 @@
 
 #include "base/macros.h"
 #include "dex/utf-inl.h"
+#include <string.h>
+#include <algorithm>
 
 namespace art {
 
diff -ur art_aosp/libdexfile/dex/dex_file.cc art/libdexfile/dex/dex_file.cc
--- art_aosp/libdexfile/dex/dex_file.cc	2021-01-29 11:02:29.831563300 +0800
+++ art/libdexfile/dex/dex_file.cc	2021-01-29 10:34:50.016986900 +0800
@@ -400,7 +400,7 @@
 }
 
 // Given a signature place the type ids into the given vector
-bool DexFile::CreateTypeList(std::string_view signature,
+bool DexFile::CreateTypeList(StringView signature,
                              dex::TypeIndex* return_type_idx,
                              std::vector<dex::TypeIndex>* param_type_idxs) const {
   if (signature[0] != '(') {
diff -ur art_aosp/libdexfile/dex/dex_file.h art/libdexfile/dex/dex_file.h
--- art_aosp/libdexfile/dex/dex_file.h	2021-01-29 11:02:29.947564321 +0800
+++ art/libdexfile/dex/dex_file.h	2021-01-29 10:34:50.016986900 +0800
@@ -19,7 +19,7 @@
 
 #include <memory>
 #include <string>
-#include <string_view>
+#include "string_view_format.h"
 #include <vector>
 
 #include <android-base/logging.h>
@@ -262,7 +262,7 @@
   const char* StringDataAndUtf16LengthByIdx(dex::StringIndex idx, uint32_t* utf16_length) const;
 
   const char* StringDataByIdx(dex::StringIndex idx) const;
-  std::string_view StringViewByIdx(dex::StringIndex idx) const;
+  StringView StringViewByIdx(dex::StringIndex idx) const;
 
   // Looks up a string id for a given modified utf8 string.
   const dex::StringId* FindStringId(const char* string) const;
@@ -480,7 +480,7 @@
   }
 
   // Given a signature place the type ids into the given vector, returns true on success
-  bool CreateTypeList(std::string_view signature,
+  bool CreateTypeList(StringView signature,
                       dex::TypeIndex* return_type_idx,
                       std::vector<dex::TypeIndex>* param_type_idxs) const;
 
diff -ur art_aosp/libdexfile/dex/dex_file-inl.h art/libdexfile/dex/dex_file-inl.h
--- art_aosp/libdexfile/dex/dex_file-inl.h	2021-01-29 11:02:30.975573364 +0800
+++ art/libdexfile/dex/dex_file-inl.h	2021-01-29 10:34:50.016986900 +0800
@@ -28,14 +28,15 @@
 #include "dex_instruction_iterator.h"
 #include "invoke_type.h"
 #include "standard_dex_file.h"
+#include "string_view_format.h"
 
 namespace art {
 
-inline std::string_view StringViewFromUtf16Length(const char* utf8_data, size_t utf16_length) {
+inline StringView StringViewFromUtf16Length(const char* utf8_data, size_t utf16_length) {
   size_t utf8_length = LIKELY(utf8_data[utf16_length] == 0)  // Is ASCII?
                            ? utf16_length
                            : utf16_length + strlen(utf8_data + utf16_length);
-  return std::string_view(utf8_data, utf8_length);
+  return StringView(utf8_data, utf8_length);
 }
 
 inline int32_t DexFile::GetStringLength(const dex::StringId& string_id) const {
@@ -71,10 +72,10 @@
   return StringDataAndUtf16LengthByIdx(idx, &unicode_length);
 }
 
-inline std::string_view DexFile::StringViewByIdx(dex::StringIndex idx) const {
+inline StringView DexFile::StringViewByIdx(dex::StringIndex idx) const {
   uint32_t unicode_length;
   const char* data = StringDataAndUtf16LengthByIdx(idx, &unicode_length);
-  return data != nullptr ? StringViewFromUtf16Length(data, unicode_length) : std::string_view("");
+  return data != nullptr ? StringViewFromUtf16Length(data, unicode_length) : StringView("");
 }
 
 inline const char* DexFile::StringByTypeIdx(dex::TypeIndex idx, uint32_t* unicode_length) const {
diff -ur art_aosp/libdexfile/dex/dex_file_loader.h art/libdexfile/dex/dex_file_loader.h
--- art_aosp/libdexfile/dex/dex_file_loader.h	2021-01-29 11:02:31.547578394 +0800
+++ art/libdexfile/dex/dex_file_loader.h	2021-01-29 10:34:50.016986900 +0800
@@ -19,6 +19,7 @@
 
 #include <cstdint>
 #include <memory>
+#include <string.h>
 #include <string>
 #include <vector>
 
diff -ur art_aosp/libdexfile/dex/dex_file_verifier.cc art/libdexfile/dex/dex_file_verifier.cc
--- art_aosp/libdexfile/dex/dex_file_verifier.cc	2021-01-29 11:02:29.603561296 +0800
+++ art/libdexfile/dex/dex_file_verifier.cc	2021-01-29 10:34:50.016986900 +0800
@@ -17,7 +17,7 @@
 #include "dex_file_verifier.h"
 
 #include <inttypes.h>
-
+#include <algorithm>
 #include <memory>
 
 #include "android-base/stringprintf.h"
diff -ur art_aosp/libdexfile/dex/signature.cc art/libdexfile/dex/signature.cc
--- art_aosp/libdexfile/dex/signature.cc	2021-01-29 11:02:32.579587471 +0800
+++ art/libdexfile/dex/signature.cc	2021-01-29 10:34:50.020986935 +0800
@@ -57,11 +57,11 @@
   return strcmp(return_type, "V") == 0;
 }
 
-bool Signature::operator==(std::string_view rhs) const {
+bool Signature::operator==(StringView rhs) const {
   if (dex_file_ == nullptr) {
     return false;
   }
-  std::string_view tail(rhs);
+  StringView tail(rhs);
   if (!StartsWith(tail, "(")) {
     return false;  // Invalid signature
   }
@@ -69,7 +69,7 @@
   const TypeList* params = dex_file_->GetProtoParameters(*proto_id_);
   if (params != nullptr) {
     for (uint32_t i = 0; i < params->Size(); ++i) {
-      std::string_view param(dex_file_->StringByTypeIdx(params->GetTypeItem(i).type_idx_));
+      StringView param(dex_file_->StringByTypeIdx(params->GetTypeItem(i).type_idx_));
       if (!StartsWith(tail, param)) {
         return false;
       }
diff -ur art_aosp/libdexfile/dex/signature.h art/libdexfile/dex/signature.h
--- art_aosp/libdexfile/dex/signature.h	2021-01-29 11:02:30.347567837 +0800
+++ art/libdexfile/dex/signature.h	2021-01-29 10:34:50.020986935 +0800
@@ -19,7 +19,7 @@
 
 #include <iosfwd>
 #include <string>
-#include <string_view>
+#include "string_view_format.h"
 
 #include <android-base/logging.h>
 
@@ -49,7 +49,7 @@
     return !(*this == rhs);
   }
 
-  bool operator==(std::string_view rhs) const;
+  bool operator==(StringView rhs) const;
 
  private:
   Signature(const DexFile* dex, const dex::ProtoId& proto) : dex_file_(dex), proto_id_(&proto) {
diff -ur art_aosp/libdexfile/dex/signature-inl.h art/libdexfile/dex/signature-inl.h
--- art_aosp/libdexfile/dex/signature-inl.h	2021-01-29 11:02:32.063582932 +0800
+++ art/libdexfile/dex/signature-inl.h	2021-01-29 10:34:50.020986935 +0800
@@ -36,13 +36,13 @@
   uint32_t lhs_shorty_len;  // For a shorty utf16 length == mutf8 length.
   const char* lhs_shorty_data = dex_file_->StringDataAndUtf16LengthByIdx(proto_id_->shorty_idx_,
                                                                          &lhs_shorty_len);
-  std::string_view lhs_shorty(lhs_shorty_data, lhs_shorty_len);
+  StringView lhs_shorty(lhs_shorty_data, lhs_shorty_len);
   {
     uint32_t rhs_shorty_len;
     const char* rhs_shorty_data =
         rhs.dex_file_->StringDataAndUtf16LengthByIdx(rhs.proto_id_->shorty_idx_,
                                                      &rhs_shorty_len);
-    std::string_view rhs_shorty(rhs_shorty_data, rhs_shorty_len);
+    StringView rhs_shorty(rhs_shorty_data, rhs_shorty_len);
     if (lhs_shorty != rhs_shorty) {
       return false;  // Shorty mismatch.
     }
@@ -56,7 +56,7 @@
       return false;  // Return type mismatch.
     }
   }
-  if (lhs_shorty.find('L', 1) != std::string_view::npos) {
+  if (lhs_shorty.find('L', 1) != StringView::npos) {
     const dex::TypeList* params = dex_file_->GetProtoParameters(*proto_id_);
     const dex::TypeList* rhs_params = rhs.dex_file_->GetProtoParameters(*rhs.proto_id_);
     // We found a reference parameter in the matching shorty, so both lists must be non-empty.
diff -ur art_aosp/libdexfile/dex/standard_dex_file.cc art/libdexfile/dex/standard_dex_file.cc
--- art_aosp/libdexfile/dex/standard_dex_file.cc	2021-01-29 11:02:31.491577900 +0800
+++ art/libdexfile/dex/standard_dex_file.cc	2021-01-29 10:34:50.020986935 +0800
@@ -20,6 +20,8 @@
 #include "base/leb128.h"
 #include "code_item_accessors-inl.h"
 #include "dex_file-inl.h"
+#include <string.h>
+#include <algorithm>
 
 namespace art {
 
diff -ur art_aosp/libdexfile/external/include/art_api/dex_file_support.h art/libdexfile/external/include/art_api/dex_file_support.h
--- art_aosp/libdexfile/external/include/art_api/dex_file_support.h	2021-01-29 11:02:33.379594509 +0800
+++ art/libdexfile/external/include/art_api/dex_file_support.h	2021-01-29 10:34:50.020986935 +0800
@@ -22,7 +22,7 @@
 #include <cstring>
 #include <memory>
 #include <string>
-#include <string_view>
+#include "string_view_format.h"
 #include <utility>
 #include <vector>
 
@@ -46,7 +46,7 @@
   }
   explicit DexString(const char* str = "")
       : ext_string_(MakeExtDexFileString(str, std::strlen(str))) {}
-  explicit DexString(std::string_view str)
+  explicit DexString(StringView str)
       : ext_string_(MakeExtDexFileString(str.data(), str.size())) {}
   ~DexString() { g_ExtDexFileFreeString(ext_string_); }
 
@@ -68,10 +68,10 @@
   }
   size_t length() const { return size(); }
 
-  operator std::string_view() const {
+  operator StringView() const {
     size_t len;
     const char* chars = g_ExtDexFileGetString(ext_string_, &len);
-    return std::string_view(chars, len);
+    return StringView(chars, len);
   }
 
  private:
