/*
 * Copyright (C) [2021] Futurewei Technologies, Inc. All rights reverved.
 *
 * OpenArkFE is licensed under the Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *
 *  http://license.coscl.org.cn/MulanPSL2
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

#ifndef __BUILTINS_H__
#define __BUILTINS_H__

#include <sstream>

namespace t2crt {

template <typename T1, typename T2>
class Record : public Object {
  public:
    std::unordered_map<T1, T2> records;
    Record() {}
    ~Record() {}
    Record(Function* ctor, Object* proto) : Object(ctor, proto) {}
    Record(Function* ctor, Object* proto, std::vector<ObjectProp> props) : Object(ctor, proto, props) {}
};

template <typename T>
class Array : public Object {
  public:
    std::vector<T> elements;
    Array(Function* ctor, Object* proto): Object(ctor, proto) {}
    Array(Function* ctor, Object* proto, std::initializer_list<T> l): Object(ctor, proto), elements(l) {}

    T& operator[](int i) {return elements[i];}
    void operator = (const std::vector<T> &v) { elements = v; }
    long size() { return elements.size(); }

    // Output array to string (recurses if multi-dim array via ostream output operator overload in t2cpp.cpp)
    std::string Dump (void) override {
      std::stringstream ss;
      std::streambuf* old = std::cout.rdbuf(ss.rdbuf());
      if (elements.empty())
        std::cout << "[]";
      else {
        std::cout << "[ ";
        auto i = elements.begin(), e = elements.end();
        std::cout << *i++;
        for (; i != e; ++i)
          std::cout << ", " << *i;
        std::cout << " ]";
      }
      std::cout.rdbuf(old);
      return ss.str();
    }

    // Put JS Array.prototype props as static fields and methods in this class
    // and add to proplist of Array_ctor.prototype object on system init.

    class Ctor: public Function {
    public:
      Ctor(Function* ctor, Object* proto, Object* prototype_proto) : Function(ctor, proto, prototype_proto) {}
      Array<T>* _new() {
        return new Array<T>(this, this->prototype);
      }
      Array<T>* _new(std::initializer_list<T>l) {
        return new Array<T>(this, this->prototype, l);
      }
    };
    static Ctor ctor;
};

// Create ctor func for 1,2,3 dimension array of given type
// note: must be in sync with format generated by ArrayCtorName in helper.h
#define ARR_CTOR_DEF(type) \
  template <> \
  Array<type>::Ctor                 Array<type>::ctor = Array<type>::Ctor(&Function::ctor, Function::ctor.prototype, Object::ctor.prototype); \
  template <> \
  Array<Array<type>*>::Ctor         Array<Array<type>*>::ctor = Array<Array<type>*>::Ctor(&Function::ctor, Function::ctor.prototype, Object::ctor.prototype); \
  template <> \
  Array<Array<Array<type>*>*>::Ctor Array<Array<Array<type>*>*>::ctor = Array<Array<Array<type>*>*>::Ctor(&Function::ctor, Function::ctor.prototype, Object::ctor.prototype);

class JSON : public Object {
  // TODO
};

class RegExp : public Object {
  // TODO
public:
  RegExp(Function* ctor, Object* proto): Object(ctor, proto) { }
  RegExp(Function* ctor, Object* proto, std::string src): Object(ctor, proto) {  source = src; }
  ~RegExp(){}
  std::string source;               // text of the pattern
  std::string Dump(void) override { return source; }

  class Ctor : public Function {
  public:
    Ctor(Function* ctor, Object* proto, Object* prototype_proto) : Function(ctor, proto, prototype_proto) { }
    RegExp* _new(std::string src) {return new RegExp(this, this->prototype, src);}
    virtual const char* __GetClassName() const {return "RegExp ";}
  };
  static Ctor ctor;
};

class Number : public Object {
public:
  // TODO
  class Ctor : public Function {
  public:
    Ctor(Function* ctor, Object* proto, Object* prototype_proto) : Function(ctor, proto, prototype_proto) { }
    virtual const char* __GetClassName() const {return "Number ";}
  };
  static Ctor ctor;
};

class IteratorProto : public Object {
public:
  // TODO
  IteratorProto(Function* ctor, Object* proto) : Object(ctor, proto) { }
};

class GeneratorFunctionPrototype : public Function {
public:
  GeneratorFunctionPrototype(Function* ctor, Object* proto, Object* prototype_proto) : Function(ctor, proto, prototype_proto) { }
};


class GeneratorProto : public IteratorProto {
public:
  // TODO
  GeneratorProto(Function* ctor, Object* proto) : IteratorProto(ctor, proto) { }
};

class GeneratorFunc : public Function::Ctor {
public:
  // TODO
  GeneratorFunc(Function* ctor, Object* proto, Object* prototype_proto, Function* prototype_obj) : Function::Ctor(ctor, proto, prototype_proto, prototype_obj) { }
};

// GeneratorFunction objects. (Ref: ECMA spec 27.3)
// IteratorPrototype: It is not a prototype object of any constructor func, but holds shared properties for iterators
// GeneratorFunction: A builtin function used as the constructor for generators (i.e. generator functions).//
// Generator:         (a.k.a. GeneratorFuncion.prototype in 2022 spec) is the prototype object of GeneratorFunction,
//                    It is a special object used as both prototype object and constructor - as prototype for sharing
//                    properties between generator functions, and as constructor whose prototype object (GeneratorPrototype
//                    in pre-2022 spec) holds shared properties for instances returned by generator functions.
extern IteratorProto              IteratorPrototype;
extern GeneratorFunc              GeneratorFunction;
extern GeneratorFunctionPrototype Generator;
extern Object*                    GeneratorPrototype;

} // namespace t2crt


using t2crt::Record;
using t2crt::JSON;
using t2crt::RegExp;
#endif // __BUILTINS_H__
