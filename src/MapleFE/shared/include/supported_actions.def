/*
* Copyright (C) [2020] Futurewei Technologies, Inc. All rights reverved.
*
* OpenArkFE is licensed under the Mulan PSL v1.
* You can use this software according to the terms and conditions of the Mulan PSL v1.
* You may obtain a copy of Mulan PSL v1 at:
*
*  http://license.coscl.org.cn/MulanPSL
*
* THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
* FIT FOR A PARTICULAR PURPOSE.
* See the Mulan PSL v1 for more details.
*/
// This file defines Rule Actions supported in both Autogen and Parser. The cooperation between
// all modules are as below.
// 1. The Action names in .spec files should be one of Actions below.
// 2. Autogen generates rule tables in gen_xxx.h/cpp files. It user ActionId.
// 3. AST maintains a table which is basically a mapping between ActionId and the corresponding
//    utility functions.
// 4. The utility functions will (1) do the validation (2) create the tree node.
//
// [NOTE] This file only contains actions to create common tree node seen in most programming
//        languages. If a language has tree nodes not covered here, they can be defined in its
//        dedicated directory.
//
// [Format] The Format tells the parameters it needs when writing .spec files.
//          It also shows the internal parameters when parser creates the AST tree node.
//          Please refer autogen/README.ACTIONS for details.

ACTION(BuildPackageName)

// These are about import/include
ACTION(BuildSingleTypeImport)      // style like java single type import
ACTION(BuildAllTypeImport)         // style like java ondemand type import
ACTION(BuildSingleStaticImport)    // style like java single static import
ACTION(BuildAllStaticImport)       // style like java ondemand static import
ACTION(BuildAllImport)             // style like c/c++ include all in .h file

ACTION(BuildBlock)
ACTION(AddToBlock)

ACTION(BuildCast)
ACTION(BuildParenthesis)
ACTION(BuildBinaryOperation)
ACTION(BuildUnaryOperation)
ACTION(BuildPostfixOperation)
ACTION(BuildLambda)

// For variable declaration, expression
ACTION(BuildDecl)
ACTION(BuildField)
ACTION(BuildVarList)

// For function
ACTION(AddParams)
ACTION(BuildFunction)
ACTION(BuildConstructor)
ACTION(AddFunctionBody)
ACTION(AddFunctionBodyTo)

// For callsite
ACTION(BuildCall)
ACTION(AddArguments)
ACTION(BuildExprList)

// For class/inheritance
ACTION(BuildClass)
ACTION(SetClassIsJavaEnum)
ACTION(AddSuperClass)
ACTION(AddSuperInterface)
ACTION(AddClassBody)
ACTION(BuildInstInit)

ACTION(AddModifier)
ACTION(AddModifierTo)
ACTION(AddInitTo)
ACTION(AddTypeTo)

// Annotation.
ACTION(BuildAnnotationType)
ACTION(BuildAnnotation)
ACTION(AddAnnotationTypeBody)

// Interface
ACTION(BuildInterface)
ACTION(AddInterfaceBody)

// Dimension
ACTION(BuildDim)
ACTION(BuildDims)
ACTION(AddDims)
ACTION(AddDimsTo)

// statment, control flow
ACTION(BuildAssignment)
ACTION(BuildReturn)
ACTION(BuildCondBranch)
ACTION(AddCondBranchTrueStatement)
ACTION(AddCondBranchFalseStatement)
ACTION(AddLabel)
ACTION(BuildBreak)
ACTION(BuildForLoop)
ACTION(BuildWhileLoop)
ACTION(BuildDoLoop)
ACTION(BuildNewOperation)
ACTION(BuildDeleteOperation)

ACTION(BuildSwitchLabel)
ACTION(BuildDefaultSwitchLabel)
ACTION(BuildOneCase)
ACTION(BuildAllCases)
ACTION(BuildSwitch)

// Exceptions, Throws
ACTION(BuildThrows)
ACTION(AddThrowsTo)

// User Types
ACTION(BuildUserType)
ACTION(AddTypeArgument)
