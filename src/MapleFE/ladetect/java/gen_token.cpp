#include "token.h"
unsigned gSystemTokensNum=105;
unsigned gOperatorTokensNum=38;
unsigned gSeparatorTokensNum=15;
unsigned gKeywordTokensNum=51;
Token gSystemTokens[] = {
  {.mTkType = TT_OP, {.mOprId = OPR_ZextAssign}},
  {.mTkType = TT_OP, {.mOprId = OPR_ShrAssign}},
  {.mTkType = TT_OP, {.mOprId = OPR_ShlAssign}},
  {.mTkType = TT_OP, {.mOprId = OPR_Zext}},
  {.mTkType = TT_OP, {.mOprId = OPR_Arrow}},
  {.mTkType = TT_OP, {.mOprId = OPR_BxorAssign}},
  {.mTkType = TT_OP, {.mOprId = OPR_BorAssign}},
  {.mTkType = TT_OP, {.mOprId = OPR_BandAssign}},
  {.mTkType = TT_OP, {.mOprId = OPR_ModAssign}},
  {.mTkType = TT_OP, {.mOprId = OPR_DivAssign}},
  {.mTkType = TT_OP, {.mOprId = OPR_MulAssign}},
  {.mTkType = TT_OP, {.mOprId = OPR_SubAssign}},
  {.mTkType = TT_OP, {.mOprId = OPR_AddAssign}},
  {.mTkType = TT_OP, {.mOprId = OPR_Lor}},
  {.mTkType = TT_OP, {.mOprId = OPR_Land}},
  {.mTkType = TT_OP, {.mOprId = OPR_Shr}},
  {.mTkType = TT_OP, {.mOprId = OPR_Shl}},
  {.mTkType = TT_OP, {.mOprId = OPR_LE}},
  {.mTkType = TT_OP, {.mOprId = OPR_GE}},
  {.mTkType = TT_OP, {.mOprId = OPR_NE}},
  {.mTkType = TT_OP, {.mOprId = OPR_EQ}},
  {.mTkType = TT_OP, {.mOprId = OPR_Dec}},
  {.mTkType = TT_OP, {.mOprId = OPR_Inc}},
  {.mTkType = TT_OP, {.mOprId = OPR_Cond}},
  {.mTkType = TT_OP, {.mOprId = OPR_Select}},
  {.mTkType = TT_OP, {.mOprId = OPR_Assign}},
  {.mTkType = TT_OP, {.mOprId = OPR_Not}},
  {.mTkType = TT_OP, {.mOprId = OPR_Bcomp}},
  {.mTkType = TT_OP, {.mOprId = OPR_Bxor}},
  {.mTkType = TT_OP, {.mOprId = OPR_Bor}},
  {.mTkType = TT_OP, {.mOprId = OPR_Band}},
  {.mTkType = TT_OP, {.mOprId = OPR_LT}},
  {.mTkType = TT_OP, {.mOprId = OPR_GT}},
  {.mTkType = TT_OP, {.mOprId = OPR_Mod}},
  {.mTkType = TT_OP, {.mOprId = OPR_Div}},
  {.mTkType = TT_OP, {.mOprId = OPR_Mul}},
  {.mTkType = TT_OP, {.mOprId = OPR_Sub}},
  {.mTkType = TT_OP, {.mOprId = OPR_Add}},
  {.mTkType = TT_SP, {.mSepId = SEP_Dotdotdot}},
  {.mTkType = TT_SP, {.mSepId = SEP_Of}},
  {.mTkType = TT_SP, {.mSepId = SEP_Pound}},
  {.mTkType = TT_SP, {.mSepId = SEP_At}},
  {.mTkType = TT_SP, {.mSepId = SEP_Colon}},
  {.mTkType = TT_SP, {.mSepId = SEP_Dot}},
  {.mTkType = TT_SP, {.mSepId = SEP_Comma}},
  {.mTkType = TT_SP, {.mSepId = SEP_Semicolon}},
  {.mTkType = TT_SP, {.mSepId = SEP_Rbrack}},
  {.mTkType = TT_SP, {.mSepId = SEP_Lbrack}},
  {.mTkType = TT_SP, {.mSepId = SEP_Rbrace}},
  {.mTkType = TT_SP, {.mSepId = SEP_Lbrace}},
  {.mTkType = TT_SP, {.mSepId = SEP_Rparen}},
  {.mTkType = TT_SP, {.mSepId = SEP_Lparen}},
  {.mTkType = TT_SP, {.mSepId = SEP_Whitespace}},
  {.mTkType = TT_KW, {.mName = "synchronized"}},
  {.mTkType = TT_KW, {.mName = "implements"}},
  {.mTkType = TT_KW, {.mName = "instanceof"}},
  {.mTkType = TT_KW, {.mName = "protected"}},
  {.mTkType = TT_KW, {.mName = "transient"}},
  {.mTkType = TT_KW, {.mName = "interface"}},
  {.mTkType = TT_KW, {.mName = "strictfp"}},
  {.mTkType = TT_KW, {.mName = "volatile"}},
  {.mTkType = TT_KW, {.mName = "abstract"}},
  {.mTkType = TT_KW, {.mName = "continue"}},
  {.mTkType = TT_KW, {.mName = "private"}},
  {.mTkType = TT_KW, {.mName = "extends"}},
  {.mTkType = TT_KW, {.mName = "finally"}},
  {.mTkType = TT_KW, {.mName = "default"}},
  {.mTkType = TT_KW, {.mName = "package"}},
  {.mTkType = TT_KW, {.mName = "boolean"}},
  {.mTkType = TT_KW, {.mName = "static"}},
  {.mTkType = TT_KW, {.mName = "public"}},
  {.mTkType = TT_KW, {.mName = "native"}},
  {.mTkType = TT_KW, {.mName = "throws"}},
  {.mTkType = TT_KW, {.mName = "import"}},
  {.mTkType = TT_KW, {.mName = "assert"}},
  {.mTkType = TT_KW, {.mName = "switch"}},
  {.mTkType = TT_KW, {.mName = "return"}},
  {.mTkType = TT_KW, {.mName = "double"}},
  {.mTkType = TT_KW, {.mName = "final"}},
  {.mTkType = TT_KW, {.mName = "throw"}},
  {.mTkType = TT_KW, {.mName = "super"}},
  {.mTkType = TT_KW, {.mName = "const"}},
  {.mTkType = TT_KW, {.mName = "while"}},
  {.mTkType = TT_KW, {.mName = "catch"}},
  {.mTkType = TT_KW, {.mName = "break"}},
  {.mTkType = TT_KW, {.mName = "short"}},
  {.mTkType = TT_KW, {.mName = "float"}},
  {.mTkType = TT_KW, {.mName = "class"}},
  {.mTkType = TT_KW, {.mName = "this"}},
  {.mTkType = TT_KW, {.mName = "goto"}},
  {.mTkType = TT_KW, {.mName = "else"}},
  {.mTkType = TT_KW, {.mName = "case"}},
  {.mTkType = TT_KW, {.mName = "void"}},
  {.mTkType = TT_KW, {.mName = "long"}},
  {.mTkType = TT_KW, {.mName = "enum"}},
  {.mTkType = TT_KW, {.mName = "char"}},
  {.mTkType = TT_KW, {.mName = "byte"}},
  {.mTkType = TT_KW, {.mName = "new"}},
  {.mTkType = TT_KW, {.mName = "try"}},
  {.mTkType = TT_KW, {.mName = "for"}},
  {.mTkType = TT_KW, {.mName = "var"}},
  {.mTkType = TT_KW, {.mName = "int"}},
  {.mTkType = TT_KW, {.mName = "if"}},
  {.mTkType = TT_KW, {.mName = "do"}},
  {.mTkType = TT_CM}
};
