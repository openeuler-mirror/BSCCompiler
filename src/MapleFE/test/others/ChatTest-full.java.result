Matched 7 tokens.
Matched 14 tokens.
Matched 21 tokens.
Matched 28 tokens.
Matched 35 tokens.
Matched 42 tokens.
Matched 51 tokens.
Matched 2146 tokens.
============= Module ===========
== Sub Tree ==
import java.io
== Sub Tree ==
import java.net.InetSocketAddress
== Sub Tree ==
import java.net.Socket
== Sub Tree ==
import java.util.ArrayList
== Sub Tree ==
import java.util.Collections
== Sub Tree ==
import java.util.List
== Sub Tree ==
import java.util.concurrent.CyclicBarrier
== Sub Tree ==
class  ChatTest
  Fields: 
    listeningPort=0
  Instance Initializer: 
  Constructors: 
  Methods: 
    func  performTestConnectDisconnectConnect()  throws:     Exception
      var:barrier1=new CyclicBarrier
      var:barrier2=new CyclicBarrier
      var:barrier3=new CyclicBarrier
      var:exceptions=new ArrayList
    func  main(args)  throws:     Throwable
      testStartStop()
      testPortOpen()
      testAsksForName()
      testUseName()
      testConnectDisconnectConnect()
      testUsernameAndMessage()
      testDontReceiveMessageInNameState()
    func  startServer()  throws:     IOException
      var:server=new ChatServer
      var:address=(InetSocketAddress)server.getSocketAddress()
      listeningPort Assign address.getPort()
      server.run()
      return server
    func  testStartStop()  throws:     Exception
      var:server=startServer()
      server.shutdown()
    func  testPortOpen()  throws:     Exception
      var:server=startServer()
      var:socket=new Socket
      cond-branch cond:socket.isConnected()
      true branch :
        new RuntimeException
      false branch :


      server.shutdown()

    func  testAsksForName()  throws:     Exception
      var:server=startServer()
      var:socket=new Socket


      server.shutdown()

    func  testUseName()  throws:     Throwable
      var:server=startServer()
      performTestUseName()

      server.shutdown()

    func  testConnectDisconnectConnect()  throws:     Exception
      var:server=startServer()
      performTestConnectDisconnectConnect()

      server.shutdown()

    func  testUsernameAndMessage()  throws:     Exception
      var:server=startServer()
      performTestUsernameAndMessage()

      server.shutdown()

    func  testDontReceiveMessageInNameState()  throws:     Exception
      var:server=startServer()
      performDontReceiveMessageInNameState()

      server.shutdown()

    func  assertEqual(exception,value,expected)  throws: 
      cond-branch cond:expected EQ value
      true branch :
        return 
      false branch :

      cond-branch cond:expected EQ null
      true branch :
        exception.add(new RuntimeException)
        return 
      false branch :

      cond-branch cond:expected.equals(value)
      true branch :
        exception.add(new RuntimeException)
        return 
      false branch :

    func  performDontReceiveMessageInNameState()  throws:     Exception
      var:barrier1=new CyclicBarrier
      var:barrier2=new CyclicBarrier
      var:barrier3=new CyclicBarrier
      var:exceptions=Collections.synchronizedList(new ArrayList)
      var:chatConnection=new ChatConnection
      var:client2=new Thread
      client2.start()
      chatConnection.run()
      cond-branch cond:exceptions.isEmpty()
      true branch :
        exceptions.get(0)
      false branch :

    func  waitForJoin(reader,s)  throws:     IOException
      var:joined
      do         joined Assign readAvailableString(reader)
while (joined NE null Land joined.contains("Welcome " Add s))
    func  performTestUsernameAndMessage()  throws:     Exception
      var:barrier1=new CyclicBarrier
      var:barrier2=new CyclicBarrier
      var:barrier3=new CyclicBarrier
      var:exceptions=Collections.synchronizedList(new ArrayList)
      var:chatConnection=new ChatConnection
      var:client2=new Thread
      client2.start()
      chatConnection.run()
      cond-branch cond:exceptions.isEmpty()
      true branch :
        exceptions.get(0)
      false branch :

    func  performTestConnectDisconnectConnect()  throws:     Exception
      var:barrier1=new CyclicBarrier
      var:barrier2=new CyclicBarrier
      var:barrier3=new CyclicBarrier
      var:exceptions=new ArrayList
      var:chatConnection=new ChatConnection
      var:chatConnection2=new ChatConnection
      var:client2=new Thread
      client2.start()
      chatConnection.run()
      chatConnection2.run()
      cond-branch cond:exceptions.isEmpty()
      true branch :
        exceptions.get(0)
      false branch :

    func  performTestUseName()  throws:     Exception
      var:barrier1=new CyclicBarrier
      var:barrier2=new CyclicBarrier
      var:barrier3=new CyclicBarrier
      var:exceptions=new ArrayList
      var:chatConnection=new ChatConnection
      var:client2=new Thread
      client2.start()
      chatConnection.run()
      cond-branch cond:exceptions.isEmpty()
      true branch :
        exceptions.get(0)
      false branch :

    func  readAvailableString(reader)  throws:     IOException
      return readAvailableString(reader,false)
    func  readAvailableString(reader,now)  throws:     IOException
      var:builder=new StringBuilder
      var:bytes
      cond-branch cond:now Land reader.ready()
      true branch :
        return null
      false branch :

      do         var:buf=

while bytes EQ 256
      return builder.toString()
  LocalClasses: 
    class  ChatConnection
      Fields: 
        exception
      Instance Initializer: 
      Constructors: 
      Methods: 
        func  run()  throws: 
          Socket
          socket
          new Socket

          socket.setTcpNoDelay(true)
          run(socket,reader,writer)


        func  run(socket,reader,writer)  throws:     Exception
      LocalClasses: 
      LocalInterfaces: 
    class  FlushingWriter
      Fields: 
        delegate
      Instance Initializer: 
      Constructors: 
        constructor  FlushingWriter(delegate)  throws: 
          this.delegate Assign delegate
      Methods: 
        func  write(cbuf,off,len)  throws:     IOException
          delegate.write(cbuf,off,len)
        func  flush()  throws:     IOException
          delegate.flush()
        func  close()  throws:     IOException
          delegate.close()
        func  write(str)  throws:     IOException
          super.write(str)
          flush()
      LocalClasses: 
      LocalInterfaces: 
  LocalInterfaces: 

ClassMethod Duplication! Function:performTestConnectDisconnectConnect is duplicated with Function:performTestConnectDisconnectConnect
ClassMethod Duplication! Function:performTestConnectDisconnectConnect is duplicated with Function:performTestConnectDisconnectConnect
