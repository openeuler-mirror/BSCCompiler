Matched 5 tokens.
Matched 12 tokens.
Matched 19 tokens.
Matched 26 tokens.
Matched 976 tokens.
============= Module ===========
== Sub Tree ==
package java.lang
== Sub Tree ==
import sun.misc.FloatingDecimal
== Sub Tree ==
import sun.misc.FpUtils
== Sub Tree ==
import sun.misc.DoubleConsts
== Sub Tree ==
class  Double
  Fields: 
    POSITIVE_INFINITY=    NEGATIVE_INFINITY=    NaN=    MAX_VALUE=1.79769e+308    MIN_NORMAL=2.22507e-308    MIN_VALUE=4.94066e-324    MAX_EXPONENT=1023    MIN_EXPONENT=Sub
  1022    SIZE=64    BYTES=    TYPE=()    value    serialVersionUID=Sub
  -694942468
  Instance Initializer: 
  Constructors: 
    constructor  Double()  throws: 
      this.value Assign value
    constructor  Double()  throws: 
      value Assign parseDouble(s)
  Methods: 
    func  toString(d)  throws: 
      return FloatingDecimal.toJavaFormatString(d)
    func  toHexString(d)  throws: 
      cond-branch cond:isFinite(d)
      true branch :
        return Double.toString(d)
      false branch :
        var:answer=new StringBuilder<StringBuilder>


    func  valueOf(s)  throws:     NumberFormatException
      return new Double<Double>
    func  valueOf(d)  throws: 
      return new Double<Double>
    func  parseDouble(s)  throws:     NumberFormatException
      return FloatingDecimal.parseDouble(s)
    func  isNaN(v)  throws: 
      return (v NE v)
    func  isInfinite(v)  throws: 
      return (v EQ POSITIVE_INFINITY) Lor (v EQ NEGATIVE_INFINITY)
    func  isFinite(d)  throws: 
      return Math.abs(d) LE DoubleConsts.MAX_VALUE
    func  isNaN()  throws: 
      return isNaN(value)
    func  isInfinite()  throws: 
      return isInfinite(value)
    func  toString()  throws: 
      return toString(value)
    func  byteValue()  throws: 
      return (byte)value
    func  shortValue()  throws: 
      return (short)value
    func  intValue()  throws: 
      return (int)value
    func  longValue()  throws: 
      return (long)value
    func  floatValue()  throws: 
      return (float)value
    func  doubleValue()  throws: 
      return value
    func  hashCode()  throws: 
      return Double.hashCode(value)
    func  hashCode(value)  throws: 
      var:bits=doubleToLongBits(value)
      return (int)(bits Bxor (bits Zext 32))
    func  equals(obj)  throws: 
      return () Land (doubleToLongBits((Double)obj.value) EQ doubleToLongBits(value))
    func  doubleToLongBits(value)  throws: 
      var:result=doubleToRawLongBits(value)
      cond-branch cond:((result Band DoubleConsts.EXP_BIT_MASK) EQ DoubleConsts.EXP_BIT_MASK) Land (result Band DoubleConsts.SIGNIF_BIT_MASK) NE 0
      true branch :
        result Assign 0
      false branch :

      return result
    func  doubleToRawLongBits(value)  throws: 
    func  longBitsToDouble(bits)  throws: 
    func  compareTo(anotherDouble)  throws: 
      return Double.compare(value,anotherDouble.value)
    func  compare(d1,d2)  throws: 
      cond-branch cond:d1 LT d2
      true branch :
        return Sub
  1
      false branch :

      cond-branch cond:d1 GT d2
      true branch :
        return 1
      false branch :

      var:thisBits=Double.doubleToLongBits(d1)
      var:anotherBits=Double.doubleToLongBits(d2)
      return ()
    func  sum(a,b)  throws: 
      return a Add b
    func  max(a,b)  throws: 
      return Math.max(a,b)
    func  min(a,b)  throws: 
      return Math.min(a,b)
  LocalClasses: 
  LocalInterfaces: 

