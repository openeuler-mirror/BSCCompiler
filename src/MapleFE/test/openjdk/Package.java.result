Matched 5 tokens.
Matched 14 tokens.
Matched 21 tokens.
Matched 28 tokens.
Matched 35 tokens.
Matched 42 tokens.
Matched 49 tokens.
Matched 56 tokens.
Matched 63 tokens.
Matched 70 tokens.
Matched 77 tokens.
Matched 84 tokens.
Matched 91 tokens.
Matched 100 tokens.
Matched 109 tokens.
Matched 118 tokens.
Matched 129 tokens.
Matched 138 tokens.
Matched 145 tokens.
Matched 152 tokens.
Matched 159 tokens.
Matched 168 tokens.
Matched 175 tokens.
Matched 182 tokens.
Matched 189 tokens.
Matched 198 tokens.
Matched 2148 tokens.
Convert unary --> binary
Convert unary --> binary
============= Module ===========
== Sub Tree ==
package java.lang
== Sub Tree ==
import java.lang.reflect.AnnotatedElement
== Sub Tree ==
import java.io.InputStream
== Sub Tree ==
import java.util.Enumeration
== Sub Tree ==
import java.util.StringTokenizer
== Sub Tree ==
import java.io.File
== Sub Tree ==
import java.io.FileInputStream
== Sub Tree ==
import java.io.FileNotFoundException
== Sub Tree ==
import java.io.IOException
== Sub Tree ==
import java.net.URL
== Sub Tree ==
import java.net.MalformedURLException
== Sub Tree ==
import java.security.AccessController
== Sub Tree ==
import java.security.PrivilegedAction
== Sub Tree ==
import java.util.jar.JarInputStream
== Sub Tree ==
import java.util.jar.Manifest
== Sub Tree ==
import java.util.jar.Attributes
== Sub Tree ==
import java.util.jar.Attributes.Name
== Sub Tree ==
import java.util.jar.JarException
== Sub Tree ==
import java.util.Map
== Sub Tree ==
import java.util.HashMap
== Sub Tree ==
import java.util.Iterator
== Sub Tree ==
import sun.net.www.ParseUtil
== Sub Tree ==
import sun.reflect.CallerSensitive
== Sub Tree ==
import dalvik.system.VMRuntime
== Sub Tree ==
import dalvik.system.VMStack
== Sub Tree ==
import java.lang.annotation.Annotation
== Sub Tree ==
class  Package
  Fields: 
    pkgs=new HashMap    urls=new HashMap    mans=new HashMap    pkgName    specTitle    specVersion    specVendor    implTitle    implVersion    implVendor    sealBase    loader    packageInfo
  Instance Initializer: 
  Constructors: 
    constructor  Package(name,spectitle,specversion,specvendor,impltitle,implversion,implvendor,sealbase,loader)  throws: 
      pkgName Assign name
      implTitle Assign impltitle
      implVersion Assign implversion
      implVendor Assign implvendor
      specTitle Assign spectitle
      specVersion Assign specversion
      specVendor Assign specvendor
      sealBase Assign sealbase
      this.loader Assign loader
    constructor  Package(name,man,url,loader)  throws: 
      var:path=
      var:sealed=null
      var:specTitle=null
      var:specVersion=null
      var:specVendor=null
      var:implTitle=null
      var:implVersion=null
      var:implVendor=null
      var:sealBase=null
      var:attr=man.getAttributes(path)
      cond-branch cond:attr NE null
      true branch :
        specTitle Assign attr.getValue(Name.SPECIFICATION_TITLE)

      false branch :

      attr Assign man.getMainAttributes()
      cond-branch cond:attr NE null
      true branch :
        cond-branch cond:specTitle EQ null
        true branch :
          specTitle Assign attr.getValue(Name.SPECIFICATION_TITLE)
        false branch :


      false branch :

      cond-branch cond:
      true branch :
        sealBase Assign url
      false branch :

      pkgName Assign name
      this.specTitle Assign specTitle
      this.specVersion Assign specVersion
      this.specVendor Assign specVendor
      this.implTitle Assign implTitle
      this.implVersion Assign implVersion
      this.implVendor Assign implVendor
      this.sealBase Assign sealBase
      this.loader Assign loader
  Methods: 
    func  getName()  throws: 
      return pkgName
    func  getSpecificationTitle()  throws: 
      return specTitle
    func  getSpecificationVersion()  throws: 
      return specVersion
    func  getSpecificationVendor()  throws: 
      return specVendor
    func  getImplementationTitle()  throws: 
      return implTitle
    func  getImplementationVersion()  throws: 
      return implVersion
    func  getImplementationVendor()  throws: 
      return implVendor
    func  isSealed()  throws: 
      return sealBase NE null
    func  isSealed(url)  throws: 
      return url.equals(sealBase)
    func  isCompatibleWith(desired)  throws:     NumberFormatException
      cond-branch cond:specVersion EQ null Lor specVersion.length() LT 1
      true branch :
        new NumberFormatException<NumberFormatException>
      false branch :

      var:sa=specVersion.split("\." Sub 1)
      var:si=
      for ( )
         Assign Integer.parseInt(sa,i)
        cond-branch cond: LT 0
        true branch :
          NumberFormatException.forInputString("" Add )
        false branch :


      var:da=desired.split("\." Sub 1)
      var:di=
      for ( )
         Assign Integer.parseInt(da,i)
        cond-branch cond: LT 0
        true branch :
          NumberFormatException.forInputString("" Add )
        false branch :


      var:len=Math.max(di.length,si.length)
      for ( )
        var:d=()


      return true
    func  getPackage(name)  throws: 
      var:l=VMStack.getCallingClassLoader()
      cond-branch cond:l NE null
      true branch :
        return l.getPackage(name)
      false branch :
        return getSystemPackage(name)

    func  getPackages()  throws: 
      var:l=VMStack.getCallingClassLoader()
      cond-branch cond:l NE null
      true branch :
        return l.getPackages()
      false branch :
        return getSystemPackages()

    func  getPackage(c)  throws: 
      var:name=c.getName()
      var:i=name.lastIndexOf(.)
      cond-branch cond:i NE Sub
  1
      true branch :
        name Assign name.substring(0,i)

      false branch :
        return null

    func  hashCode()  throws: 
      return pkgName.hashCode()
    func  toString()  throws: 
      var:targetSdkVersion=
      cond-branch cond:targetSdkVersion GT 0 Land targetSdkVersion LE 24
      true branch :
        return "package " Add pkgName
      false branch :

      var:spec=specTitle
      var:ver=specVersion
      cond-branch cond:spec NE null Land spec.length() GT 0
      true branch :
        spec Assign ", " Add spec
      false branch :
        spec Assign ""

      cond-branch cond:ver NE null Land ver.length() GT 0
      true branch :
        ver Assign ", version " Add ver
      false branch :
        ver Assign ""

      return "package " Add pkgName Add spec Add ver
    func  getPackageInfo()  throws: 
      cond-branch cond:packageInfo EQ null
      true branch :
        packageInfo Assign Class.forName(pkgName Add ".package-info",false,loader)


      false branch :

      return packageInfo
    func  getAnnotation(annotationClass)  throws: 
      return 
    func  isAnnotationPresent(annotationClass)  throws: 
      return 
    func  getAnnotationsByType(annotationClass)  throws: 
      return 
    func  getAnnotations()  throws: 
      return 
    func  getDeclaredAnnotation(annotationClass)  throws: 
      return 
    func  getDeclaredAnnotationsByType(annotationClass)  throws: 
      return 
    func  getDeclaredAnnotations()  throws: 
      return 
    func  getSystemPackage(name)  throws: 
      pkgs
      var:pkg=pkgs.get(name)


    func  getSystemPackages()  throws: 
      var:names=getSystemPackages0()
      pkgs
      for ( )
        defineSystemPackage(names,i,getSystemPackage0(names,i))

      return 

    func  defineSystemPackage(iname,fn)  throws: 
      return AccessController.doPrivileged(new PrivilegedAction<Package>)
    func  loadManifest(fn)  throws: 
      FileInputStream
      fis
      new FileInputStream<FileInputStream>

      return jis.getManifest()


    func  getSystemPackage0(name)  throws: 
    func  getSystemPackages0()  throws: 
  LocalClasses: 
  LocalInterfaces: 

Identifier:FileInputStream has no decl.
Identifier:fis has no decl.
UserType:FileInputStream has no decl.
