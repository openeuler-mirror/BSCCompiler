Matched 5 tokens.
Matched 14 tokens.
Matched 3758 tokens.
Convert unary --> binary
Convert unary --> binary
============= Module ===========
== Sub Tree ==
package java.lang
== Sub Tree ==
import java.lang.annotation.Native
== Sub Tree ==
class  Integer
  Fields: 
    MIN_VALUE=-2147483648    MAX_VALUE=2147483647    TYPE=()int.getComponentType()    digits=    SMALL_NEG_VALUES=    SMALL_NONNEG_VALUES=    DigitTens=    DigitOnes=    sizeTable=    value    SIZE=32    BYTES=SIZE Div Byte.SIZE    serialVersionUID=-142506184
  Instance Initializer: 
  Constructors: 
    constructor  Integer(value)  throws: 
      this.value Assign value
    constructor  Integer(s)  throws: 
      this.value Assign parseInt(s,10)
  Methods: 
    func  toString(i,radix)  throws: 
      cond-branch cond:radix LT Character.MIN_RADIX Lor radix GT Character.MAX_RADIX
      true branch :
        radix Assign 10
      false branch :

      cond-branch cond:radix EQ 10
      true branch :
        return toString(i)
      false branch :

      var:buf=[]
      var:negative=(i LT 0)
      var:charPos=32
      cond-branch cond:negative
      true branch :
        i Assign Sub
  i
      false branch :

      while i LE Sub
  radix         Assign digits Sub (i Mod radix)
        i Assign i Div radix

       Assign digits Sub i
      cond-branch cond:negative
      true branch :
         Assign -
      false branch :

      return new String<String>
    func  toUnsignedString(i,radix)  throws: 
      return Long.toUnsignedString(toUnsignedLong(i),radix)
    func  toHexString(i)  throws: 
      return toUnsignedString0(i,4)
    func  toOctalString(i)  throws: 
      return toUnsignedString0(i,3)
    func  toBinaryString(i)  throws: 
      return toUnsignedString0(i,1)
    func  toUnsignedString0(val,shift)  throws: 
      var:mag=Integer.SIZE Sub Integer.numberOfLeadingZeros(val)
      var:chars=Math.max(((mag Add (shift Sub 1)) Div shift)1)
      var:buf=
      formatUnsignedInt(val,shift,buf,0,chars)
      return new String<String>
    func  formatUnsignedInt(val,shift,buf,offset,len)  throws: 
      var:charPos=len
      var:radix=1 Shl shift
      var:mask=radix Sub 1
      do          Assign 
        val ZextAssign shift
while val NE 0 Land charPos GT 0
      return charPos
    func  toString(i)  throws: 
      cond-branch cond:i EQ Integer.MIN_VALUE
      true branch :
        return "-2147483648"
      false branch :

      var:negative=i LT 0
      var:small=
      cond-branch cond:small
      true branch :
        var:smallValues=

      false branch :

      var:size=
      var:buf=
      getChars(i,size,buf)
      return new String<String>
    func  toUnsignedString(i)  throws: 
      return Long.toString(toUnsignedLong(i))
    func  getChars(i,index,buf)  throws: 
      var:q,r
      var:charPos=index
      var:sign=0
      cond-branch cond:i LT 0
      true branch :
        sign Assign -
        i Assign Sub
  i
      false branch :

      while i GE 65536        q Assign i Div 100


      for ( )
        q Assign (i Mul 52429) Zext (16 Add 3)


      cond-branch cond:sign NE 0
      true branch :
         Assign sign
      false branch :

    func  stringSize(x)  throws: 
      for ( )
        cond-branch cond:x LE 
        true branch :
          return i Add 1
        false branch :


    func  parseInt(s,radix)  throws:     NumberFormatException
      cond-branch cond:s EQ null
      true branch :
        new NumberFormatException<NumberFormatException>
      false branch :

      cond-branch cond:radix LT Character.MIN_RADIX
      true branch :
        new NumberFormatException<NumberFormatException>
      false branch :

      cond-branch cond:radix GT Character.MAX_RADIX
      true branch :
        new NumberFormatException<NumberFormatException>
      false branch :

      var:result=0
      var:negative=false
      var:i=0,len=s.length()
      var:limit=Sub
  Integer.MAX_VALUE
      var:multmin
      var:digit
      cond-branch cond:len GT 0
      true branch :
        var:firstChar=s.charAt(0)

      false branch :
        NumberFormatException.forInputString(s)

      return 
    func  parseInt(s)  throws:     NumberFormatException
      return parseInt(s,10)
    func  parseUnsignedInt(s,radix)  throws:     NumberFormatException
      cond-branch cond:s EQ null
      true branch :
        new NumberFormatException<NumberFormatException>
      false branch :

      var:len=s.length()
      cond-branch cond:len GT 0
      true branch :
        var:firstChar=s.charAt(0)
        cond-branch cond:firstChar EQ -
        true branch :
          new NumberFormatException<NumberFormatException>
        false branch :
          cond-branch cond:len LE 5 Lor (radix EQ 10 Land len LE 9)
          true branch :
            return parseInt(s,radix)
          false branch :
            var:ell=Long.parseLong(s,radix)
            cond-branch cond:(ell Band 0) EQ 0
            true branch :
              return (int)ell
            false branch :
              new NumberFormatException<NumberFormatException>



      false branch :
        NumberFormatException.forInputString(s)

    func  parseUnsignedInt(s)  throws:     NumberFormatException
      return parseUnsignedInt(s,10)
    func  valueOf(s,radix)  throws:     NumberFormatException
      return Integer.valueOf(parseInt(s,radix))
    func  valueOf(s)  throws:     NumberFormatException
      return Integer.valueOf(parseInt(s,10))
    func  valueOf(i)  throws: 
      cond-branch cond:i GE IntegerCache.low Land i LE IntegerCache.high
      true branch :
        return 
      false branch :

      return new Integer<Integer>
    func  byteValue()  throws: 
      return (byte)value
    func  shortValue()  throws: 
      return (short)value
    func  intValue()  throws: 
      return value
    func  longValue()  throws: 
      return (long)value
    func  floatValue()  throws: 
      return (float)value
    func  doubleValue()  throws: 
      return (double)value
    func  toString()  throws: 
      return toString(value)
    func  hashCode()  throws: 
      return Integer.hashCode(value)
    func  hashCode(value)  throws: 
      return value
    func  equals(obj)  throws: 
      cond-branch cond:obj instanceof Integer
      true branch :
        return value EQ (Integer)obj.intValue()
      false branch :

      return false
    func  getInteger(nm)  throws: 
      return getInteger(nm,null)
    func  getInteger(nm,val)  throws: 
      var:result=getInteger(nm,null)
      return 
    func  getInteger(nm,val)  throws: 
      var:v=null
      v Assign System.getProperty(nm)


      cond-branch cond:v NE null
      true branch :
        return Integer.decode(v)


      false branch :

      return val
    func  decode(nm)  throws:     NumberFormatException
      var:radix=10
      var:index=0
      var:negative=false
      var:result
      cond-branch cond:nm.length() EQ 0
      true branch :
        new NumberFormatException<NumberFormatException>
      false branch :

      var:firstChar=nm.charAt(0)
      cond-branch cond:firstChar EQ -
      true branch :
        negative Assign true
                  indexInc

      false branch :
        cond-branch cond:firstChar EQ +
        true branch :
                      indexInc

        false branch :


      cond-branch cond:nm.startsWith("0x",index) Lor nm.startsWith("0X",index)
      true branch :
        index AddAssign 2
        radix Assign 16
      false branch :
        cond-branch cond:nm.startsWith("#",index)
        true branch :
                      indexInc

          radix Assign 16
        false branch :
          cond-branch cond:nm.startsWith("0",index) Land nm.length() GT 1 Add index
          true branch :
                          indexInc

            radix Assign 8
          false branch :



      cond-branch cond:nm.startsWith("-",index) Lor nm.startsWith("+",index)
      true branch :
        new NumberFormatException<NumberFormatException>
      false branch :


      return result
    func  compareTo(anotherInteger)  throws: 
      return compare(this.value,anotherInteger.value)
    func  compare(x,y)  throws: 
      return 
    func  compareUnsigned(x,y)  throws: 
      return compare(x Add MIN_VALUE,y Add MIN_VALUE)
    func  toUnsignedLong(x)  throws: 
      return ((long)x) Band -1
    func  divideUnsigned(dividend,divisor)  throws: 
      return (int)(toUnsignedLong(dividend) Div toUnsignedLong(divisor))
    func  remainderUnsigned(dividend,divisor)  throws: 
      return (int)(toUnsignedLong(dividend) Mod toUnsignedLong(divisor))
    func  highestOneBit(i)  throws: 
      i BorAssign (i Shr 1)
      i BorAssign (i Shr 2)
      i BorAssign (i Shr 4)
      i BorAssign (i Shr 8)
      i BorAssign (i Shr 16)
      return i Sub (i Zext 1)
    func  lowestOneBit(i)  throws: 
      return i Band Sub
  i
    func  numberOfLeadingZeros(i)  throws: 
      cond-branch cond:i EQ 0
      true branch :
        return 32
      false branch :

      var:n=1
      cond-branch cond:i Zext 16 EQ 0
      true branch :
        n AddAssign 16
        i ShlAssign 16
      false branch :

      cond-branch cond:i Zext 24 EQ 0
      true branch :
        n AddAssign 8
        i ShlAssign 8
      false branch :

      cond-branch cond:i Zext 28 EQ 0
      true branch :
        n AddAssign 4
        i ShlAssign 4
      false branch :

      cond-branch cond:i Zext 30 EQ 0
      true branch :
        n AddAssign 2
        i ShlAssign 2
      false branch :

      n SubAssign i Zext 31
      return n
    func  numberOfTrailingZeros(i)  throws: 
      var:y
      cond-branch cond:i EQ 0
      true branch :
        return 32
      false branch :

      var:n=31
      y Assign i Shl 16
      cond-branch cond:y NE 0
      true branch :
        n Assign n Sub 16
        i Assign y
      false branch :

      y Assign i Shl 8
      cond-branch cond:y NE 0
      true branch :
        n Assign n Sub 8
        i Assign y
      false branch :

      y Assign i Shl 4
      cond-branch cond:y NE 0
      true branch :
        n Assign n Sub 4
        i Assign y
      false branch :

      y Assign i Shl 2
      cond-branch cond:y NE 0
      true branch :
        n Assign n Sub 2
        i Assign y
      false branch :

      return n Sub ((i Shl 1) Zext 31)
    func  bitCount(i)  throws: 
      i Assign i Sub ((i Zext 1) Band 1431655765)
      i Assign (i Band 858993459) Add ((i Zext 2) Band 858993459)
      i Assign (i Add (i Zext 4)) Band 252645135
      i Assign i Add (i Zext 8)
      i Assign i Add (i Zext 16)
      return i Band 63
    func  rotateLeft(i,distance)  throws: 
      return (i Shl distance) Bor (i Zext Sub
  distance)
    func  rotateRight(i,distance)  throws: 
      return (i Zext distance) Bor (i Shl Sub
  distance)
    func  reverse(i)  throws: 
      i Assign (i Band 1431655765) Shl 1 Bor (i Zext 1) Band 1431655765
      i Assign (i Band 858993459) Shl 2 Bor (i Zext 2) Band 858993459
      i Assign (i Band 252645135) Shl 4 Bor (i Zext 4) Band 252645135
      i Assign (i Shl 24) Bor ((i Band 65280) Shl 8) Bor ((i Zext 8) Band 65280) Bor (i Zext 24)
      return i
    func  signum(i)  throws: 
      return (i Shr 31) Bor (Sub
  i Zext 31)
    func  reverseBytes(i)  throws: 
      return ((i Zext 24)) Bor ((i Shr 8) Band 65280) Bor ((i Shl 8) Band 16711680) Bor ((i Shl 24))
    func  sum(a,b)  throws: 
      return a Add b
    func  max(a,b)  throws: 
      return Math.max(a,b)
    func  min(a,b)  throws: 
      return Math.min(a,b)
  LocalClasses: 
    class  IntegerCache
      Fields: 
        low=Sub
  128        high        cache[]
      Instance Initializer: 
        InstInit- 0
      Constructors: 
        constructor  IntegerCache()  throws: 
      Methods: 
      LocalClasses: 
      LocalInterfaces: 
  LocalInterfaces: 

