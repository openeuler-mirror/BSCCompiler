Matched 5 tokens.
Matched 14 tokens.
Matched 21 tokens.
Matched 28 tokens.
Matched 35 tokens.
Matched 42 tokens.
Matched 11999 tokens.
============= Module ===========
== Sub Tree ==
package java.lang
== Sub Tree ==
import dalvik.annotation.optimization.FastNative
== Sub Tree ==
import java.util.Arrays
== Sub Tree ==
import java.util.HashMap
== Sub Tree ==
import java.util.Locale
== Sub Tree ==
import java.util.Map
== Sub Tree ==
class  Character
  Fields: 
    MIN_RADIX=2    MAX_RADIX=36    MIN_VALUE=0    MAX_VALUE=65535    TYPE=()char.getComponentType()    UNASSIGNED=0    UPPERCASE_LETTER=1    LOWERCASE_LETTER=2    TITLECASE_LETTER=3    MODIFIER_LETTER=4    OTHER_LETTER=5    NON_SPACING_MARK=6    ENCLOSING_MARK=7    COMBINING_SPACING_MARK=8    DECIMAL_DIGIT_NUMBER=9    LETTER_NUMBER=10    OTHER_NUMBER=11    SPACE_SEPARATOR=12    LINE_SEPARATOR=13    PARAGRAPH_SEPARATOR=14    CONTROL=15    FORMAT=16    PRIVATE_USE=18    SURROGATE=19    DASH_PUNCTUATION=20    START_PUNCTUATION=21    END_PUNCTUATION=22    CONNECTOR_PUNCTUATION=23    OTHER_PUNCTUATION=24    MATH_SYMBOL=25    CURRENCY_SYMBOL=26    MODIFIER_SYMBOL=27    OTHER_SYMBOL=28    INITIAL_QUOTE_PUNCTUATION=29    FINAL_QUOTE_PUNCTUATION=30    ERROR=-1    DIRECTIONALITY_UNDEFINED=Sub
  1    DIRECTIONALITY_LEFT_TO_RIGHT=0    DIRECTIONALITY_RIGHT_TO_LEFT=1    DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC=2    DIRECTIONALITY_EUROPEAN_NUMBER=3    DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR=4    DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR=5    DIRECTIONALITY_ARABIC_NUMBER=6    DIRECTIONALITY_COMMON_NUMBER_SEPARATOR=7    DIRECTIONALITY_NONSPACING_MARK=8    DIRECTIONALITY_BOUNDARY_NEUTRAL=9    DIRECTIONALITY_PARAGRAPH_SEPARATOR=10    DIRECTIONALITY_SEGMENT_SEPARATOR=11    DIRECTIONALITY_WHITESPACE=12    DIRECTIONALITY_OTHER_NEUTRALS=13    DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING=14    DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE=15    DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING=16    DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE=17    DIRECTIONALITY_POP_DIRECTIONAL_FORMAT=18    MIN_HIGH_SURROGATE=55296    MAX_HIGH_SURROGATE=56319    MIN_LOW_SURROGATE=56320    MAX_LOW_SURROGATE=57343    MIN_SURROGATE=MIN_HIGH_SURROGATE    MAX_SURROGATE=MAX_LOW_SURROGATE    MIN_SUPPLEMENTARY_CODE_POINT=65536    MIN_CODE_POINT=0    MAX_CODE_POINT=1114111    DIRECTIONALITY=    value    serialVersionUID=1796875896    SIZE=16    BYTES=SIZE Div Byte.SIZE
  Instance Initializer: 
  Constructors: 
    constructor  Character(value)  throws: 
      this.value Assign value
  Methods: 
    func  valueOf(c)  throws: 
      cond-branch cond:c LE 127
      true branch :
        return 
      false branch :

      return new Character
    func  charValue()  throws: 
      return value
    func  hashCode()  throws: 
      return Character.hashCode(value)
    func  hashCode(value)  throws: 
      return (int)value
    func  equals(obj)  throws: 
      cond-branch cond:obj instanceof Character
      true branch :
        return value EQ (Character)obj.charValue()
      false branch :

      return false
    func  toString()  throws: 
      var:buf=value[]
      return String.valueOf(buf)
    func  toString(c)  throws: 
      return String.valueOf(c)
    func  isValidCodePoint(codePoint)  throws: 
      var:plane=codePoint Zext 16
      return plane LT ((MAX_CODE_POINT Add 1) Zext 16)
    func  isBmpCodePoint(codePoint)  throws: 
      return codePoint Zext 16 EQ 0
    func  isSupplementaryCodePoint(codePoint)  throws: 
      return codePoint GE MIN_SUPPLEMENTARY_CODE_POINT Land codePoint LT MAX_CODE_POINT Add 1
    func  isHighSurrogate(ch)  throws: 
      return ch GE MIN_HIGH_SURROGATE Land ch LT (MAX_HIGH_SURROGATE Add 1)
    func  isLowSurrogate(ch)  throws: 
      return ch GE MIN_LOW_SURROGATE Land ch LT (MAX_LOW_SURROGATE Add 1)
    func  isSurrogate(ch)  throws: 
      return ch GE MIN_SURROGATE Land ch LT (MAX_SURROGATE Add 1)
    func  isSurrogatePair(high,low)  throws: 
      return isHighSurrogate(high) Land isLowSurrogate(low)
    func  charCount(codePoint)  throws: 
      return 
    func  toCodePoint(high,low)  throws: 
      return ((high Shl 10) Add low) Add (MIN_SUPPLEMENTARY_CODE_POINT Sub (MIN_HIGH_SURROGATE Shl 10) Sub MIN_LOW_SURROGATE)
    func  codePointAt(seq,index)  throws: 
      var:c1=seq.charAt(index)
      cond-branch cond:isHighSurrogate(c1) Land Inc
  index LT seq.length()
      true branch :
        var:c2=seq.charAt(index)
        cond-branch cond:isLowSurrogate(c2)
        true branch :
          return toCodePoint(c1,c2)
        false branch :

      false branch :

      return c1
    func  codePointAt(a,index)  throws: 
      return codePointAtImpl(a,index,a.length)
    func  codePointAt(a,index,limit)  throws: 
      cond-branch cond:index GE limit Lor limit LT 0 Lor limit GT a.length
      true branch :
        new IndexOutOfBoundsException
      false branch :

      return codePointAtImpl(a,index,limit)
    func  codePointAtImpl(a,index,limit)  throws: 
      var:c1=
      cond-branch cond:isHighSurrogate(c1) Land Inc
  index LT limit
      true branch :
        var:c2=
        cond-branch cond:isLowSurrogate(c2)
        true branch :
          return toCodePoint(c1,c2)
        false branch :

      false branch :

      return c1
    func  codePointBefore(seq,index)  throws: 
      var:c2=seq.charAt(Dec
  index)
      cond-branch cond:isLowSurrogate(c2) Land index GT 0
      true branch :
        var:c1=seq.charAt(Dec
  index)
        cond-branch cond:isHighSurrogate(c1)
        true branch :
          return toCodePoint(c1,c2)
        false branch :

      false branch :

      return c2
    func  codePointBefore(a,index)  throws: 
      return codePointBeforeImpl(a,index,0)
    func  codePointBefore(a,index,start)  throws: 
      cond-branch cond:index LE start Lor start LT 0 Lor start GE a.length
      true branch :
        new IndexOutOfBoundsException
      false branch :

      return codePointBeforeImpl(a,index,start)
    func  codePointBeforeImpl(a,index,start)  throws: 
      var:c2=
      cond-branch cond:isLowSurrogate(c2) Land index GT start
      true branch :
        var:c1=
        cond-branch cond:isHighSurrogate(c1)
        true branch :
          return toCodePoint(c1,c2)
        false branch :

      false branch :

      return c2
    func  highSurrogate(codePoint)  throws: 
      return (char)((codePoint Zext 10) Add (MIN_HIGH_SURROGATE Sub (MIN_SUPPLEMENTARY_CODE_POINT Zext 10)))
    func  lowSurrogate(codePoint)  throws: 
      return (char)((codePoint Band 1023) Add MIN_LOW_SURROGATE)
    func  toChars(codePoint,dst,dstIndex)  throws: 
      cond-branch cond:isBmpCodePoint(codePoint)
      true branch :
         Assign (char)codePoint
        return 1
      false branch :
        cond-branch cond:isValidCodePoint(codePoint)
        true branch :
          toSurrogates(codePoint,dst,dstIndex)
          return 2
        false branch :
          new IllegalArgumentException


    func  toChars(codePoint)  throws: 
      cond-branch cond:isBmpCodePoint(codePoint)
      true branch :
        return 
      false branch :
        cond-branch cond:isValidCodePoint(codePoint)
        true branch :
          var:result=

        false branch :
          new IllegalArgumentException


    func  toSurrogates(codePoint,dst,index)  throws: 
       Assign lowSurrogate(codePoint)
       Assign highSurrogate(codePoint)
    func  codePointCount(seq,beginIndex,endIndex)  throws: 
      var:length=seq.length()
      cond-branch cond:beginIndex LT 0 Lor endIndex GT length Lor beginIndex GT endIndex
      true branch :
        new IndexOutOfBoundsException
      false branch :

      var:n=endIndex Sub beginIndex
      for ( )
        cond-branch cond:isHighSurrogate(seq.charAt(  iInc
)) Land i LT endIndex Land isLowSurrogate(seq.charAt(i))
        true branch :
                      nDec

                      iInc

        false branch :


      return n
    func  codePointCount(a,offset,count)  throws: 
      cond-branch cond:count GT a.length Sub offset Lor offset LT 0 Lor count LT 0
      true branch :
        new IndexOutOfBoundsException
      false branch :

      return codePointCountImpl(a,offset,count)
    func  codePointCountImpl(a,offset,count)  throws: 
      var:endIndex=offset Add count
      var:n=count
      for ( )
        cond-branch cond:isHighSurrogate(a,  iInc
) Land i LT endIndex Land isLowSurrogate(a,i)
        true branch :
                      nDec

                      iInc

        false branch :


      return n
    func  offsetByCodePoints(seq,index,codePointOffset)  throws: 
      var:length=seq.length()
      cond-branch cond:index LT 0 Lor index GT length
      true branch :
        new IndexOutOfBoundsException
      false branch :

      var:x=index
      cond-branch cond:codePointOffset GE 0
      true branch :
        var:i

      false branch :
        var:i


      return x
    func  offsetByCodePoints(a,start,count,index,codePointOffset)  throws: 
      cond-branch cond:count GT a.length Sub start Lor start LT 0 Lor count LT 0 Lor index LT start Lor index GT start Add count
      true branch :
        new IndexOutOfBoundsException
      false branch :

      return offsetByCodePointsImpl(a,start,count,index,codePointOffset)
    func  offsetByCodePointsImpl(a,start,count,index,codePointOffset)  throws: 
      var:x=index
      cond-branch cond:codePointOffset GE 0
      true branch :
        var:limit=start Add count

      false branch :
        var:i


      return x
    func  isLowerCase(ch)  throws: 
      return isLowerCase((int)ch)
    func  isLowerCase(codePoint)  throws: 
      return isLowerCaseImpl(codePoint)
    func  isLowerCaseImpl(codePoint)  throws: 
    func  isUpperCase(ch)  throws: 
      return isUpperCase((int)ch)
    func  isUpperCase(codePoint)  throws: 
      return isUpperCaseImpl(codePoint)
    func  isUpperCaseImpl(codePoint)  throws: 
    func  isTitleCase(ch)  throws: 
      return isTitleCase((int)ch)
    func  isTitleCase(codePoint)  throws: 
      return isTitleCaseImpl(codePoint)
    func  isTitleCaseImpl(codePoint)  throws: 
    func  isDigit(ch)  throws: 
      return isDigit((int)ch)
    func  isDigit(codePoint)  throws: 
      return isDigitImpl(codePoint)
    func  isDigitImpl(codePoint)  throws: 
    func  isDefined(ch)  throws: 
      return isDefined((int)ch)
    func  isDefined(codePoint)  throws: 
      return isDefinedImpl(codePoint)
    func  isDefinedImpl(codePoint)  throws: 
    func  isLetter(ch)  throws: 
      return isLetter((int)ch)
    func  isLetter(codePoint)  throws: 
      return isLetterImpl(codePoint)
    func  isLetterImpl(codePoint)  throws: 
    func  isLetterOrDigit(ch)  throws: 
      return isLetterOrDigit((int)ch)
    func  isLetterOrDigit(codePoint)  throws: 
      return isLetterOrDigitImpl(codePoint)
    func  isLetterOrDigitImpl(codePoint)  throws: 
    func  isJavaLetter(ch)  throws: 
      return isJavaIdentifierStart(ch)
    func  isJavaLetterOrDigit(ch)  throws: 
      return isJavaIdentifierPart(ch)
    func  isAlphabetic(codePoint)  throws: 
      return isAlphabeticImpl(codePoint)
    func  isAlphabeticImpl(codePoint)  throws: 
    func  isIdeographic(codePoint)  throws: 
      return isIdeographicImpl(codePoint)
    func  isIdeographicImpl(codePoint)  throws: 
    func  isJavaIdentifierStart(ch)  throws: 
      return isJavaIdentifierStart((int)ch)
    func  isJavaIdentifierStart(codePoint)  throws: 
      cond-branch cond:codePoint LT 64
      true branch :
        return (codePoint EQ $)
      false branch :
        cond-branch cond:codePoint LT 128
        true branch :
          return (2147483630 Band (1 Shl (codePoint Sub 64))) NE 0
        false branch :


      return ((1 Shl getType(codePoint)) Band ((1 Shl UPPERCASE_LETTER) Bor (1 Shl LOWERCASE_LETTER) Bor (1 Shl TITLECASE_LETTER) Bor (1 Shl MODIFIER_LETTER) Bor (1 Shl OTHER_LETTER) Bor (1 Shl CURRENCY_SYMBOL) Bor (1 Shl CONNECTOR_PUNCTUATION) Bor (1 Shl LETTER_NUMBER))) NE 0
    func  isJavaIdentifierPart(ch)  throws: 
      return isJavaIdentifierPart((int)ch)
    func  isJavaIdentifierPart(codePoint)  throws: 
      cond-branch cond:codePoint LT 64
      true branch :
        return (-253953 Band (1 Shl codePoint)) NE 0
      false branch :
        cond-branch cond:codePoint LT 128
        true branch :
          return (2147483630 Band (1 Shl (codePoint Sub 64))) NE 0
        false branch :


      return ((1 Shl getType(codePoint)) Band ((1 Shl UPPERCASE_LETTER) Bor (1 Shl LOWERCASE_LETTER) Bor (1 Shl TITLECASE_LETTER) Bor (1 Shl MODIFIER_LETTER) Bor (1 Shl OTHER_LETTER) Bor (1 Shl CURRENCY_SYMBOL) Bor (1 Shl CONNECTOR_PUNCTUATION) Bor (1 Shl DECIMAL_DIGIT_NUMBER) Bor (1 Shl LETTER_NUMBER) Bor (1 Shl FORMAT) Bor (1 Shl COMBINING_SPACING_MARK) Bor (1 Shl NON_SPACING_MARK))) NE 0 Lor (codePoint GE 0 Land codePoint LE 8) Lor (codePoint GE 14 Land codePoint LE 27) Lor (codePoint GE 127 Land codePoint LE 159)
    func  isUnicodeIdentifierStart(ch)  throws: 
      return isUnicodeIdentifierStart((int)ch)
    func  isUnicodeIdentifierStart(codePoint)  throws: 
      return isUnicodeIdentifierStartImpl(codePoint)
    func  isUnicodeIdentifierStartImpl(codePoint)  throws: 
    func  isUnicodeIdentifierPart(ch)  throws: 
      return isUnicodeIdentifierPart((int)ch)
    func  isUnicodeIdentifierPart(codePoint)  throws: 
      return isUnicodeIdentifierPartImpl(codePoint)
    func  isUnicodeIdentifierPartImpl(codePoint)  throws: 
    func  isIdentifierIgnorable(ch)  throws: 
      return isIdentifierIgnorable((int)ch)
    func  isIdentifierIgnorable(codePoint)  throws: 
      return isIdentifierIgnorableImpl(codePoint)
    func  isIdentifierIgnorableImpl(codePoint)  throws: 
    func  toLowerCase(ch)  throws: 
      return (char)toLowerCase((int)ch)
    func  toLowerCase(codePoint)  throws: 
      cond-branch cond:codePoint GE A Land codePoint LE Z
      true branch :
        return codePoint Add (a Sub A)
      false branch :

      cond-branch cond:codePoint LT 128
      true branch :
        return codePoint
      false branch :

      return toLowerCaseImpl(codePoint)
    func  toLowerCaseImpl(codePoint)  throws: 
    func  toUpperCase(ch)  throws: 
      return (char)toUpperCase((int)ch)
    func  toUpperCase(codePoint)  throws: 
      cond-branch cond:codePoint GE a Land codePoint LE z
      true branch :
        return codePoint Sub (a Sub A)
      false branch :

      cond-branch cond:codePoint LT 128
      true branch :
        return codePoint
      false branch :

      return toUpperCaseImpl(codePoint)
    func  toUpperCaseImpl(codePoint)  throws: 
    func  toTitleCase(ch)  throws: 
      return (char)toTitleCase((int)ch)
    func  toTitleCase(codePoint)  throws: 
      return toTitleCaseImpl(codePoint)
    func  toTitleCaseImpl(codePoint)  throws: 
    func  digit(ch,radix)  throws: 
      return digit((int)ch,radix)
    func  digit(codePoint,radix)  throws: 
      cond-branch cond:radix LT MIN_RADIX Lor radix GT MAX_RADIX
      true branch :
        return Sub
  1
      false branch :

      cond-branch cond:codePoint LT 128
      true branch :
        var:result=Sub
  1

      false branch :

      return digitImpl(codePoint,radix)
    func  digitImpl(codePoint,radix)  throws: 
    func  getNumericValue(ch)  throws: 
      return getNumericValue((int)ch)
    func  getNumericValue(codePoint)  throws: 
      cond-branch cond:codePoint LT 128
      true branch :
        cond-branch cond:codePoint GE 0 Land codePoint LE 9
        true branch :
          return codePoint Sub 0
        false branch :


      false branch :

      cond-branch cond:codePoint GE 65313 Land codePoint LE 65338
      true branch :
        return codePoint Sub 65303
      false branch :

      cond-branch cond:codePoint GE 65345 Land codePoint LE 65370
      true branch :
        return codePoint Sub 65335
      false branch :

      return getNumericValueImpl(codePoint)
    func  getNumericValueImpl(codePoint)  throws: 
    func  isSpace(ch)  throws: 
      return (ch LE 32) Land (((((1 Shl 9) Bor (1 Shl 10) Bor (1 Shl 12) Bor (1 Shl 13) Bor (1 Shl 32)) Shr ch) Band 1) NE 0)
    func  isSpaceChar(ch)  throws: 
      return isSpaceChar((int)ch)
    func  isSpaceChar(codePoint)  throws: 
      cond-branch cond:codePoint EQ 32 Lor codePoint EQ 160
      true branch :
        return true
      false branch :

      cond-branch cond:codePoint LT 4096
      true branch :
        return false
      false branch :

      cond-branch cond:codePoint EQ 5760 Lor codePoint EQ 6158
      true branch :
        return true
      false branch :

      cond-branch cond:codePoint LT 8192
      true branch :
        return false
      false branch :

      cond-branch cond:codePoint LE 65535
      true branch :
        return codePoint LE 8202 Lor codePoint EQ 8232 Lor codePoint EQ 8233 Lor codePoint EQ 8239 Lor codePoint EQ 8287 Lor codePoint EQ 12288
      false branch :

      return isSpaceCharImpl(codePoint)
    func  isSpaceCharImpl(codePoint)  throws: 
    func  isWhitespace(ch)  throws: 
      return isWhitespace((int)ch)
    func  isWhitespace(codePoint)  throws: 
      cond-branch cond:(codePoint GE 28 Land codePoint LE 32) Lor (codePoint GE 9 Land codePoint LE 13)
      true branch :
        return true
      false branch :

      cond-branch cond:codePoint LT 4096
      true branch :
        return false
      false branch :

      cond-branch cond:codePoint EQ 5760 Lor codePoint EQ 6158
      true branch :
        return true
      false branch :

      cond-branch cond:codePoint LT 8192
      true branch :
        return false
      false branch :

      cond-branch cond:codePoint EQ 8199 Lor codePoint EQ 8239
      true branch :
        return false
      false branch :

      cond-branch cond:codePoint LE 65535
      true branch :
        return codePoint LE 8202 Lor codePoint EQ 8232 Lor codePoint EQ 8233 Lor codePoint EQ 8287 Lor codePoint EQ 12288
      false branch :

      return isWhitespaceImpl(codePoint)
    func  isWhitespaceImpl(codePoint)  throws: 
    func  isISOControl(ch)  throws: 
      return isISOControl((int)ch)
    func  isISOControl(codePoint)  throws: 
      return codePoint LE 159 Land (codePoint GE 127 Lor (codePoint Zext 5 EQ 0))
    func  getType(ch)  throws: 
      return getType((int)ch)
    func  getType(codePoint)  throws: 
      var:type=getTypeImpl(codePoint)
      cond-branch cond:type LE Character.FORMAT
      true branch :
        return type
      false branch :

      return (type Add 1)
    func  getTypeImpl(codePoint)  throws: 
    func  forDigit(digit,radix)  throws: 
      cond-branch cond:(digit GE radix) Lor (digit LT 0)
      true branch :
        return  
      false branch :

      cond-branch cond:(radix LT Character.MIN_RADIX) Lor (radix GT Character.MAX_RADIX)
      true branch :
        return  
      false branch :

      cond-branch cond:digit LT 10
      true branch :
        return (char)(0 Add digit)
      false branch :

      return (char)(a Sub 10 Add digit)
    func  getDirectionality(ch)  throws: 
      return getDirectionality((int)ch)
    func  getDirectionality(codePoint)  throws: 
      cond-branch cond:getType(codePoint) EQ Character.UNASSIGNED
      true branch :
        return Character.DIRECTIONALITY_UNDEFINED
      false branch :

      var:directionality=getDirectionalityImpl(codePoint)
      cond-branch cond:directionality GE 0 Land directionality LT DIRECTIONALITY.length
      true branch :
        return 
      false branch :

      return Character.DIRECTIONALITY_UNDEFINED
    func  getDirectionalityImpl(codePoint)  throws: 
    func  isMirrored(ch)  throws: 
      return isMirrored((int)ch)
    func  isMirrored(codePoint)  throws: 
      return isMirroredImpl(codePoint)
    func  isMirroredImpl(codePoint)  throws: 
    func  compareTo(anotherCharacter)  throws: 
      return compare(this.value,anotherCharacter.value)
    func  compare(x,y)  throws: 
      return x Sub y
    func  reverseBytes(ch)  throws: 
      return (char)(((ch Band 65280) Shr 8) Bor (ch Shl 8))
    func  getName(codePoint)  throws: 
      cond-branch cond:isValidCodePoint(codePoint)
      true branch :
        new IllegalArgumentException
      false branch :

      var:name=getNameImpl(codePoint)
      cond-branch cond:name NE null
      true branch :
        return name
      false branch :

      cond-branch cond:getType(codePoint) EQ UNASSIGNED
      true branch :
        return null
      false branch :

      var:block=UnicodeBlock.of(codePoint)
      cond-branch cond:block NE null
      true branch :
        return block.toString().replace(_, ) Add " " Add Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH)
      false branch :

      return Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH)
    func  getNameImpl(codePoint)  throws: 
  LocalClasses: 
    class  Subset
      Fields: 
        name
      Instance Initializer: 
      Constructors: 
        constructor  Subset(name)  throws: 
          cond-branch cond:name EQ null
          true branch :
            new NullPointerException
          false branch :

          this.name Assign name
      Methods: 
        func  equals(obj)  throws: 
          return (this EQ obj)
        func  hashCode()  throws: 
          return super.hashCode()
        func  toString()  throws: 
          return name
      LocalClasses: 
      LocalInterfaces: 
    class  UnicodeBlock
      Fields: 
        map=new HashMap        BASIC_LATIN=new UnicodeBlock        LATIN_1_SUPPLEMENT=new UnicodeBlock        LATIN_EXTENDED_A=new UnicodeBlock        LATIN_EXTENDED_B=new UnicodeBlock        IPA_EXTENSIONS=new UnicodeBlock        SPACING_MODIFIER_LETTERS=new UnicodeBlock        COMBINING_DIACRITICAL_MARKS=new UnicodeBlock        GREEK=new UnicodeBlock        CYRILLIC=new UnicodeBlock        ARMENIAN=new UnicodeBlock        HEBREW=new UnicodeBlock        ARABIC=new UnicodeBlock        DEVANAGARI=new UnicodeBlock        BENGALI=new UnicodeBlock        GURMUKHI=new UnicodeBlock        GUJARATI=new UnicodeBlock        ORIYA=new UnicodeBlock        TAMIL=new UnicodeBlock        TELUGU=new UnicodeBlock        KANNADA=new UnicodeBlock        MALAYALAM=new UnicodeBlock        THAI=new UnicodeBlock        LAO=new UnicodeBlock        TIBETAN=new UnicodeBlock        GEORGIAN=new UnicodeBlock        HANGUL_JAMO=new UnicodeBlock        LATIN_EXTENDED_ADDITIONAL=new UnicodeBlock        GREEK_EXTENDED=new UnicodeBlock        GENERAL_PUNCTUATION=new UnicodeBlock        SUPERSCRIPTS_AND_SUBSCRIPTS=new UnicodeBlock        CURRENCY_SYMBOLS=new UnicodeBlock        COMBINING_MARKS_FOR_SYMBOLS=new UnicodeBlock        LETTERLIKE_SYMBOLS=new UnicodeBlock        NUMBER_FORMS=new UnicodeBlock        ARROWS=new UnicodeBlock        MATHEMATICAL_OPERATORS=new UnicodeBlock        MISCELLANEOUS_TECHNICAL=new UnicodeBlock        CONTROL_PICTURES=new UnicodeBlock        OPTICAL_CHARACTER_RECOGNITION=new UnicodeBlock        ENCLOSED_ALPHANUMERICS=new UnicodeBlock        BOX_DRAWING=new UnicodeBlock        BLOCK_ELEMENTS=new UnicodeBlock        GEOMETRIC_SHAPES=new UnicodeBlock        MISCELLANEOUS_SYMBOLS=new UnicodeBlock        DINGBATS=new UnicodeBlock        CJK_SYMBOLS_AND_PUNCTUATION=new UnicodeBlock        HIRAGANA=new UnicodeBlock        KATAKANA=new UnicodeBlock        BOPOMOFO=new UnicodeBlock        HANGUL_COMPATIBILITY_JAMO=new UnicodeBlock        KANBUN=new UnicodeBlock        ENCLOSED_CJK_LETTERS_AND_MONTHS=new UnicodeBlock        CJK_COMPATIBILITY=new UnicodeBlock        CJK_UNIFIED_IDEOGRAPHS=new UnicodeBlock        HANGUL_SYLLABLES=new UnicodeBlock        PRIVATE_USE_AREA=new UnicodeBlock        CJK_COMPATIBILITY_IDEOGRAPHS=new UnicodeBlock        ALPHABETIC_PRESENTATION_FORMS=new UnicodeBlock        ARABIC_PRESENTATION_FORMS_A=new UnicodeBlock        COMBINING_HALF_MARKS=new UnicodeBlock        CJK_COMPATIBILITY_FORMS=new UnicodeBlock        SMALL_FORM_VARIANTS=new UnicodeBlock        ARABIC_PRESENTATION_FORMS_B=new UnicodeBlock        HALFWIDTH_AND_FULLWIDTH_FORMS=new UnicodeBlock        SPECIALS=new UnicodeBlock        SURROGATES_AREA=new UnicodeBlock        SYRIAC=new UnicodeBlock        THAANA=new UnicodeBlock        SINHALA=new UnicodeBlock        MYANMAR=new UnicodeBlock        ETHIOPIC=new UnicodeBlock        CHEROKEE=new UnicodeBlock        UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS=new UnicodeBlock        OGHAM=new UnicodeBlock        RUNIC=new UnicodeBlock        KHMER=new UnicodeBlock        MONGOLIAN=new UnicodeBlock        BRAILLE_PATTERNS=new UnicodeBlock        CJK_RADICALS_SUPPLEMENT=new UnicodeBlock        KANGXI_RADICALS=new UnicodeBlock        IDEOGRAPHIC_DESCRIPTION_CHARACTERS=new UnicodeBlock        BOPOMOFO_EXTENDED=new UnicodeBlock        CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A=new UnicodeBlock        YI_SYLLABLES=new UnicodeBlock        YI_RADICALS=new UnicodeBlock        CYRILLIC_SUPPLEMENTARY=new UnicodeBlock        TAGALOG=new UnicodeBlock        HANUNOO=new UnicodeBlock        BUHID=new UnicodeBlock        TAGBANWA=new UnicodeBlock        LIMBU=new UnicodeBlock        TAI_LE=new UnicodeBlock        KHMER_SYMBOLS=new UnicodeBlock        PHONETIC_EXTENSIONS=new UnicodeBlock        MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A=new UnicodeBlock        SUPPLEMENTAL_ARROWS_A=new UnicodeBlock        SUPPLEMENTAL_ARROWS_B=new UnicodeBlock        MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B=new UnicodeBlock        SUPPLEMENTAL_MATHEMATICAL_OPERATORS=new UnicodeBlock        MISCELLANEOUS_SYMBOLS_AND_ARROWS=new UnicodeBlock        KATAKANA_PHONETIC_EXTENSIONS=new UnicodeBlock        YIJING_HEXAGRAM_SYMBOLS=new UnicodeBlock        VARIATION_SELECTORS=new UnicodeBlock        LINEAR_B_SYLLABARY=new UnicodeBlock        LINEAR_B_IDEOGRAMS=new UnicodeBlock        AEGEAN_NUMBERS=new UnicodeBlock        OLD_ITALIC=new UnicodeBlock        GOTHIC=new UnicodeBlock        UGARITIC=new UnicodeBlock        DESERET=new UnicodeBlock        SHAVIAN=new UnicodeBlock        OSMANYA=new UnicodeBlock        CYPRIOT_SYLLABARY=new UnicodeBlock        BYZANTINE_MUSICAL_SYMBOLS=new UnicodeBlock        MUSICAL_SYMBOLS=new UnicodeBlock        TAI_XUAN_JING_SYMBOLS=new UnicodeBlock        MATHEMATICAL_ALPHANUMERIC_SYMBOLS=new UnicodeBlock        CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B=new UnicodeBlock        CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT=new UnicodeBlock        TAGS=new UnicodeBlock        VARIATION_SELECTORS_SUPPLEMENT=new UnicodeBlock        SUPPLEMENTARY_PRIVATE_USE_AREA_A=new UnicodeBlock        SUPPLEMENTARY_PRIVATE_USE_AREA_B=new UnicodeBlock        HIGH_SURROGATES=new UnicodeBlock        HIGH_PRIVATE_USE_SURROGATES=new UnicodeBlock        LOW_SURROGATES=new UnicodeBlock        ARABIC_SUPPLEMENT=new UnicodeBlock        NKO=new UnicodeBlock        SAMARITAN=new UnicodeBlock        MANDAIC=new UnicodeBlock        ETHIOPIC_SUPPLEMENT=new UnicodeBlock        UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED=new UnicodeBlock        NEW_TAI_LUE=new UnicodeBlock        BUGINESE=new UnicodeBlock        TAI_THAM=new UnicodeBlock        BALINESE=new UnicodeBlock        SUNDANESE=new UnicodeBlock        BATAK=new UnicodeBlock        LEPCHA=new UnicodeBlock        OL_CHIKI=new UnicodeBlock        VEDIC_EXTENSIONS=new UnicodeBlock        PHONETIC_EXTENSIONS_SUPPLEMENT=new UnicodeBlock        COMBINING_DIACRITICAL_MARKS_SUPPLEMENT=new UnicodeBlock        GLAGOLITIC=new UnicodeBlock        LATIN_EXTENDED_C=new UnicodeBlock        COPTIC=new UnicodeBlock        GEORGIAN_SUPPLEMENT=new UnicodeBlock        TIFINAGH=new UnicodeBlock        ETHIOPIC_EXTENDED=new UnicodeBlock        CYRILLIC_EXTENDED_A=new UnicodeBlock        SUPPLEMENTAL_PUNCTUATION=new UnicodeBlock        CJK_STROKES=new UnicodeBlock        LISU=new UnicodeBlock        VAI=new UnicodeBlock        CYRILLIC_EXTENDED_B=new UnicodeBlock        BAMUM=new UnicodeBlock        MODIFIER_TONE_LETTERS=new UnicodeBlock        LATIN_EXTENDED_D=new UnicodeBlock        SYLOTI_NAGRI=new UnicodeBlock        COMMON_INDIC_NUMBER_FORMS=new UnicodeBlock        PHAGS_PA=new UnicodeBlock        SAURASHTRA=new UnicodeBlock        DEVANAGARI_EXTENDED=new UnicodeBlock        KAYAH_LI=new UnicodeBlock        REJANG=new UnicodeBlock        HANGUL_JAMO_EXTENDED_A=new UnicodeBlock        JAVANESE=new UnicodeBlock        CHAM=new UnicodeBlock        MYANMAR_EXTENDED_A=new UnicodeBlock        TAI_VIET=new UnicodeBlock        ETHIOPIC_EXTENDED_A=new UnicodeBlock        MEETEI_MAYEK=new UnicodeBlock        HANGUL_JAMO_EXTENDED_B=new UnicodeBlock        VERTICAL_FORMS=new UnicodeBlock        ANCIENT_GREEK_NUMBERS=new UnicodeBlock        ANCIENT_SYMBOLS=new UnicodeBlock        PHAISTOS_DISC=new UnicodeBlock        LYCIAN=new UnicodeBlock        CARIAN=new UnicodeBlock        OLD_PERSIAN=new UnicodeBlock        IMPERIAL_ARAMAIC=new UnicodeBlock        PHOENICIAN=new UnicodeBlock        LYDIAN=new UnicodeBlock        KHAROSHTHI=new UnicodeBlock        OLD_SOUTH_ARABIAN=new UnicodeBlock        AVESTAN=new UnicodeBlock        INSCRIPTIONAL_PARTHIAN=new UnicodeBlock        INSCRIPTIONAL_PAHLAVI=new UnicodeBlock        OLD_TURKIC=new UnicodeBlock        RUMI_NUMERAL_SYMBOLS=new UnicodeBlock        BRAHMI=new UnicodeBlock        KAITHI=new UnicodeBlock        CUNEIFORM=new UnicodeBlock        CUNEIFORM_NUMBERS_AND_PUNCTUATION=new UnicodeBlock        EGYPTIAN_HIEROGLYPHS=new UnicodeBlock        BAMUM_SUPPLEMENT=new UnicodeBlock        KANA_SUPPLEMENT=new UnicodeBlock        ANCIENT_GREEK_MUSICAL_NOTATION=new UnicodeBlock        COUNTING_ROD_NUMERALS=new UnicodeBlock        MAHJONG_TILES=new UnicodeBlock        DOMINO_TILES=new UnicodeBlock        PLAYING_CARDS=new UnicodeBlock        ENCLOSED_ALPHANUMERIC_SUPPLEMENT=new UnicodeBlock        ENCLOSED_IDEOGRAPHIC_SUPPLEMENT=new UnicodeBlock        MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS=new UnicodeBlock        EMOTICONS=new UnicodeBlock        TRANSPORT_AND_MAP_SYMBOLS=new UnicodeBlock        ALCHEMICAL_SYMBOLS=new UnicodeBlock        CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C=new UnicodeBlock        CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D=new UnicodeBlock        ARABIC_EXTENDED_A=new UnicodeBlock        SUNDANESE_SUPPLEMENT=new UnicodeBlock        MEETEI_MAYEK_EXTENSIONS=new UnicodeBlock        MEROITIC_HIEROGLYPHS=new UnicodeBlock        MEROITIC_CURSIVE=new UnicodeBlock        SORA_SOMPENG=new UnicodeBlock        CHAKMA=new UnicodeBlock        SHARADA=new UnicodeBlock        TAKRI=new UnicodeBlock        MIAO=new UnicodeBlock        ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS=new UnicodeBlock        blockStarts=[]        blocks=
      Instance Initializer: 
      Constructors: 
        constructor  UnicodeBlock(idName)  throws: 
        constructor  UnicodeBlock(idName,isMap)  throws: 
          cond-branch cond:isMap
          true branch :
            map.put(idName,this)
          false branch :

        constructor  UnicodeBlock(idName,alias)  throws: 
          map.put(alias,this)
        constructor  UnicodeBlock(idName,String,aliases)  throws: 
          String
          alias
          aliases
          map.put(alias,this)
      Methods: 
        func  of(c)  throws: 
          return of((int)c)
        func  of(codePoint)  throws: 
          cond-branch cond:isValidCodePoint(codePoint)
          true branch :
            new IllegalArgumentException
          false branch :

          var:top,bottom,current
          bottom Assign 0
          top Assign blockStarts.length
          current Assign top Div 2
          while top Sub bottom GT 1            cond-branch cond:codePoint GE 
            true branch :
              bottom Assign current
            false branch :
              top Assign current

            current Assign (top Add bottom) Div 2

          return 
        func  forName(blockName)  throws: 
          var:block=map.get(blockName.toUpperCase(Locale.US))
          cond-branch cond:block EQ null
          true branch :
            new IllegalArgumentException
          false branch :

          return block
      LocalClasses: 
      LocalInterfaces: 
    class[JavaEnum]  UnicodeScript
      Fields: 
        COMMON        scriptStarts=        scripts=        aliases
      Instance Initializer: 
        InstInit- 0
      Constructors: 
      Methods: 
        func  of(codePoint)  throws: 
          cond-branch cond:isValidCodePoint(codePoint)
          true branch :
            new IllegalArgumentException
          false branch :

          var:type=getType(codePoint)
          cond-branch cond:type EQ UNASSIGNED
          true branch :
            return UNKNOWN
          false branch :

          var:index=Arrays.binarySearch(scriptStarts,codePoint)
          cond-branch cond:index LT 0
          true branch :
            index Assign Sub
  index Sub 2
          false branch :

          return 
        func  forName(scriptName)  throws: 
          scriptName Assign scriptName.toUpperCase(Locale.ENGLISH)
          var:sc=aliases.get(scriptName)
          cond-branch cond:sc NE null
          true branch :
            return sc
          false branch :

          return valueOf(scriptName)
      LocalClasses: 
      LocalInterfaces: 
    class  CharacterCache
      Fields: 
        cache=[]
      Instance Initializer: 
        InstInit- 0
      Constructors: 
        constructor  CharacterCache()  throws: 
      Methods: 
      LocalClasses: 
      LocalInterfaces: 
  LocalInterfaces: 

