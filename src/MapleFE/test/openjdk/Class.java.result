Matched 5 tokens.
Matched 14 tokens.
Matched 21 tokens.
Matched 28 tokens.
Matched 37 tokens.
Matched 46 tokens.
Matched 55 tokens.
Matched 64 tokens.
Matched 73 tokens.
Matched 82 tokens.
Matched 91 tokens.
Matched 100 tokens.
Matched 109 tokens.
Matched 118 tokens.
Matched 127 tokens.
Matched 136 tokens.
Matched 143 tokens.
Matched 150 tokens.
Matched 157 tokens.
Matched 164 tokens.
Matched 171 tokens.
Matched 178 tokens.
Matched 185 tokens.
Matched 192 tokens.
Matched 199 tokens.
Matched 206 tokens.
Matched 213 tokens.
Matched 220 tokens.
Matched 227 tokens.
Matched 234 tokens.
Matched 241 tokens.
Matched 248 tokens.
Matched 4872 tokens.
============= Module ===========
== Sub Tree ==
package java.lang
== Sub Tree ==
import dalvik.annotation.optimization.FastNative
== Sub Tree ==
import java.io.InputStream
== Sub Tree ==
import java.io.Serializable
== Sub Tree ==
import java.lang.annotation.Annotation
== Sub Tree ==
import java.lang.annotation.Inherited
== Sub Tree ==
import java.lang.reflect.AnnotatedElement
== Sub Tree ==
import java.lang.reflect.Array
== Sub Tree ==
import java.lang.reflect.Constructor
== Sub Tree ==
import java.lang.reflect.Field
== Sub Tree ==
import java.lang.reflect.GenericDeclaration
== Sub Tree ==
import java.lang.reflect.Member
== Sub Tree ==
import java.lang.reflect.Method
== Sub Tree ==
import java.lang.reflect.Modifier
== Sub Tree ==
import java.lang.reflect.Type
== Sub Tree ==
import java.lang.reflect.TypeVariable
== Sub Tree ==
import java.util.ArrayList
== Sub Tree ==
import java.util.Arrays
== Sub Tree ==
import java.util.Collection
== Sub Tree ==
import java.util.Collections
== Sub Tree ==
import java.util.HashMap
== Sub Tree ==
import java.util.List
== Sub Tree ==
import java.util.Objects
== Sub Tree ==
import libcore.reflect.GenericSignatureParser
== Sub Tree ==
import libcore.reflect.InternalNames
== Sub Tree ==
import libcore.reflect.Types
== Sub Tree ==
import libcore.util.BasicLruCache
== Sub Tree ==
import libcore.util.CollectionUtils
== Sub Tree ==
import libcore.util.EmptyArray
== Sub Tree ==
import dalvik.system.ClassExt
== Sub Tree ==
import dalvik.system.VMStack
== Sub Tree ==
import sun.reflect.CallerSensitive
== Sub Tree ==
class  Class
  Fields: 
    ANNOTATION=8192    ENUM=16384    SYNTHETIC=4096    FINALIZABLE=-2147483648    classLoader    componentType    dexCache    extData    ifTable    name    superClass    vtable    iFields    methods    sFields    accessFlags    classFlags    classSize    clinitThreadId    dexClassDefIndex    dexTypeIndex    numReferenceInstanceFields    numReferenceStaticFields    objectSize    objectSizeAllocFastPath    primitiveType    referenceInstanceOffsets    status    copiedMethodsOffset    virtualMethodsOffset    serialVersionUID=-641755821
  Instance Initializer: 
  Constructors: 
    constructor  Class()  throws: 
  Methods: 
    func  toString()  throws: 
      return () Add getName()
    func  toGenericString()  throws: 
      cond-branch cond:isPrimitive()
      true branch :
        return toString()
      false branch :
        var:sb=new StringBuilder


    func  forName(className)  throws:     ClassNotFoundException
      return forName(className,true,VMStack.getCallingClassLoader())
    func  forName(name,initialize,loader)  throws:     ClassNotFoundException
      cond-branch cond:loader EQ null
      true branch :
        loader Assign BootClassLoader.getInstance()
      false branch :

      var:result

      return result
    func  classForName(className,shouldInitialize,classLoader)  throws:     ClassNotFoundException
    func  newInstance()  throws:     InstantiationException    IllegalAccessException
    func  isInstance(obj)  throws: 
      cond-branch cond:obj EQ null
      true branch :
        return false
      false branch :

      return isAssignableFrom(obj.getClass())
    func  isAssignableFrom(cls)  throws: 
      cond-branch cond:this EQ cls
      true branch :
        return true
      false branch :
        cond-branch cond:this EQ Object
        true branch :
          return cls.isPrimitive()
        false branch :
          cond-branch cond:isArray()
          true branch :
            return cls.isArray() Land componentType.isAssignableFrom(cls.componentType)
          false branch :
            cond-branch cond:isInterface()
            true branch :
              var:iftable=cls.ifTable

            false branch :
              cond-branch cond:cls.isInterface()
              true branch :
                for ( )
                  cond-branch cond:cls EQ this
                  true branch :
                    return true
                  false branch :


              false branch :

              return false




    func  isInterface()  throws: 
      return (accessFlags Band Modifier.INTERFACE) NE 0
    func  isArray()  throws: 
      return getComponentType() NE null
    func  isPrimitive()  throws: 
      return (primitiveType Band 65535) NE 0
    func  isFinalizable()  throws: 
      return (getModifiers() Band FINALIZABLE) NE 0
    func  isAnnotation()  throws: 
      return (getModifiers() Band ANNOTATION) NE 0
    func  isSynthetic()  throws: 
      return (getModifiers() Band SYNTHETIC) NE 0
    func  getName()  throws: 
      var:name=this.name
      cond-branch cond:name EQ null
      true branch :
        this.name Assign name Assign getNameNative()
      false branch :

      return name
    func  getNameNative()  throws: 
    func  getClassLoader()  throws: 
      cond-branch cond:isPrimitive()
      true branch :
        return null
      false branch :

      return 
    func  getTypeParameters()  throws: 
      var:annotationSignature=getSignatureAttribute()
      cond-branch cond:annotationSignature EQ null
      true branch :
        return EmptyArray.TYPE_VARIABLE
      false branch :

      var:parser=new GenericSignatureParser
      parser.parseForClass(this,annotationSignature)
      return parser.formalTypeParameters
    func  getSuperclass()  throws: 
      cond-branch cond:isInterface()
      true branch :
        return null
      false branch :
        return superClass

    func  getGenericSuperclass()  throws: 
      var:genericSuperclass=getSuperclass()
      cond-branch cond:genericSuperclass EQ null
      true branch :
        return null
      false branch :

      var:annotationSignature=getSignatureAttribute()
      cond-branch cond:annotationSignature NE null
      true branch :
        var:parser=new GenericSignatureParser

      false branch :

      return Types.getType(genericSuperclass)
    func  getPackage()  throws: 
      var:loader=getClassLoader()
      cond-branch cond:loader NE null
      true branch :
        var:packageName=getPackageName$()
        return 
      false branch :

      return null
    func  getPackageName$()  throws: 
      var:name=getName()
      var:last=name.lastIndexOf(.)
      return 
    func  getInterfaces()  throws: 
      cond-branch cond:isArray()
      true branch :
        return 
      false branch :

      var:ifaces=getInterfacesInternal()
      cond-branch cond:ifaces EQ null
      true branch :
        return EmptyArray.CLASS
      false branch :

      return ifaces
    func  getInterfacesInternal()  throws: 
    func  getGenericInterfaces()  throws: 
      var:result
      result Assign Caches.genericInterfaces.get(this)
      cond-branch cond:result EQ null
      true branch :
        var:annotationSignature=getSignatureAttribute()

      false branch :


      return 
    func  getComponentType()  throws: 
      return componentType
    func  getModifiers()  throws: 
      cond-branch cond:isArray()
      true branch :
        var:componentModifiers=getComponentType().getModifiers()

      false branch :

      var:JAVA_FLAGS_MASK=65535
      var:modifiers=this.getInnerClassFlags(accessFlags Band JAVA_FLAGS_MASK)
      return modifiers Band JAVA_FLAGS_MASK
    func  getSigners()  throws: 
      return null
    func  getEnclosingMethodNative()  throws: 
    func  getEnclosingMethod()  throws: 
      cond-branch cond:classNameImpliesTopLevel()
      true branch :
        return null
      false branch :

      return getEnclosingMethodNative()
    func  getEnclosingConstructor()  throws: 
      cond-branch cond:classNameImpliesTopLevel()
      true branch :
        return null
      false branch :

      return getEnclosingConstructorNative()
    func  getEnclosingConstructorNative()  throws: 
    func  classNameImpliesTopLevel()  throws: 
      return getName().contains("$")
    func  getDeclaringClass()  throws: 
    func  getEnclosingClass()  throws: 
    func  getSimpleName()  throws: 
      cond-branch cond:isArray()
      true branch :
        return getComponentType().getSimpleName() Add "[]"
      false branch :

      cond-branch cond:isAnonymousClass()
      true branch :
        return ""
      false branch :

      cond-branch cond:isMemberClass() Lor isLocalClass()
      true branch :
        return getInnerClassName()
      false branch :

      var:simpleName=getName()
      var:dot=simpleName.lastIndexOf(".")
      cond-branch cond:dot GT 0
      true branch :
        return simpleName.substring(simpleName.lastIndexOf(".") Add 1)
      false branch :

      return simpleName
    func  getTypeName()  throws: 
      cond-branch cond:isArray()
      true branch :
        var:cl=this



      false branch :

      return getName()
    func  getCanonicalName()  throws: 
      cond-branch cond:isArray()
      true branch :
        var:canonicalName=getComponentType().getCanonicalName()
        cond-branch cond:canonicalName NE null
        true branch :
          return canonicalName Add "[]"
        false branch :
          return null

      false branch :

      cond-branch cond:isLocalOrAnonymousClass()
      true branch :
        return null
      false branch :

      var:enclosingClass=getEnclosingClass()
      cond-branch cond:enclosingClass EQ null
      true branch :
        return getName()
      false branch :
        var:enclosingName=enclosingClass.getCanonicalName()


    func  isAnonymousClass()  throws: 
    func  isLocalClass()  throws: 
      return (getEnclosingMethod() NE null Lor getEnclosingConstructor() NE null) Land isAnonymousClass()
    func  isMemberClass()  throws: 
      return getDeclaringClass() NE null
    func  isLocalOrAnonymousClass()  throws: 
      return isLocalClass() Lor isAnonymousClass()
    func  getClasses()  throws: 
      var:result=new ArrayList
      for ( )
        Class
        member
        c.getDeclaredClasses()
        cond-branch cond:Modifier.isPublic(member.getModifiers())
        true branch :
          result.add(member)
        false branch :



      return result.toArray(Class,result.size())
    func  getFields()  throws:     SecurityException
      var:fields=new ArrayList
      getPublicFieldsRecursive(fields)
      return fields.toArray(Field,fields.size())
    func  getPublicFieldsRecursive(result)  throws: 
      for ( )
        Collections.addAll(result,c.getPublicDeclaredFields())

      var:iftable=ifTable
      cond-branch cond:iftable NE null
      true branch :
        for ( )
          Collections.addAll(result,(Class).getPublicDeclaredFields())

      false branch :

    func  getMethods()  throws:     SecurityException
      var:methods=new ArrayList
      getPublicMethodsInternal(methods)
      CollectionUtils.removeDuplicates(methods,Method.ORDER_BY_SIGNATURE)
      return methods.toArray(Method,methods.size())
    func  getPublicMethodsInternal(result)  throws: 
      Collections.addAll(result,getDeclaredMethodsUnchecked(true))
      cond-branch cond:isInterface()
      true branch :
        for ( )
          Collections.addAll(result,c.getDeclaredMethodsUnchecked(true))

      false branch :

      var:iftable=ifTable
      cond-branch cond:iftable NE null
      true branch :
        for ( )
          var:ifc=(Class)
          Collections.addAll(result,ifc.getDeclaredMethodsUnchecked(true))

      false branch :

    func  getConstructors()  throws:     SecurityException
      return getDeclaredConstructorsInternal(true)
    func  getField(name)  throws:     NoSuchFieldException
      cond-branch cond:name EQ null
      true branch :
        new NullPointerException
      false branch :

      var:result=getPublicFieldRecursive(name)
      cond-branch cond:result EQ null
      true branch :
        new NoSuchFieldException
      false branch :

      return result
    func  getPublicFieldRecursive(name)  throws: 
    func  getMethod(name,Class,parameterTypes)  throws:     NoSuchMethodException    SecurityException
      return getMethod(name,parameterTypes,true)
    func  getConstructor(Class,parameterTypes)  throws:     NoSuchMethodException    SecurityException
      return getConstructor0(parameterTypes,Member.PUBLIC)
    func  getDeclaredClasses()  throws: 
    func  getDeclaredFields()  throws: 
    func  getDeclaredFieldsUnchecked(publicOnly)  throws: 
    func  getDeclaredMethods()  throws:     SecurityException
      var:result=getDeclaredMethodsUnchecked(false)
      Method
      m
      result
      m.getReturnType()
      m.getParameterTypes()

      return result
    func  getDeclaredMethodsUnchecked(publicOnly)  throws: 
    func  getDeclaredConstructors()  throws:     SecurityException
      return getDeclaredConstructorsInternal(false)
    func  getDeclaredConstructorsInternal(publicOnly)  throws: 
    func  getDeclaredField(name)  throws:     NoSuchFieldException
    func  getPublicDeclaredFields()  throws: 
    func  getDeclaredMethod(name,Class,parameterTypes)  throws:     NoSuchMethodException    SecurityException
      return getMethod(name,parameterTypes,false)
    func  getMethod(name,parameterTypes,recursivePublicMethods)  throws:     NoSuchMethodException
      cond-branch cond:name EQ null
      true branch :
        new NullPointerException
      false branch :

      cond-branch cond:parameterTypes EQ null
      true branch :
        parameterTypes Assign EmptyArray.CLASS
      false branch :


      var:result=
      cond-branch cond:result EQ null Lor (recursivePublicMethods Land Modifier.isPublic(result.getAccessFlags()))
      true branch :
        new NoSuchMethodException
      false branch :

      return result
    func  getPublicMethodRecursive(name,parameterTypes)  throws: 
      for ( )
        var:result=c.getDeclaredMethodInternal(name,parameterTypes)
        cond-branch cond:result NE null Land Modifier.isPublic(result.getAccessFlags())
        true branch :
          return result
        false branch :


      return findInterfaceMethod(name,parameterTypes)
    func  getInstanceMethod(name,parameterTypes)  throws:     NoSuchMethodException    IllegalAccessException
      for ( )
        var:result=c.getDeclaredMethodInternal(name,parameterTypes)
        cond-branch cond:result NE null Land Modifier.isStatic(result.getModifiers())
        true branch :
          return result
        false branch :


      return findInterfaceMethod(name,parameterTypes)
    func  findInterfaceMethod(name,parameterTypes)  throws: 
      var:iftable=ifTable
      cond-branch cond:iftable NE null
      true branch :
        for ( )
          var:ifc=(Class)


      false branch :

      return null
    func  getDeclaredConstructor(Class,parameterTypes)  throws:     NoSuchMethodException    SecurityException
      return getConstructor0(parameterTypes,Member.DECLARED)
    func  getResourceAsStream(name)  throws: 
      name Assign resolveName(name)
      var:cl=getClassLoader()
      cond-branch cond:cl EQ null
      true branch :
        return ClassLoader.getSystemResourceAsStream(name)
      false branch :

      return cl.getResourceAsStream(name)
    func  getResource(name)  throws: 
      name Assign resolveName(name)
      var:cl=getClassLoader()
      cond-branch cond:cl EQ null
      true branch :
        return ClassLoader.getSystemResource(name)
      false branch :

      return cl.getResource(name)
    func  getProtectionDomain()  throws: 
      return null
    func  resolveName(name)  throws: 
      cond-branch cond:name EQ null
      true branch :
        return name
      false branch :

      cond-branch cond:name.startsWith("/")
      true branch :
        var:c=this

      false branch :
        name Assign name.substring(1)

      return name
    func  getConstructor0(parameterTypes,which)  throws:     NoSuchMethodException
      cond-branch cond:parameterTypes EQ null
      true branch :
        parameterTypes Assign EmptyArray.CLASS
      false branch :

      Class
      c
      parameterTypes
      cond-branch cond:c EQ null
      true branch :
        new NoSuchMethodException
      false branch :


      var:result=getDeclaredConstructorInternal(parameterTypes)
      cond-branch cond:result EQ null Lor which EQ Member.PUBLIC Land Modifier.isPublic(result.getAccessFlags())
      true branch :
        new NoSuchMethodException
      false branch :

      return result
    func  getDeclaredConstructorInternal(args)  throws: 
    func  desiredAssertionStatus()  throws: 
      return false
    func  getInnerClassName()  throws: 
    func  getInnerClassFlags(defaultValue)  throws: 
    func  isEnum()  throws: 
      return (this.getModifiers() Band ENUM) NE 0 Land this.getSuperclass() EQ java.lang.Enum
    func  getEnumConstants()  throws: 
      var:values=getEnumConstantsShared()
      return 
    func  getEnumConstantsShared()  throws: 
      cond-branch cond:isEnum()
      true branch :
        return null
      false branch :

      return (T[])Enum.getSharedConstants((Class)this)
    func  cast(obj)  throws: 
      cond-branch cond:obj NE null Land isInstance(obj)
      true branch :
        new ClassCastException
      false branch :

      return (T)obj
    func  cannotCastMsg(obj)  throws: 
      return "Cannot cast " Add obj.getClass().getName() Add " to " Add getName()
    func  asSubclass(clazz)  throws: 
      cond-branch cond:clazz.isAssignableFrom(this)
      true branch :
        return ()this
      false branch :
        new ClassCastException

    func  getAnnotation(annotationClass)  throws: 
      Objects.requireNonNull(annotationClass)
      var:annotation=getDeclaredAnnotation(annotationClass)
      cond-branch cond:annotation NE null
      true branch :
        return annotation
      false branch :

      cond-branch cond:annotationClass.isDeclaredAnnotationPresent(Inherited)
      true branch :
        for ( )
          annotation Assign sup.getDeclaredAnnotation(annotationClass)
          cond-branch cond:annotation NE null
          true branch :
            return annotation
          false branch :


      false branch :

      return null
    func  isAnnotationPresent(annotationClass)  throws: 
      cond-branch cond:annotationClass EQ null
      true branch :
        new NullPointerException
      false branch :

      cond-branch cond:isDeclaredAnnotationPresent(annotationClass)
      true branch :
        return true
      false branch :

      cond-branch cond:annotationClass.isDeclaredAnnotationPresent(Inherited)
      true branch :
        for ( )
          cond-branch cond:sup.isDeclaredAnnotationPresent(annotationClass)
          true branch :
            return true
          false branch :


      false branch :

      return false
    func  getAnnotationsByType(annotationClass)  throws: 
      var:annotations=
      cond-branch cond:annotations.length NE 0
      true branch :
        return annotations
      false branch :

      cond-branch cond:annotationClass.isDeclaredAnnotationPresent(Inherited)
      true branch :
        var:superClass=getSuperclass()
        cond-branch cond:superClass NE null
        true branch :
          return superClass.getAnnotationsByType(annotationClass)
        false branch :

      false branch :

      return (A[])Array.newInstance(annotationClass,0)
    func  getAnnotations()  throws: 
      var:map=new HashMap
      Annotation
      declaredAnnotation
      getDeclaredAnnotations()
      map.put(declaredAnnotation.annotationType(),declaredAnnotation)

      for ( )
        Annotation
        declaredAnnotation
        sup.getDeclaredAnnotations()
        var:clazz=declaredAnnotation.annotationType()
        cond-branch cond:map.containsKey(clazz) Land clazz.isDeclaredAnnotationPresent(Inherited)
        true branch :
          map.put(clazz,declaredAnnotation)
        false branch :



      var:coll=map.values()
      return coll.toArray(Annotation,coll.size())
    func  getDeclaredAnnotation(annotationClass)  throws: 
    func  getDeclaredAnnotations()  throws: 
    func  isDeclaredAnnotationPresent(annotationClass)  throws: 
    func  getSignatureAttribute()  throws: 
      var:annotation=getSignatureAnnotation()
      cond-branch cond:annotation EQ null
      true branch :
        return null
      false branch :

      var:result=new StringBuilder

      return result.toString()
    func  getSignatureAnnotation()  throws: 
    func  isProxy()  throws: 
      return (accessFlags Band 262144) NE 0
    func  getAccessFlags()  throws: 
      return accessFlags
    func  getDeclaredMethodInternal(name,args)  throws: 
  LocalClasses: 
    class  Caches
      Fields: 
        genericInterfaces=new BasicLruCache
      Instance Initializer: 
      Constructors: 
      Methods: 
      LocalClasses: 
      LocalInterfaces: 
  LocalInterfaces: 

Identifier:Method has no decl.
Identifier:m has no decl.
Identifier:Class has no decl.
Identifier:c has no decl.
Identifier:Annotation has no decl.
Identifier:declaredAnnotation has no decl.
