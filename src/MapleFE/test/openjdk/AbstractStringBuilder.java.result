Matched 5 tokens.
Matched 12 tokens.
Matched 19 tokens.
Matched 3131 tokens.
============= Module ===========
== Sub Tree ==
package java.lang
== Sub Tree ==
import sun.misc.FloatingDecimal
== Sub Tree ==
import java.util.Arrays
== Sub Tree ==
class  AbstractStringBuilder
  Fields: 
    value    count    MAX_ARRAY_SIZE=Integer.MAX_VALUE Sub 8
  Instance Initializer: 
  Constructors: 
    constructor  AbstractStringBuilder()  throws: 
    constructor  AbstractStringBuilder()  throws: 
      value Assign 
  Methods: 
    func  length()  throws: 
      return count
    func  capacity()  throws: 
      return value.length
    func  ensureCapacity()  throws: 
      cond-branch cond:minimumCapacity GT 0
      true branch :
        ensureCapacityInternal(minimumCapacity)      false branch :

    func  ensureCapacityInternal()  throws: 
      cond-branch cond:minimumCapacity Sub value.length GT 0
      true branch :
        value Assign Arrays.copyOf(value,newCapacity(minimumCapacity))
      false branch :

    func  newCapacity()  throws: 
      var:newCapacity=(value.length Shl 1) Add 2
      cond-branch cond:newCapacity Sub minCapacity LT 0
      true branch :
        newCapacity Assign minCapacity
      false branch :

      return 
    func  hugeCapacity()  throws: 
      cond-branch cond:Integer.MAX_VALUE Sub minCapacity LT 0
      true branch :
        new OutOfMemoryError<OutOfMemoryError>
      false branch :

      return 
    func  trimToSize()  throws: 
      cond-branch cond:count LT value.length
      true branch :
        value Assign Arrays.copyOf(value,count)
      false branch :

    func  setLength()  throws: 
      cond-branch cond:newLength LT 0
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      ensureCapacityInternal(newLength)
      cond-branch cond:count LT newLength
      true branch :
        Arrays.fill(value,count,newLength,c)
      false branch :

      count Assign newLength
    func  charAt()  throws: 
      cond-branch cond:(index LT 0)(index GE count)
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      return 
    func  codePointAt()  throws: 
      cond-branch cond:(index LT 0)(index GE count)
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>
      false branch :

      return Character.codePointAtImpl(value,index,count)
    func  codePointBefore()  throws: 
      var:i=index Sub 1
      cond-branch cond:(i LT 0)(i GE count)
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>
      false branch :

      return Character.codePointBeforeImpl(value,index,0)
    func  codePointCount()  throws: 
      cond-branch cond:
      true branch :
        new IndexOutOfBoundsException<IndexOutOfBoundsException>
      false branch :

      return Character.codePointCountImpl(value,beginIndex,endIndex Sub beginIndex)
    func  offsetByCodePoints()  throws: 
      cond-branch cond:
      true branch :
        new IndexOutOfBoundsException<IndexOutOfBoundsException>
      false branch :

      return Character.offsetByCodePointsImpl(value,0,count,index,codePointOffset)
    func  getChars()  throws: 
      cond-branch cond:srcBegin LT 0
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      cond-branch cond:(srcEnd LT 0)(srcEnd GT count)
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      cond-branch cond:srcBegin GT srcEnd
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      System.arraycopy(value,srcBegin,dst,dstBegin,srcEnd Sub srcBegin)
    func  setCharAt()  throws: 
      cond-branch cond:(index LT 0)(index GE count)
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

       Assign ch
    func  append()  throws: 
      return append(String.valueOf(obj))
    func  append()  throws: 
      cond-branch cond:
      true branch :
        return appendNull()      false branch :

      var:len=str.length()
      ensureCapacityInternal(count Add len)
      str.getChars(0,len,value,count)
      count AddAssign len
      return this
    func  append()  throws: 
      cond-branch cond:
      true branch :
        return appendNull()      false branch :

      var:len=sb.length()
      ensureCapacityInternal(count Add len)
      sb.getChars(0,len,value,count)
      count AddAssign len
      return this
    func  append()  throws: 
      cond-branch cond:
      true branch :
        return appendNull()      false branch :

      var:len=asb.length()
      ensureCapacityInternal(count Add len)
      asb.getChars(0,len,value,count)
      count AddAssign len
      return this
    func  append()  throws: 
      cond-branch cond:
      true branch :
        return appendNull()      false branch :

      cond-branch cond:
      true branch :
        return       false branch :

      cond-branch cond:
      true branch :
        return       false branch :

      return 
    func  appendNull()  throws: 
      var:c=count
      ensureCapacityInternal(c Add 4)
      var:value=this.value
       Assign c
       Assign c
       Assign c
       Assign c
      count Assign c
      return this
    func  append()  throws: 
      cond-branch cond:
      true branch :
        s Assign "null"      false branch :

      cond-branch cond:
      true branch :
        new IndexOutOfBoundsException<IndexOutOfBoundsException>      false branch :

      var:len=end Sub start
      ensureCapacityInternal(count Add len)
      for ( )
         Assign s.charAt(i)
      count AddAssign len
      return this
    func  append()  throws: 
      var:len=str.length
      ensureCapacityInternal(count Add len)
      System.arraycopy(str,0,value,count,len)
      count AddAssign len
      return this
    func  append()  throws: 
      cond-branch cond:len GT 0
      true branch :
        ensureCapacityInternal(count Add len)      false branch :

      System.arraycopy(str,offset,value,count,len)
      count AddAssign len
      return this
    func  append()  throws: 
      cond-branch cond:b
      true branch :
        ensureCapacityInternal(count Add 4)

      false branch :
        ensureCapacityInternal(count Add 5)


      return this
    func  append()  throws: 
      ensureCapacityInternal(count Add 1)
       Assign c
      return this
    func  append()  throws: 
      cond-branch cond:
      true branch :
        append("-2147483648")
        return this
      false branch :

      var:appendedLength=
      var:spaceNeeded=count Add appendedLength
      ensureCapacityInternal(spaceNeeded)
      Integer.getChars(i,spaceNeeded,value)
      count Assign spaceNeeded
      return this
    func  append()  throws: 
      cond-branch cond:
      true branch :
        append("-9223372036854775808")
        return this
      false branch :

      var:appendedLength=
      var:spaceNeeded=count Add appendedLength
      ensureCapacityInternal(spaceNeeded)
      Long.getChars(l,spaceNeeded,value)
      count Assign spaceNeeded
      return this
    func  append()  throws: 
      FloatingDecimal.appendTo(f,this)
      return this
    func  append()  throws: 
      FloatingDecimal.appendTo(d,this)
      return this
    func  delete()  throws: 
      cond-branch cond:start LT 0
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      cond-branch cond:end GT count
      true branch :
        end Assign count      false branch :

      cond-branch cond:start GT end
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      var:len=end Sub start
      cond-branch cond:len GT 0
      true branch :
        System.arraycopy(value,start Add len,value,start,count Sub end)
        count SubAssign len
      false branch :

      return this
    func  appendCodePoint()  throws: 
      var:count=this.count
      cond-branch cond:Character.isBmpCodePoint(codePoint)
      true branch :
        ensureCapacityInternal(count Add 1)

      false branch :
        cond-branch cond:Character.isValidCodePoint(codePoint)
        true branch :
          ensureCapacityInternal(count Add 2)

        false branch :
          new IllegalArgumentException<IllegalArgumentException>

      return this
    func  deleteCharAt()  throws: 
      cond-branch cond:(index LT 0)(index GE count)
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      System.arraycopy(value,index Add 1,value,index,count Sub index Sub 1)
              countDec

      return this
    func  replace()  throws: 
      cond-branch cond:start LT 0
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      cond-branch cond:start GT count
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      cond-branch cond:start GT end
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      cond-branch cond:end GT count
      true branch :
        end Assign count      false branch :

      var:len=str.length()
      var:newCount=count Add len Sub (end Sub start)
      ensureCapacityInternal(newCount)
      System.arraycopy(value,end,value,start Add len,count Sub end)
      str.getChars(value,start)
      count Assign newCount
      return this
    func  substring()  throws: 
      return substring(start,count)
    func  subSequence()  throws: 
      return substring(start,end)
    func  substring()  throws: 
      cond-branch cond:start LT 0
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      cond-branch cond:end GT count
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      cond-branch cond:start GT end
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      return new String<String>
    func  insert()  throws: 
      cond-branch cond:(index LT 0)(index GT length())
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      cond-branch cond:
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      ensureCapacityInternal(count Add len)
      System.arraycopy(value,index,value,index Add len,count Sub index)
      System.arraycopy(str,offset,value,index,len)
      count AddAssign len
      return this
    func  insert()  throws: 
      return insert(offset,String.valueOf(obj))
    func  insert()  throws: 
      cond-branch cond:(offset LT 0)(offset GT length())
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      cond-branch cond:
      true branch :
        str Assign "null"      false branch :

      var:len=str.length()
      ensureCapacityInternal(count Add len)
      System.arraycopy(value,offset,value,offset Add len,count Sub offset)
      str.getChars(value,offset)
      count AddAssign len
      return this
    func  insert()  throws: 
      cond-branch cond:(offset LT 0)(offset GT length())
      true branch :
        new StringIndexOutOfBoundsException<StringIndexOutOfBoundsException>      false branch :

      var:len=str.length
      ensureCapacityInternal(count Add len)
      System.arraycopy(value,offset,value,offset Add len,count Sub offset)
      System.arraycopy(str,0,value,offset,len)
      count AddAssign len
      return this
    func  insert()  throws: 
      cond-branch cond:
      true branch :
        s Assign "null"      false branch :

      cond-branch cond:
      true branch :
        return       false branch :

      return 
    func  insert()  throws: 
      cond-branch cond:
      true branch :
        s Assign "null"      false branch :

      cond-branch cond:(dstOffset LT 0)(dstOffset GT )
      true branch :
        new IndexOutOfBoundsException<IndexOutOfBoundsException>      false branch :

      cond-branch cond:
      true branch :
        new IndexOutOfBoundsException<IndexOutOfBoundsException>      false branch :

      var:len=end Sub start
      ensureCapacityInternal(count Add len)
      System.arraycopy(value,dstOffset,value,dstOffset Add len,count Sub dstOffset)
      for ( )
         Assign s.charAt(i)
      count AddAssign len
      return this
    func  insert()  throws: 
      return insert(offset,String.valueOf(b))
    func  insert()  throws: 
      ensureCapacityInternal(count Add 1)
      System.arraycopy(value,offset,value,offset Add 1,count Sub offset)
       Assign c
      count AddAssign 1
      return this
    func  insert()  throws: 
      return insert(offset,String.valueOf(i))
    func  insert()  throws: 
      return insert(offset,String.valueOf(l))
    func  insert()  throws: 
      return insert(offset,String.valueOf(f))
    func  insert()  throws: 
      return insert(offset,String.valueOf(d))
    func  indexOf()  throws: 
      return indexOf(str,0)
    func  indexOf()  throws: 
      return String.indexOf(value,0,count,str.toCharArray(),0,str.length(),fromIndex)
    func  lastIndexOf()  throws: 
      return lastIndexOf(str,count)
    func  lastIndexOf()  throws: 
      return String.lastIndexOf(value,0,count,str.toCharArray(),0,str.length(),fromIndex)
    func  reverse()  throws: 
      var:hasSurrogates=false
      var:n=count Sub 1
      for ( )
        var:k=n Sub j


      cond-branch cond:hasSurrogates
      true branch :
        reverseAllValidSurrogatePairs()
      false branch :

      return this
    func  reverseAllValidSurrogatePairs()  throws: 
      for ( )
        var:c2=
        cond-branch cond:Character.isLowSurrogate(c2)
        true branch :
          var:c1=
          cond-branch cond:Character.isHighSurrogate(c1)
          true branch :
             Assign c1
             Assign c2
          false branch :

        false branch :


    func  toString()  throws: 
    func  getValue()  throws: 
      return value
  LocalClasses: 
  LocalInterfaces: 

