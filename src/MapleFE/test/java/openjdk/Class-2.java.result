Matched 3040 tokens.
============= Module ===========
== Sub Tree ==
class  Class
  Fields: 
    serialVersionUID=-641755821
  Instance Initializer: 
  Constructors: 
  Methods: 
    func  getEnclosingConstructor()  throws: 
      cond-branch cond:classNameImpliesTopLevel()
      true branch :
        return null
      false branch :

      return getEnclosingConstructorNative()
    func  getEnclosingConstructorNative()  throws: 
    func  classNameImpliesTopLevel()  throws: 
      return getName().contains("$")
    func  getDeclaringClass()  throws: 
    func  getEnclosingClass()  throws: 
    func  getSimpleName()  throws: 
      cond-branch cond:isArray()
      true branch :
        return getComponentType().getSimpleName() Add "[]"
      false branch :

      cond-branch cond:isAnonymousClass()
      true branch :
        return ""
      false branch :

      cond-branch cond:isMemberClass() Lor isLocalClass()
      true branch :
        return getInnerClassName()
      false branch :

      Decl: simpleName=getName()
      Decl: dot=simpleName.lastIndexOf(".")
      cond-branch cond:dot GT 0
      true branch :
        return simpleName.substring(simpleName.lastIndexOf(".") Add 1)
      false branch :

      return simpleName
    func  getTypeName()  throws: 
      cond-branch cond:isArray()
      true branch :
        Decl: cl=this
        Decl: dimensions=0
        while cl.isArray()                      dimensionsInc

          cl Assign cl.getComponentType()

        Decl: sb=new StringBuilder()
        sb.append(cl.getName())
        for ( )
          sb.append("[]")

        return sb.toString()

        Throwable
        e

      false branch :

      return getName()
    func  getCanonicalName()  throws: 
      cond-branch cond:isArray()
      true branch :
        Decl: canonicalName=getComponentType().getCanonicalName()
        cond-branch cond:canonicalName NE null
        true branch :
          return canonicalName Add "[]"
        false branch :
          return null

      false branch :

      cond-branch cond:isLocalOrAnonymousClass()
      true branch :
        return null
      false branch :

      Decl: enclosingClass=getEnclosingClass()
      cond-branch cond:enclosingClass EQ null
      true branch :
        return getName()
      false branch :
        Decl: enclosingName=enclosingClass.getCanonicalName()
        cond-branch cond:enclosingName EQ null
        true branch :
          return null
        false branch :

        return enclosingName Add "." Add getSimpleName()

    func  isAnonymousClass()  throws: 
    func  isLocalClass()  throws: 
      return (getEnclosingMethod() NE null Lor getEnclosingConstructor() NE null) Land isAnonymousClass()
    func  isMemberClass()  throws: 
      return getDeclaringClass() NE null
    func  isLocalOrAnonymousClass()  throws: 
      return isLocalClass() Lor isAnonymousClass()
    func  getClasses()  throws: 
      Decl: result=new ArrayList()
      for ( )
        Class
        member
        c.getDeclaredClasses()
        cond-branch cond:Modifier.isPublic(member.getModifiers())
        true branch :
          result.add(member)
        false branch :



      return result.toArray(Class,result.size())
    func  getFields()  throws:     SecurityException
      Decl: fields=new ArrayList()
      getPublicFieldsRecursive(fields)
      return fields.toArray(Field,fields.size())
    func  getPublicFieldsRecursive(result)  throws: 
      for ( )
        Collections.addAll(result,c.getPublicDeclaredFields())

      Decl: iftable=ifTable
      cond-branch cond:iftable NE null
      true branch :
        for ( )
          Collections.addAll(result,(Class).getPublicDeclaredFields())

      false branch :

    func  getMethods()  throws:     SecurityException
      Decl: methods=new ArrayList()
      getPublicMethodsInternal(methods)
      CollectionUtils.removeDuplicates(methods,Method.ORDER_BY_SIGNATURE)
      return methods.toArray(Method,methods.size())
    func  getPublicMethodsInternal(result)  throws: 
      Collections.addAll(result,getDeclaredMethodsUnchecked(true))
      cond-branch cond:isInterface()
      true branch :
        for ( )
          Collections.addAll(result,c.getDeclaredMethodsUnchecked(true))

      false branch :

      Decl: iftable=ifTable
      cond-branch cond:iftable NE null
      true branch :
        for ( )
          Decl: ifc=(Class)
          Collections.addAll(result,ifc.getDeclaredMethodsUnchecked(true))

      false branch :

    func  getConstructors()  throws:     SecurityException
      return getDeclaredConstructorsInternal(true)
    func  getField(name)  throws:     NoSuchFieldException
      cond-branch cond:name EQ null
      true branch :
        new NullPointerException("name == null")
      false branch :

      Decl: result=getPublicFieldRecursive(name)
      cond-branch cond:result EQ null
      true branch :
        new NoSuchFieldException(name)
      false branch :

      return result
    func  getPublicFieldRecursive(name)  throws: 
    func  getMethod(name,parameterTypes)  throws:     NoSuchMethodException    SecurityException
      return getMethod(name,parameterTypes,true)
    func  getConstructor(parameterTypes)  throws:     NoSuchMethodException    SecurityException
      return getConstructor0(parameterTypes,Member.PUBLIC)
    func  getDeclaredClasses()  throws: 
    func  getDeclaredFields()  throws: 
    func  getDeclaredFieldsUnchecked(publicOnly)  throws: 
    func  getDeclaredMethods()  throws:     SecurityException
      Decl: result=getDeclaredMethodsUnchecked(false)
      Method
      m
      result
      m.getReturnType()
      m.getParameterTypes()

      return result
    func  getDeclaredMethodsUnchecked(publicOnly)  throws: 
    func  getDeclaredConstructors()  throws:     SecurityException
      return getDeclaredConstructorsInternal(false)
    func  getDeclaredConstructorsInternal(publicOnly)  throws: 
    func  getDeclaredField(name)  throws:     NoSuchFieldException
    func  getPublicDeclaredFields()  throws: 
    func  getDeclaredMethod(name,parameterTypes)  throws:     NoSuchMethodException    SecurityException
      return getMethod(name,parameterTypes,false)
    func  getMethod(name,parameterTypes,recursivePublicMethods)  throws:     NoSuchMethodException
      cond-branch cond:name EQ null
      true branch :
        new NullPointerException("name == null")
      false branch :

      cond-branch cond:parameterTypes EQ null
      true branch :
        parameterTypes Assign EmptyArray.CLASS
      false branch :

      Class
      c
      parameterTypes
      cond-branch cond:c EQ null
      true branch :
        new NoSuchMethodException("parameter type is null")
      false branch :


      Decl: result=
      cond-branch cond:result EQ null Lor (recursivePublicMethods Land Modifier.isPublic(result.getAccessFlags()))
      true branch :
        new NoSuchMethodException(name Add " " Add Arrays.toString(parameterTypes))
      false branch :

      return result
    func  getPublicMethodRecursive(name,parameterTypes)  throws: 
      for ( )
        Decl: result=c.getDeclaredMethodInternal(name,parameterTypes)
        cond-branch cond:result NE null Land Modifier.isPublic(result.getAccessFlags())
        true branch :
          return result
        false branch :


      return findInterfaceMethod(name,parameterTypes)
    func  getInstanceMethod(name,parameterTypes)  throws:     NoSuchMethodException    IllegalAccessException
      for ( )
        Decl: result=c.getDeclaredMethodInternal(name,parameterTypes)
        cond-branch cond:result NE null Land Modifier.isStatic(result.getModifiers())
        true branch :
          return result
        false branch :


      return findInterfaceMethod(name,parameterTypes)
    func  findInterfaceMethod(name,parameterTypes)  throws: 
      Decl: iftable=ifTable
      cond-branch cond:iftable NE null
      true branch :
        for ( )
          Decl: ifc=(Class)
          Decl: result=ifc.getPublicMethodRecursive(name,parameterTypes)
          cond-branch cond:result NE null Land Modifier.isPublic(result.getAccessFlags())
          true branch :
            return result
          false branch :


      false branch :

      return null
    func  getDeclaredConstructor(parameterTypes)  throws:     NoSuchMethodException    SecurityException
      return getConstructor0(parameterTypes,Member.DECLARED)
    func  getResourceAsStream(name)  throws: 
      name Assign resolveName(name)
      Decl: cl=getClassLoader()
      cond-branch cond:cl EQ null
      true branch :
        return ClassLoader.getSystemResourceAsStream(name)
      false branch :

      return cl.getResourceAsStream(name)
    func  getResource(name)  throws: 
      name Assign resolveName(name)
      Decl: cl=getClassLoader()
      cond-branch cond:cl EQ null
      true branch :
        return ClassLoader.getSystemResource(name)
      false branch :

      return cl.getResource(name)
    func  getProtectionDomain()  throws: 
      return null
    func  resolveName(name)  throws: 
      cond-branch cond:name EQ null
      true branch :
        return name
      false branch :

      cond-branch cond:name.startsWith("/")
      true branch :
        Decl: c=this
        while c.isArray()          c Assign c.getComponentType()

        Decl: baseName=c.getName()
        Decl: index=baseName.lastIndexOf(.)
        cond-branch cond:index NE Sub
  1
        true branch :
          name Assign baseName.substring(0,index).replace(.,/) Add "/" Add name
        false branch :

      false branch :
        name Assign name.substring(1)

      return name
    func  getConstructor0(parameterTypes,which)  throws:     NoSuchMethodException
      cond-branch cond:parameterTypes EQ null
      true branch :
        parameterTypes Assign EmptyArray.CLASS
      false branch :

      Class
      c
      parameterTypes
      cond-branch cond:c EQ null
      true branch :
        new NoSuchMethodException("parameter type is null")
      false branch :


      Decl: result=getDeclaredConstructorInternal(parameterTypes)
      cond-branch cond:result EQ null Lor which EQ Member.PUBLIC Land Modifier.isPublic(result.getAccessFlags())
      true branch :
        new NoSuchMethodException("<init> " Add Arrays.toString(parameterTypes))
      false branch :

      return result
    func  getDeclaredConstructorInternal(args)  throws: 
    func  desiredAssertionStatus()  throws: 
      return false
    func  getInnerClassName()  throws: 
    func  getInnerClassFlags(defaultValue)  throws: 
    func  isEnum()  throws: 
      return (this.getModifiers() Band ENUM) NE 0 Land this.getSuperclass() EQ java.lang.Enum
    func  getEnumConstants()  throws: 
      Decl: values=getEnumConstantsShared()
      return 
    func  getEnumConstantsShared()  throws: 
      cond-branch cond:isEnum()
      true branch :
        return null
      false branch :

      return (T[])Enum.getSharedConstants((Class)this)
    func  cast(obj)  throws: 
      cond-branch cond:obj NE null Land isInstance(obj)
      true branch :
        new ClassCastException(cannotCastMsg(obj))
      false branch :

      return (T)obj
    func  cannotCastMsg(obj)  throws: 
      return "Cannot cast " Add obj.getClass().getName() Add " to " Add getName()
    func  asSubclass(clazz)  throws: 
      cond-branch cond:clazz.isAssignableFrom(this)
      true branch :
        return ()this
      false branch :
        new ClassCastException(this.toString() Add " cannot be cast to " Add clazz.getName())

    func  getAnnotation(annotationClass)  throws: 
      Objects.requireNonNull(annotationClass)
      Decl: annotation=getDeclaredAnnotation(annotationClass)
      cond-branch cond:annotation NE null
      true branch :
        return annotation
      false branch :

      cond-branch cond:annotationClass.isDeclaredAnnotationPresent(Inherited)
      true branch :
        for ( )
          annotation Assign sup.getDeclaredAnnotation(annotationClass)
          cond-branch cond:annotation NE null
          true branch :
            return annotation
          false branch :


      false branch :

      return null
    func  isAnnotationPresent(annotationClass)  throws: 
      cond-branch cond:annotationClass EQ null
      true branch :
        new NullPointerException("annotationClass == null")
      false branch :

      cond-branch cond:isDeclaredAnnotationPresent(annotationClass)
      true branch :
        return true
      false branch :

      cond-branch cond:annotationClass.isDeclaredAnnotationPresent(Inherited)
      true branch :
        for ( )
          cond-branch cond:sup.isDeclaredAnnotationPresent(annotationClass)
          true branch :
            return true
          false branch :


      false branch :

      return false
    func  getAnnotationsByType(annotationClass)  throws: 
      Decl: annotations=
      cond-branch cond:annotations.length NE 0
      true branch :
        return annotations
      false branch :

      cond-branch cond:annotationClass.isDeclaredAnnotationPresent(Inherited)
      true branch :
        Decl: superClass=getSuperclass()
        cond-branch cond:superClass NE null
        true branch :
          return superClass.getAnnotationsByType(annotationClass)
        false branch :

      false branch :

      return (A[])Array.newInstance(annotationClass,0)
    func  getAnnotations()  throws: 
      Decl: map=new HashMap()
      Annotation
      declaredAnnotation
      getDeclaredAnnotations()
      map.put(declaredAnnotation.annotationType(),declaredAnnotation)

      for ( )
        Annotation
        declaredAnnotation
        sup.getDeclaredAnnotations()
        Decl: clazz=declaredAnnotation.annotationType()
        cond-branch cond:map.containsKey(clazz) Land clazz.isDeclaredAnnotationPresent(Inherited)
        true branch :
          map.put(clazz,declaredAnnotation)
        false branch :



      Decl: coll=map.values()
      return coll.toArray(Annotation,coll.size())
    func  getDeclaredAnnotation(annotationClass)  throws: 
    func  getDeclaredAnnotations()  throws: 
    func  isDeclaredAnnotationPresent(annotationClass)  throws: 
    func  getSignatureAttribute()  throws: 
      Decl: annotation=getSignatureAnnotation()
      cond-branch cond:annotation EQ null
      true branch :
        return null
      false branch :

      Decl: result=new StringBuilder()
      String
      s
      annotation
      result.append(s)

      return result.toString()
    func  getSignatureAnnotation()  throws: 
    func  isProxy()  throws: 
      return (accessFlags Band 262144) NE 0
    func  getAccessFlags()  throws: 
      return accessFlags
    func  getDeclaredMethodInternal(name,args)  throws: 
  LocalClasses: 
    class  Caches
      Fields: 
        genericInterfaces=new BasicLruCache(8)
      Instance Initializer: 
      Constructors: 
      Methods: 
      LocalClasses: 
      LocalInterfaces: 
  LocalInterfaces: 

Identifier:Method has no decl.
Identifier:m has no decl.
Identifier:result has no decl.
Identifier:Class has no decl.
Identifier:c has no decl.
Identifier:Class has no decl.
Identifier:c has no decl.
Identifier:Annotation has no decl.
Identifier:declaredAnnotation has no decl.
Identifier:String has no decl.
Identifier:s has no decl.
Identifier:annotation has no decl.
