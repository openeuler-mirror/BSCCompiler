Matched 5 tokens.
Matched 14 tokens.
Matched 21 tokens.
Matched 3482 tokens.
============= Module ===========
== Sub Tree ==
package java.lang
== Sub Tree ==
import java.lang.annotation.Native
== Sub Tree ==
import java.math
== Sub Tree ==
class  Long
  Fields: 
    MIN_VALUE=0    MAX_VALUE=-1    TYPE=()long.getComponentType()    value    SIZE=64    BYTES=SIZE Div Byte.SIZE    serialVersionUID=-863034401
  Instance Initializer: 
  Constructors: 
    constructor  Long(value)  throws: 
      this.value Assign value
    constructor  Long(s)  throws: 
      this.value Assign parseLong(s,10)
  Methods: 
    func  toString(i,radix)  throws: 
      cond-branch cond:radix LT Character.MIN_RADIX Lor radix GT Character.MAX_RADIX
      true branch :
        radix Assign 10
      false branch :

      cond-branch cond:radix EQ 10
      true branch :
        return toString(i)
      false branch :

      Decl: buf=
      Decl: charPos=64
      Decl: negative=(i LT 0)
      cond-branch cond:negative
      true branch :
        i Assign Minus
  i
      false branch :

      while i LE Minus
  radix         Assign 
        i Assign i Div radix

       Assign 
      cond-branch cond:negative
      true branch :
         Assign -
      false branch :

      return new String(buf,charPos,(65 Sub charPos))
    func  toUnsignedString(i,radix)  throws: 
      cond-branch cond:i GE 0
      true branch :
        return toString(i,radix)
      false branch :
        A switch


    func  toUnsignedBigInteger(i)  throws: 
      cond-branch cond:i GE 0
      true branch :
        return BigInteger.valueOf(i)
      false branch :
        Decl: upper=(int)(i Zext 32)
        Decl: lower=(int)i
        return BigInteger.valueOf(Integer.toUnsignedLong(upper)).shiftLeft(32).add(BigInteger.valueOf(Integer.toUnsignedLong(lower)))

    func  toHexString(i)  throws: 
      return toUnsignedString0(i,4)
    func  toOctalString(i)  throws: 
      return toUnsignedString0(i,3)
    func  toBinaryString(i)  throws: 
      return toUnsignedString0(i,1)
    func  toUnsignedString0(val,shift)  throws: 
      Decl: mag=Long.SIZE Sub Long.numberOfLeadingZeros(val)
      Decl: chars=Math.max(((mag Add (shift Sub 1)) Div shift)1)
      Decl: buf=
      formatUnsignedLong(val,shift,buf,0,chars)
      return new String(buf)
    func  formatUnsignedLong(val,shift,buf,offset,len)  throws: 
      Decl: charPos=len
      Decl: radix=1 Shl shift
      Decl: mask=radix Sub 1
      do          Assign 
        val ZextAssign shift
while val NE 0 Land charPos GT 0
      return charPos
    func  toString(i)  throws: 
      cond-branch cond:i EQ Long.MIN_VALUE
      true branch :
        return "-9223372036854775808"
      false branch :

      Decl: size=
      Decl: buf=
      getChars(i,size,buf)
      return new String(buf)
    func  toUnsignedString(i)  throws: 
      return toUnsignedString(i,10)
    func  getChars(i,index,buf)  throws: 
      Decl: q
      Decl: r
      Decl: charPos=index
      Decl: sign=0
      cond-branch cond:i LT 0
      true branch :
        sign Assign -
        i Assign Minus
  i
      false branch :

      while i GT Integer.MAX_VALUE        q Assign i Div 100
        r Assign (int)(i Sub ((q Shl 6) Add (q Shl 5) Add (q Shl 2)))
        i Assign q
         Assign 
         Assign 

      Decl: q2
      Decl: i2=(int)i
      while i2 GE 65536        q2 Assign i2 Div 100
        r Assign i2 Sub ((q2 Shl 6) Add (q2 Shl 5) Add (q2 Shl 2))
        i2 Assign q2
         Assign 
         Assign 

      for ( )
        q2 Assign (i2 Mul 52429) Zext (16 Add 3)
        r Assign i2 Sub ((q2 Shl 3) Add (q2 Shl 1))
         Assign 
        i2 Assign q2
        cond-branch cond:i2 EQ 0
        true branch :
          break:

        false branch :


      cond-branch cond:sign NE 0
      true branch :
         Assign sign
      false branch :

    func  stringSize(x)  throws: 
      Decl: p=10
      for ( )
        cond-branch cond:x LT p
        true branch :
          return i
        false branch :

        p Assign 10 Mul p

      return 19
    func  parseLong(s,radix)  throws:     NumberFormatException
      cond-branch cond:s EQ null
      true branch :
        new NumberFormatException("null")
      false branch :

      cond-branch cond:radix LT Character.MIN_RADIX
      true branch :
        new NumberFormatException("radix " Add radix Add " less than Character.MIN_RADIX")
      false branch :

      cond-branch cond:radix GT Character.MAX_RADIX
      true branch :
        new NumberFormatException("radix " Add radix Add " greater than Character.MAX_RADIX")
      false branch :

      Decl: result=0
      Decl: negative=false
      Decl: i=0,len=s.length()
      Decl: limit=Minus
  Long.MAX_VALUE
      Decl: multmin
      Decl: digit
      cond-branch cond:len GT 0
      true branch :
        Decl: firstChar=s.charAt(0)
        cond-branch cond:firstChar LT 0
        true branch :
          cond-branch cond:firstChar EQ -
          true branch :
            negative Assign true
            limit Assign Long.MIN_VALUE
          false branch :
            cond-branch cond:firstChar NE +
            true branch :
              NumberFormatException.forInputString(s)
            false branch :


          cond-branch cond:len EQ 1
          true branch :
            NumberFormatException.forInputString(s)
          false branch :

                      iInc

        false branch :

        multmin Assign limit Div radix
        while i LT len          digit Assign Character.digit(s.charAt(  iInc
),radix)
          cond-branch cond:digit LT 0
          true branch :
            NumberFormatException.forInputString(s)
          false branch :

          cond-branch cond:result LT multmin
          true branch :
            NumberFormatException.forInputString(s)
          false branch :

          result MulAssign radix
          cond-branch cond:result LT limit Add digit
          true branch :
            NumberFormatException.forInputString(s)
          false branch :

          result SubAssign digit

      false branch :
        NumberFormatException.forInputString(s)

      return 
    func  parseLong(s)  throws:     NumberFormatException
      return parseLong(s,10)
    func  parseUnsignedLong(s,radix)  throws:     NumberFormatException
      cond-branch cond:s EQ null
      true branch :
        new NumberFormatException("null")
      false branch :

      Decl: len=s.length()
      cond-branch cond:len GT 0
      true branch :
        Decl: firstChar=s.charAt(0)
        cond-branch cond:firstChar EQ -
        true branch :
          new NumberFormatException(String.format("Illegal leading minus sign " Add "on unsigned string %s.",s))
        false branch :
          cond-branch cond:len LE 12 Lor (radix EQ 10 Land len LE 18)
          true branch :
            return parseLong(s,radix)
          false branch :

          Decl: first=parseLong(s.substring(0,len Sub 1),radix)
          Decl: second=Character.digit(s.charAt(len Sub 1),radix)
          cond-branch cond:second LT 0
          true branch :
            new NumberFormatException("Bad digit at end of " Add s)
          false branch :

          Decl: result=first Mul radix Add second
          cond-branch cond:compareUnsigned(result,first) LT 0
          true branch :
            new NumberFormatException(String.format("String value %s exceeds " Add "range of unsigned long.",s))
          false branch :

          return result

      false branch :
        NumberFormatException.forInputString(s)

    func  parseUnsignedLong(s)  throws:     NumberFormatException
      return parseUnsignedLong(s,10)
    func  valueOf(s,radix)  throws:     NumberFormatException
      return Long.valueOf(parseLong(s,radix))
    func  valueOf(s)  throws:     NumberFormatException
      return Long.valueOf(parseLong(s,10))
    func  valueOf(l)  throws: 
      Decl: offset=128
      cond-branch cond:l GE Minus
  128 Land l LE 127
      true branch :
        return 
      false branch :

      return new Long(l)
    func  decode(nm)  throws:     NumberFormatException
      Decl: radix=10
      Decl: index=0
      Decl: negative=false
      Decl: result
      cond-branch cond:nm.length() EQ 0
      true branch :
        new NumberFormatException("Zero length string")
      false branch :

      Decl: firstChar=nm.charAt(0)
      cond-branch cond:firstChar EQ -
      true branch :
        negative Assign true
                  indexInc

      false branch :
        cond-branch cond:firstChar EQ +
        true branch :
                      indexInc

        false branch :


      cond-branch cond:nm.startsWith("0x",index) Lor nm.startsWith("0X",index)
      true branch :
        index AddAssign 2
        radix Assign 16
      false branch :
        cond-branch cond:nm.startsWith("#",index)
        true branch :
                      indexInc

          radix Assign 16
        false branch :
          cond-branch cond:nm.startsWith("0",index) Land nm.length() GT 1 Add index
          true branch :
                          indexInc

            radix Assign 8
          false branch :



      cond-branch cond:nm.startsWith("-",index) Lor nm.startsWith("+",index)
      true branch :
        new NumberFormatException("Sign character in wrong position")
      false branch :

      result Assign Long.valueOf(nm.substring(index),radix)
      result Assign 

      NumberFormatException
      e
      Decl: constant=
      result Assign Long.valueOf(constant,radix)

      return result
    func  byteValue()  throws: 
      return (byte)value
    func  shortValue()  throws: 
      return (short)value
    func  intValue()  throws: 
      return (int)value
    func  longValue()  throws: 
      return value
    func  floatValue()  throws: 
      return (float)value
    func  doubleValue()  throws: 
      return (double)value
    func  toString()  throws: 
      return toString(value)
    func  hashCode()  throws: 
      return Long.hashCode(value)
    func  hashCode(value)  throws: 
      return (int)(value Bxor (value Zext 32))
    func  equals(obj)  throws: 
      cond-branch cond:obj instanceof Long
      true branch :
        return value EQ (Long)obj.longValue()
      false branch :

      return false
    func  getLong(nm)  throws: 
      return getLong(nm,null)
    func  getLong(nm,val)  throws: 
      Decl: result=Long.getLong(nm,null)
      return 
    func  getLong(nm,val)  throws: 
      Decl: v=null
      v Assign System.getProperty(nm)

      IllegalArgumentException
      NullPointerException
      e

      cond-branch cond:v NE null
      true branch :
        return Long.decode(v)

        NumberFormatException
        e

      false branch :

      return val
    func  compareTo(anotherLong)  throws: 
      return compare(this.value,anotherLong.value)
    func  compare(x,y)  throws: 
      return 
    func  compareUnsigned(x,y)  throws: 
      return compare(x Add MIN_VALUE,y Add MIN_VALUE)
    func  divideUnsigned(dividend,divisor)  throws: 
      cond-branch cond:divisor LT 0
      true branch :
        return 
      false branch :

      cond-branch cond:dividend GT 0
      true branch :
        return dividend Div divisor
      false branch :
        return toUnsignedBigInteger(dividend).divide(toUnsignedBigInteger(divisor)).longValue()

    func  remainderUnsigned(dividend,divisor)  throws: 
      cond-branch cond:dividend GT 0 Land divisor GT 0
      true branch :
        return dividend Mod divisor
      false branch :
        cond-branch cond:compareUnsigned(dividend,divisor) LT 0
        true branch :
          return dividend
        false branch :
          return toUnsignedBigInteger(dividend).remainder(toUnsignedBigInteger(divisor)).longValue()


    func  highestOneBit(i)  throws: 
      i BorAssign (i Shr 1)
      i BorAssign (i Shr 2)
      i BorAssign (i Shr 4)
      i BorAssign (i Shr 8)
      i BorAssign (i Shr 16)
      i BorAssign (i Shr 32)
      return i Sub (i Zext 1)
    func  lowestOneBit(i)  throws: 
      return i Band Minus
  i
    func  numberOfLeadingZeros(i)  throws: 
      cond-branch cond:i EQ 0
      true branch :
        return 64
      false branch :

      Decl: n=1
      Decl: x=(int)(i Zext 32)
      cond-branch cond:x EQ 0
      true branch :
        n AddAssign 32
        x Assign (int)i
      false branch :

      cond-branch cond:x Zext 16 EQ 0
      true branch :
        n AddAssign 16
        x ShlAssign 16
      false branch :

      cond-branch cond:x Zext 24 EQ 0
      true branch :
        n AddAssign 8
        x ShlAssign 8
      false branch :

      cond-branch cond:x Zext 28 EQ 0
      true branch :
        n AddAssign 4
        x ShlAssign 4
      false branch :

      cond-branch cond:x Zext 30 EQ 0
      true branch :
        n AddAssign 2
        x ShlAssign 2
      false branch :

      n SubAssign x Zext 31
      return n
    func  numberOfTrailingZeros(i)  throws: 
      Decl: x,y
      cond-branch cond:i EQ 0
      true branch :
        return 64
      false branch :

      Decl: n=63
      y Assign (int)i
      cond-branch cond:y NE 0
      true branch :
        n Assign n Sub 32
        x Assign y
      false branch :
        x Assign (int)(i Zext 32)

      y Assign x Shl 16
      cond-branch cond:y NE 0
      true branch :
        n Assign n Sub 16
        x Assign y
      false branch :

      y Assign x Shl 8
      cond-branch cond:y NE 0
      true branch :
        n Assign n Sub 8
        x Assign y
      false branch :

      y Assign x Shl 4
      cond-branch cond:y NE 0
      true branch :
        n Assign n Sub 4
        x Assign y
      false branch :

      y Assign x Shl 2
      cond-branch cond:y NE 0
      true branch :
        n Assign n Sub 2
        x Assign y
      false branch :

      return n Sub ((x Shl 1) Zext 31)
    func  bitCount(i)  throws: 
      i Assign i Sub ((i Zext 1) Band 1431655765)
      i Assign (i Band 858993459) Add ((i Zext 2) Band 858993459)
      i Assign (i Add (i Zext 4)) Band -252645121
      i Assign i Add (i Zext 8)
      i Assign i Add (i Zext 16)
      i Assign i Add (i Zext 32)
      return (int)i Band 127
    func  rotateLeft(i,distance)  throws: 
      return (i Shl distance) Bor (i Zext Minus
  distance)
    func  rotateRight(i,distance)  throws: 
      return (i Zext distance) Bor (i Shl Minus
  distance)
    func  reverse(i)  throws: 
      i Assign (i Band 1431655765) Shl 1 Bor (i Zext 1) Band 1431655765
      i Assign (i Band 858993459) Shl 2 Bor (i Zext 2) Band 858993459
      i Assign (i Band -252645121) Shl 4 Bor (i Zext 4) Band -252645121
      i Assign (i Band 267390975) Shl 8 Bor (i Zext 8) Band 267390975
      i Assign (i Shl 48) Bor ((i Band -1048576) Shl 16) Bor ((i Zext 16) Band -1048576) Bor (i Zext 48)
      return i
    func  signum(i)  throws: 
      return (int)((i Shr 63) Bor (Minus
  i Zext 63))
    func  reverseBytes(i)  throws: 
      i Assign (i Band 267390975) Shl 8 Bor (i Zext 8) Band 267390975
      return (i Shl 48) Bor ((i Band -1048576) Shl 16) Bor ((i Zext 16) Band -1048576) Bor (i Zext 48)
    func  sum(a,b)  throws: 
      return a Add b
    func  max(a,b)  throws: 
      return Math.max(a,b)
    func  min(a,b)  throws: 
      return Math.min(a,b)
  LocalClasses: 
    class  LongCache
      Fields: 
        cache=[]
      Instance Initializer: 
        InstInit- 0
      Constructors: 
        constructor  LongCache()  throws: 
      Methods: 
      LocalClasses: 
      LocalInterfaces: 
  LocalInterfaces: 

Identifier:result has no decl.
Identifier:result has no decl.
Identifier:NumberFormatException has no decl.
Identifier:e has no decl.
Identifier:result has no decl.
Identifier:v has no decl.
Identifier:IllegalArgumentException has no decl.
Identifier:NullPointerException has no decl.
Identifier:e has no decl.
Identifier:n has no decl.
Identifier:x has no decl.
Identifier:y has no decl.
Identifier:y has no decl.
Identifier:x has no decl.
Identifier:y has no decl.
Identifier:x has no decl.
Identifier:y has no decl.
Identifier:x has no decl.
Identifier:y has no decl.
Identifier:x has no decl.
