Matched 5 tokens.
Matched 14 tokens.
Matched 21 tokens.
Matched 28 tokens.
Matched 35 tokens.
Matched 44 tokens.
Matched 51 tokens.
Matched 58 tokens.
Matched 65 tokens.
Matched 72 tokens.
Matched 79 tokens.
Matched 86 tokens.
Matched 93 tokens.
Matched 100 tokens.
Matched 107 tokens.
Matched 117 tokens.
Matched 1578 tokens.
============= Module ===========
== Sub Tree ==
package java.lang
== Sub Tree ==
import dalvik.annotation.optimization.FastNative
== Sub Tree ==
import java.io
== Sub Tree ==
import java.util.StringTokenizer
== Sub Tree ==
import sun.reflect.CallerSensitive
== Sub Tree ==
import java.lang.ref.FinalizerReference
== Sub Tree ==
import java.util.ArrayList
== Sub Tree ==
import java.util.List
== Sub Tree ==
import dalvik.system.BaseDexClassLoader
== Sub Tree ==
import dalvik.system.VMDebug
== Sub Tree ==
import dalvik.system.VMStack
== Sub Tree ==
import dalvik.system.VMRuntime
== Sub Tree ==
import libcore.io.IoUtils
== Sub Tree ==
import libcore.io.Libcore
== Sub Tree ==
import libcore.util.EmptyArray
== Sub Tree ==
import static android.system.OsConstants._SC_NPROCESSORS_CONF
== Sub Tree ==
class  Runtime
  Fields: 
    currentRuntime=new Runtime()    shutdownHooks=new ArrayList()    finalizeOnExit    shuttingDown    tracingMethods    mLibPaths=null
  Instance Initializer: 
  Constructors: 
    constructor  Runtime()  throws: 
  Methods: 
    func  nativeExit(code)  throws: 
    func  getRuntime()  throws: 
      return currentRuntime
    func  exit(status)  throws: 
      cond-branch cond:shuttingDown
      true branch :
        shuttingDown Assign true
        Decl: hooks
        hooks Assign 
        shutdownHooks.toArray(hooks)

        Thread
        hook
        hooks
        hook.start()

        Thread
        hook
        hooks
        hook.join()

        InterruptedException
        ex


        cond-branch cond:finalizeOnExit
        true branch :
          runFinalization()
        false branch :

        nativeExit(status)
      false branch :


    func  addShutdownHook(hook)  throws: 
      cond-branch cond:hook EQ null
      true branch :
        new NullPointerException("hook == null")
      false branch :

      cond-branch cond:shuttingDown
      true branch :
        new IllegalStateException("VM already shutting down")
      false branch :

      cond-branch cond:hook.started
      true branch :
        new IllegalArgumentException("Hook has already been started")
      false branch :

      cond-branch cond:shutdownHooks.contains(hook)
      true branch :
        new IllegalArgumentException("Hook already registered.")
      false branch :

      shutdownHooks.add(hook)

    func  removeShutdownHook(hook)  throws: 
      cond-branch cond:hook EQ null
      true branch :
        new NullPointerException("hook == null")
      false branch :

      cond-branch cond:shuttingDown
      true branch :
        new IllegalStateException("VM already shutting down")
      false branch :

      return shutdownHooks.remove(hook)

    func  halt(status)  throws: 
      nativeExit(status)
    func  runFinalizersOnExit(value)  throws: 
      finalizeOnExit Assign value
    func  exec(command)  throws:     IOException
      return exec(command,null,null)
    func  exec(command,envp)  throws:     IOException
      return exec(command,envp,null)
    func  exec(command,envp,dir)  throws:     IOException
      cond-branch cond:command.length() EQ 0
      true branch :
        new IllegalArgumentException("Empty command")      false branch :

      Decl: st=new StringTokenizer(command)
      Decl: cmdarray=
      for ( )
         Assign st.nextToken()
      return exec(cmdarray,envp,dir)
    func  exec(cmdarray[])  throws:     IOException
      return exec(cmdarray,null,null)
    func  exec(cmdarray,envp)  throws:     IOException
      return exec(cmdarray,envp,null)
    func  exec(cmdarray,envp,dir)  throws:     IOException
      return new ProcessBuilder(cmdarray).environment(envp).directory(dir).start()
    func  availableProcessors()  throws: 
      return (int)Libcore.os.sysconf(_SC_NPROCESSORS_CONF)
    func  freeMemory()  throws: 
    func  totalMemory()  throws: 
    func  maxMemory()  throws: 
    func  gc()  throws: 
    func  runFinalization0()  throws: 
    func  runFinalization()  throws: 
      VMRuntime.runFinalization(0)
    func  traceInstructions(on)  throws: 
    func  traceMethodCalls(on)  throws: 
      cond-branch cond:on NE tracingMethods
      true branch :
        cond-branch cond:on
        true branch :
          VMDebug.startMethodTracing()
        false branch :
          VMDebug.stopMethodTracing()

        tracingMethods Assign on
      false branch :

    func  load(filename)  throws: 
      load0(VMStack.getStackClass1(),filename)
    func  checkTargetSdkVersionForLoad(methodName)  throws: 
      Decl: targetSdkVersion=VMRuntime.getRuntime().getTargetSdkVersion()
      cond-branch cond:targetSdkVersion GT 24
      true branch :
        new UnsupportedOperationException(methodName Add " is not supported on SDK " Add targetSdkVersion)
      false branch :

    func  load(absolutePath,loader)  throws: 
      checkTargetSdkVersionForLoad("java.lang.Runtime#load(String, ClassLoader)")
      java.lang.System.logE("java.lang.Runtime#load(String, ClassLoader)" Add " is private and will be removed in a future Android release")
      cond-branch cond:absolutePath EQ null
      true branch :
        new NullPointerException("absolutePath == null")
      false branch :

      Decl: error=doLoad(absolutePath,loader)
      cond-branch cond:error NE null
      true branch :
        new UnsatisfiedLinkError(error)
      false branch :

    func  load0(fromClass,filename)  throws: 
      cond-branch cond:(new File(filename).isAbsolute())
      true branch :
        new UnsatisfiedLinkError("Expecting an absolute path of the library: " Add filename)
      false branch :

      cond-branch cond:filename EQ null
      true branch :
        new NullPointerException("filename == null")
      false branch :

      Decl: error=doLoad(filename,fromClass.getClassLoader())
      cond-branch cond:error NE null
      true branch :
        new UnsatisfiedLinkError(error)
      false branch :

    func  loadLibrary(libname)  throws: 
      loadLibrary0(VMStack.getCallingClassLoader(),libname)
    func  loadLibrary(libname,classLoader)  throws: 
      checkTargetSdkVersionForLoad("java.lang.Runtime#loadLibrary(String, ClassLoader)")
      java.lang.System.logE("java.lang.Runtime#loadLibrary(String, ClassLoader)" Add " is private and will be removed in a future Android release")
      loadLibrary0(classLoader,libname)
    func  loadLibrary0(loader,libname)  throws: 
      cond-branch cond:libname.indexOf((int)File.separatorChar) NE Minus 1
      true branch :
        new UnsatisfiedLinkError("Directory separator should not appear in library name: " Add libname)
      false branch :

      Decl: libraryName=libname
      cond-branch cond:loader NE null
      true branch :
        Decl: filename=loader.findLibrary(libraryName)
        cond-branch cond:filename EQ null
        true branch :
          new UnsatisfiedLinkError(loader Add " couldn't find "" Add System.mapLibraryName(libraryName) Add """)
        false branch :

        Decl: error=doLoad(filename,loader)
        cond-branch cond:error NE null
        true branch :
          new UnsatisfiedLinkError(error)
        false branch :

        return 
      false branch :

      Decl: filename=System.mapLibraryName(libraryName)
      Decl: candidates=new ArrayList()
      Decl: lastError=null
      String
      directory
      getLibPaths()
      Decl: candidate=directory Add filename
      candidates.add(candidate)
      cond-branch cond:IoUtils.canOpenReadOnly(candidate)
      true branch :
        Decl: error=doLoad(candidate,loader)
        cond-branch cond:error EQ null
        true branch :
          return 
        false branch :

        lastError Assign error
      false branch :


      cond-branch cond:lastError NE null
      true branch :
        new UnsatisfiedLinkError(lastError)
      false branch :

      new UnsatisfiedLinkError("Library " Add libraryName Add " not found; tried " Add candidates)
    func  getLibPaths()  throws: 
      cond-branch cond:mLibPaths EQ null
      true branch :
        cond-branch cond:mLibPaths EQ null
        true branch :
          mLibPaths Assign initLibPaths()
        false branch :


      false branch :

      return mLibPaths
    func  initLibPaths()  throws: 
      Decl: javaLibraryPath=System.getProperty("java.library.path")
      cond-branch cond:javaLibraryPath EQ null
      true branch :
        return EmptyArray.STRING
      false branch :

      Decl: paths=javaLibraryPath.split(":")
      for ( )
        cond-branch cond:.endsWith("/")
        true branch :
           AddAssign "/"
        false branch :


      return paths
    func  doLoad(name,loader)  throws: 
      Decl: librarySearchPath=null
      cond-branch cond:loader NE null Land loader instanceof BaseDexClassLoader
      true branch :
        Decl: dexClassLoader=(BaseDexClassLoader)loader
        librarySearchPath Assign dexClassLoader.getLdLibraryPath()
      false branch :

      return nativeLoad(name,loader,librarySearchPath)

    func  nativeLoad(filename,loader,librarySearchPath)  throws: 
    func  getLocalizedInputStream(in)  throws: 
      return in
    func  getLocalizedOutputStream(out)  throws: 
      return out
  LocalClasses: 
  LocalInterfaces: 

Identifier:String has no decl.
Identifier:directory has no decl.
UserType:UnsatisfiedLinkError has no decl.
