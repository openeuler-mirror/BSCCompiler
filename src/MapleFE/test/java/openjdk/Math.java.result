Matched 5 tokens.
Matched 14 tokens.
Matched 21 tokens.
Matched 28 tokens.
Matched 35 tokens.
Matched 3300 tokens.
Convert unary --> binary
Convert unary --> binary
============= Module ===========
== Sub Tree ==
package java.lang
== Sub Tree ==
import dalvik.annotation.optimization.FastNative
== Sub Tree ==
import java.util.Random
== Sub Tree ==
import sun.misc.FloatConsts
== Sub Tree ==
import sun.misc.DoubleConsts
== Sub Tree ==
class  Math
  Fields: 
    E=2.71828    PI=3.14159    negativeZeroFloatBits=Float.floatToRawIntBits(Minus
  0)    negativeZeroDoubleBits=Double.doubleToRawLongBits(Minus
  0)    twoToTheDoubleScaleUp=powerOfTwoD(512)    twoToTheDoubleScaleDown=powerOfTwoD(Minus
  512)
  Instance Initializer: 
  Constructors: 
    constructor  Math()  throws: 
  Methods: 
    func  sin(a)  throws: 
    func  cos(a)  throws: 
    func  tan(a)  throws: 
    func  asin(a)  throws: 
    func  acos(a)  throws: 
    func  atan(a)  throws: 
    func  toRadians(angdeg)  throws: 
      return angdeg Div 180 Mul PI
    func  toDegrees(angrad)  throws: 
      return angrad Mul 180 Div PI
    func  exp(a)  throws: 
    func  log(a)  throws: 
    func  log10(a)  throws: 
    func  sqrt(a)  throws: 
    func  cbrt(a)  throws: 
    func  IEEEremainder(f1,f2)  throws: 
    func  ceil(a)  throws: 
    func  floor(a)  throws: 
    func  rint(a)  throws: 
    func  atan2(y,x)  throws: 
    func  pow(a,b)  throws: 
    func  round(a)  throws: 
      Decl: intBits=Float.floatToRawIntBits(a)
      Decl: biasedExp=(intBits Band FloatConsts.EXP_BIT_MASK) Shr (FloatConsts.SIGNIFICAND_WIDTH Sub 1)
      Decl: shift=(FloatConsts.SIGNIFICAND_WIDTH Sub 2 Add FloatConsts.EXP_BIAS) Sub biasedExp
      cond-branch cond:(shift Band Minus
  32) EQ 0
      true branch :
        Decl: r=((intBits Band FloatConsts.SIGNIF_BIT_MASK) Bor (FloatConsts.SIGNIF_BIT_MASK Add 1))
        cond-branch cond:intBits LT 0
        true branch :
          r Assign Minus
  r
        false branch :

        return ((r Shr shift) Add 1) Shr 1
      false branch :
        return (int)a

    func  round(a)  throws: 
      Decl: longBits=Double.doubleToRawLongBits(a)
      Decl: biasedExp=(longBits Band DoubleConsts.EXP_BIT_MASK) Shr (DoubleConsts.SIGNIFICAND_WIDTH Sub 1)
      Decl: shift=(DoubleConsts.SIGNIFICAND_WIDTH Sub 2 Add DoubleConsts.EXP_BIAS) Sub biasedExp
      cond-branch cond:(shift Band Minus
  64) EQ 0
      true branch :
        Decl: r=((longBits Band DoubleConsts.SIGNIF_BIT_MASK) Bor (DoubleConsts.SIGNIF_BIT_MASK Add 1))
        cond-branch cond:longBits LT 0
        true branch :
          r Assign Minus
  r
        false branch :

        return ((r Shr shift) Add 1) Shr 1
      false branch :
        return (long)a

    func  random()  throws: 
      return RandomNumberGeneratorHolder.randomNumberGenerator.nextDouble()
    func  setRandomSeedInternal(seed)  throws: 
      RandomNumberGeneratorHolder.randomNumberGenerator.setSeed(seed)
    func  randomIntInternal()  throws: 
      return RandomNumberGeneratorHolder.randomNumberGenerator.nextInt()
    func  randomLongInternal()  throws: 
      return RandomNumberGeneratorHolder.randomNumberGenerator.nextLong()
    func  addExact(x,y)  throws: 
      Decl: r=x Add y
      cond-branch cond:((x Bxor r) Band (y Bxor r)) LT 0
      true branch :
        new ArithmeticException("integer overflow")
      false branch :

      return r
    func  addExact(x,y)  throws: 
      Decl: r=x Add y
      cond-branch cond:((x Bxor r) Band (y Bxor r)) LT 0
      true branch :
        new ArithmeticException("long overflow")
      false branch :

      return r
    func  subtractExact(x,y)  throws: 
      Decl: r=x Sub y
      cond-branch cond:((x Bxor y) Band (x Bxor r)) LT 0
      true branch :
        new ArithmeticException("integer overflow")
      false branch :

      return r
    func  subtractExact(x,y)  throws: 
      Decl: r=x Sub y
      cond-branch cond:((x Bxor y) Band (x Bxor r)) LT 0
      true branch :
        new ArithmeticException("long overflow")
      false branch :

      return r
    func  multiplyExact(x,y)  throws: 
      Decl: r=(long)x Mul (long)y
      cond-branch cond:(int)r NE r
      true branch :
        new ArithmeticException("integer overflow")
      false branch :

      return (int)r
    func  multiplyExact(x,y)  throws: 
      Decl: r=x Mul y
      Decl: ax=Math.abs(x)
      Decl: ay=Math.abs(y)
      cond-branch cond:((ax Bor ay) Zext 31 NE 0)
      true branch :
        cond-branch cond:((y NE 0) Land (r Div y NE x)) Lor (x EQ Long.MIN_VALUE Land y EQ Minus
  1)
        true branch :
          new ArithmeticException("long overflow")
        false branch :

      false branch :

      return r
    func  incrementExact(a)  throws: 
      cond-branch cond:a EQ Integer.MAX_VALUE
      true branch :
        new ArithmeticException("integer overflow")
      false branch :

      return a Add 1
    func  incrementExact(a)  throws: 
      cond-branch cond:a EQ Long.MAX_VALUE
      true branch :
        new ArithmeticException("long overflow")
      false branch :

      return a Add 1
    func  decrementExact(a)  throws: 
      cond-branch cond:a EQ Integer.MIN_VALUE
      true branch :
        new ArithmeticException("integer overflow")
      false branch :

      return a Sub 1
    func  decrementExact(a)  throws: 
      cond-branch cond:a EQ Long.MIN_VALUE
      true branch :
        new ArithmeticException("long overflow")
      false branch :

      return a Sub 1
    func  negateExact(a)  throws: 
      cond-branch cond:a EQ Integer.MIN_VALUE
      true branch :
        new ArithmeticException("integer overflow")
      false branch :

      return Minus
  a
    func  negateExact(a)  throws: 
      cond-branch cond:a EQ Long.MIN_VALUE
      true branch :
        new ArithmeticException("long overflow")
      false branch :

      return Minus
  a
    func  toIntExact(value)  throws: 
      cond-branch cond:(int)value NE value
      true branch :
        new ArithmeticException("integer overflow")
      false branch :

      return (int)value
    func  floorDiv(x,y)  throws: 
      Decl: r=x Div y
      cond-branch cond:(x Bxor y) LT 0 Land (r Mul y NE x)
      true branch :
                  rDec

      false branch :

      return r
    func  floorDiv(x,y)  throws: 
      Decl: r=x Div y
      cond-branch cond:(x Bxor y) LT 0 Land (r Mul y NE x)
      true branch :
                  rDec

      false branch :

      return r
    func  floorMod(x,y)  throws: 
      Decl: r=x Sub floorDiv(x,y) Mul y
      return r
    func  floorMod(x,y)  throws: 
      return x Sub floorDiv(x,y) Mul y
    func  abs(a)  throws: 
      return 
    func  abs(a)  throws: 
      return 
    func  abs(a)  throws: 
      return Float.intBitsToFloat(2147483647 Band Float.floatToRawIntBits(a))
    func  abs(a)  throws: 
      return Double.longBitsToDouble(-1 Band Double.doubleToRawLongBits(a))
    func  max(a,b)  throws: 
      return 
    func  max(a,b)  throws: 
      return 
    func  max(a,b)  throws: 
      cond-branch cond:a NE a
      true branch :
        return a      false branch :

      cond-branch cond:(a EQ 0) Land (b EQ 0) Land (Float.floatToRawIntBits(a) EQ negativeZeroFloatBits)
      true branch :
        return b
      false branch :

      return 
    func  max(a,b)  throws: 
      cond-branch cond:a NE a
      true branch :
        return a      false branch :

      cond-branch cond:(a EQ 0) Land (b EQ 0) Land (Double.doubleToRawLongBits(a) EQ negativeZeroDoubleBits)
      true branch :
        return b
      false branch :

      return 
    func  min(a,b)  throws: 
      return 
    func  min(a,b)  throws: 
      return 
    func  min(a,b)  throws: 
      cond-branch cond:a NE a
      true branch :
        return a      false branch :

      cond-branch cond:(a EQ 0) Land (b EQ 0) Land (Float.floatToRawIntBits(b) EQ negativeZeroFloatBits)
      true branch :
        return b
      false branch :

      return 
    func  min(a,b)  throws: 
      cond-branch cond:a NE a
      true branch :
        return a      false branch :

      cond-branch cond:(a EQ 0) Land (b EQ 0) Land (Double.doubleToRawLongBits(b) EQ negativeZeroDoubleBits)
      true branch :
        return b
      false branch :

      return 
    func  ulp(d)  throws: 
      Decl: exp=getExponent(d)
      A switch

    func  ulp(f)  throws: 
      Decl: exp=getExponent(f)
      A switch

    func  signum(d)  throws: 
      return 
    func  signum(f)  throws: 
      return 
    func  sinh(x)  throws: 
    func  cosh(x)  throws: 
    func  tanh(x)  throws: 
    func  hypot(x,y)  throws: 
    func  expm1(x)  throws: 
    func  log1p(x)  throws: 
    func  copySign(magnitude,sign)  throws: 
      return Double.longBitsToDouble((Double.doubleToRawLongBits(sign) Band (DoubleConsts.SIGN_BIT_MASK)) Bor (Double.doubleToRawLongBits(magnitude) Band (DoubleConsts.EXP_BIT_MASK Bor DoubleConsts.SIGNIF_BIT_MASK)))
    func  copySign(magnitude,sign)  throws: 
      return Float.intBitsToFloat((Float.floatToRawIntBits(sign) Band (FloatConsts.SIGN_BIT_MASK)) Bor (Float.floatToRawIntBits(magnitude) Band (FloatConsts.EXP_BIT_MASK Bor FloatConsts.SIGNIF_BIT_MASK)))
    func  getExponent(f)  throws: 
      return ((Float.floatToRawIntBits(f) Band FloatConsts.EXP_BIT_MASK) Shr (FloatConsts.SIGNIFICAND_WIDTH Sub 1)) Sub FloatConsts.EXP_BIAS
    func  getExponent(d)  throws: 
      return (int)(((Double.doubleToRawLongBits(d) Band DoubleConsts.EXP_BIT_MASK) Shr (DoubleConsts.SIGNIFICAND_WIDTH Sub 1)) Sub DoubleConsts.EXP_BIAS)
    func  nextAfter(start,direction)  throws: 
      cond-branch cond:Double.isNaN(start) Lor Double.isNaN(direction)
      true branch :
        return start Add direction
      false branch :
        cond-branch cond:start EQ direction
        true branch :
          return direction
        false branch :
          Decl: transducer=Double.doubleToRawLongBits(start Add 0)
          cond-branch cond:direction GT start
          true branch :
            transducer Assign transducer Add ()
          false branch :
            assert direction LT start : 
            cond-branch cond:transducer GT 0
            true branch :
              PreDec
                transducer            false branch :
              cond-branch cond:transducer LT 0
              true branch :
                PreInc
                  transducer              false branch :
                transducer Assign DoubleConsts.SIGN_BIT_MASK Bor 1

          return Double.longBitsToDouble(transducer)

    func  nextAfter(start,direction)  throws: 
      cond-branch cond:Float.isNaN(start) Lor Double.isNaN(direction)
      true branch :
        return start Add (float)direction
      false branch :
        cond-branch cond:start EQ direction
        true branch :
          return (float)direction
        false branch :
          Decl: transducer=Float.floatToRawIntBits(start Add 0)
          cond-branch cond:direction GT start
          true branch :
            transducer Assign transducer Add ()
          false branch :
            assert direction LT start : 
            cond-branch cond:transducer GT 0
            true branch :
              PreDec
                transducer            false branch :
              cond-branch cond:transducer LT 0
              true branch :
                PreInc
                  transducer              false branch :
                transducer Assign FloatConsts.SIGN_BIT_MASK Bor 1

          return Float.intBitsToFloat(transducer)

    func  nextUp(d)  throws: 
      cond-branch cond:Double.isNaN(d) Lor d EQ Double.POSITIVE_INFINITY
      true branch :
        return d      false branch :
        d AddAssign 0
        return Double.longBitsToDouble(Double.doubleToRawLongBits(d) Add ())

    func  nextUp(f)  throws: 
      cond-branch cond:Float.isNaN(f) Lor f EQ FloatConsts.POSITIVE_INFINITY
      true branch :
        return f      false branch :
        f AddAssign 0
        return Float.intBitsToFloat(Float.floatToRawIntBits(f) Add ())

    func  nextDown(d)  throws: 
      cond-branch cond:Double.isNaN(d) Lor d EQ Double.NEGATIVE_INFINITY
      true branch :
        return d      false branch :
        cond-branch cond:d EQ 0
        true branch :
          return Minus
  Double.MIN_VALUE        false branch :
          return Double.longBitsToDouble(Double.doubleToRawLongBits(d) Add ())

    func  nextDown(f)  throws: 
      cond-branch cond:Float.isNaN(f) Lor f EQ Float.NEGATIVE_INFINITY
      true branch :
        return f      false branch :
        cond-branch cond:f EQ 0
        true branch :
          return Minus
  Float.MIN_VALUE        false branch :
          return Float.intBitsToFloat(Float.floatToRawIntBits(f) Add ())

    func  scalb(d,scaleFactor)  throws: 
      Decl: MAX_SCALE=DoubleConsts.MAX_EXPONENT Add Minus
  DoubleConsts.MIN_EXPONENT Add DoubleConsts.SIGNIFICAND_WIDTH Add 1
      Decl: exp_adjust=0
      Decl: scale_increment=0
      Decl: exp_delta=Double.NaN
      cond-branch cond:scaleFactor LT 0
      true branch :
        scaleFactor Assign Math.max(scaleFactor Sub MAX_SCALE)
        scale_increment Assign Minus
  512
        exp_delta Assign twoToTheDoubleScaleDown
      false branch :
        scaleFactor Assign Math.min(scaleFactor,MAX_SCALE)
        scale_increment Assign 512
        exp_delta Assign twoToTheDoubleScaleUp

      Decl: t=(scaleFactor Shr 9 Sub 1) Zext 32 Sub 9
      exp_adjust Assign ((scaleFactor Add t) Band (512 Sub 1)) Sub t
      d MulAssign powerOfTwoD(exp_adjust)
      scaleFactor SubAssign exp_adjust
      while scaleFactor NE 0        d MulAssign exp_delta
        scaleFactor SubAssign scale_increment

      return d
    func  scalb(f,scaleFactor)  throws: 
      Decl: MAX_SCALE=FloatConsts.MAX_EXPONENT Add Minus
  FloatConsts.MIN_EXPONENT Add FloatConsts.SIGNIFICAND_WIDTH Add 1
      scaleFactor Assign Math.max(Math.min(scaleFactor,MAX_SCALE) Sub MAX_SCALE)
      return (float)((double)f Mul powerOfTwoD(scaleFactor))
    func  powerOfTwoD(n)  throws: 
      assert (n GE DoubleConsts.MIN_EXPONENT Land n LE DoubleConsts.MAX_EXPONENT) : 
      return Double.longBitsToDouble((((long)n Add (long)DoubleConsts.EXP_BIAS) Shl (DoubleConsts.SIGNIFICAND_WIDTH Sub 1)) Band DoubleConsts.EXP_BIT_MASK)
    func  powerOfTwoF(n)  throws: 
      assert (n GE FloatConsts.MIN_EXPONENT Land n LE FloatConsts.MAX_EXPONENT) : 
      return Float.intBitsToFloat(((n Add FloatConsts.EXP_BIAS) Shl (FloatConsts.SIGNIFICAND_WIDTH Sub 1)) Band FloatConsts.EXP_BIT_MASK)
  LocalClasses: 
    class  RandomNumberGeneratorHolder
      Fields: 
        randomNumberGenerator=new Random()
      Instance Initializer: 
      Constructors: 
      Methods: 
      LocalClasses: 
      LocalInterfaces: 
  LocalInterfaces: 

Identifier:exp_adjust has no decl.
Identifier:t has no decl.
Identifier:exp_adjust has no decl.
