Matched 5 tokens.
Matched 12 tokens.
Matched 19 tokens.
Matched 26 tokens.
Matched 33 tokens.
Matched 42 tokens.
Matched 51 tokens.
Matched 60 tokens.
Matched 510 tokens.
============= Module ===========
== Sub Tree ==
package java.lang
== Sub Tree ==
import java.util.NoSuchElementException
== Sub Tree ==
import java.util.PrimitiveIterator
== Sub Tree ==
import java.util.Spliterator
== Sub Tree ==
import java.util.Spliterators
== Sub Tree ==
import java.util.function.IntConsumer
== Sub Tree ==
import java.util.stream.IntStream
== Sub Tree ==
import java.util.stream.StreamSupport
== Sub Tree ==
interface  CharSequence
  Fields: 

  Methods: 
    func  length()  throws: 
    func  charAt(index)  throws: 
    func  subSequence(start,end)  throws: 
    func  toString()  throws: 
    func  chars()  throws: 
      class  CharIterator
        Fields: 
          cur=0
        Instance Initializer: 
        Constructors: 
        Methods: 
          func  hasNext()  throws: 
            return cur LT length()
          func  nextInt()  throws: 
            cond-branch cond:hasNext()
            true branch :
              return charAt(  curInc
)
            false branch :
              new NoSuchElementException()

          func  forEachRemaining(block)  throws: 
            for ( )
              block.accept(charAt(cur))

        LocalClasses: 
        LocalInterfaces: 

      return StreamSupport.intStream(() -> Spliterators.spliterator(new CharIterator(),length(),Spliterator.ORDERED)
,Spliterator.SUBSIZED Bor Spliterator.SIZED Bor Spliterator.ORDERED,false)
    func  codePoints()  throws: 
      class  CodePointIterator
        Fields: 
          cur=0
        Instance Initializer: 
        Constructors: 
        Methods: 
          func  forEachRemaining(block)  throws: 
            Decl: length=length()
            Decl: i=cur
            while i LT length              Decl: c1=charAt(  iInc
)
              cond-branch cond:Character.isHighSurrogate(c1) Lor i GE length
              true branch :
                block.accept(c1)
              false branch :
                Decl: c2=charAt(i)
                cond-branch cond:Character.isLowSurrogate(c2)
                true branch :
                                      iInc

                  block.accept(Character.toCodePoint(c1,c2))
                false branch :
                  block.accept(c1)




            cur Assign i

          func  hasNext()  throws: 
            return cur LT length()
          func  nextInt()  throws: 
            Decl: length=length()
            cond-branch cond:cur GE length
            true branch :
              new NoSuchElementException()
            false branch :

            Decl: c1=charAt(  curInc
)
            cond-branch cond:Character.isHighSurrogate(c1) Land cur LT length
            true branch :
              Decl: c2=charAt(cur)
              cond-branch cond:Character.isLowSurrogate(c2)
              true branch :
                                  curInc

                return Character.toCodePoint(c1,c2)
              false branch :

            false branch :

            return c1
        LocalClasses: 
        LocalInterfaces: 

      return StreamSupport.intStream(() -> Spliterators.spliteratorUnknownSize(new CodePointIterator(),Spliterator.ORDERED)
,Spliterator.ORDERED,false)

