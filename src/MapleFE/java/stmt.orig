###################################################################################
# This file is the syntax rules for statements extracted from
# https://docs.oracle.com/javase/specs/jls/se12/html/jls-14.html
###################################################################################

Block:
  { [BlockStatements] }
BlockStatements:
  BlockStatement {BlockStatement}
BlockStatement:
  LocalVariableDeclarationStatement 
  ClassDeclaration 
  Statement
  
LocalVariableDeclarationStatement:
  LocalVariableDeclaration ;
LocalVariableDeclaration:
  {VariableModifier} LocalVariableType VariableDeclaratorList
LocalVariableType:
  UnannType 
  var
  
VariableModifier:
  Annotation 
  final
VariableDeclaratorList:
  VariableDeclarator {, VariableDeclarator}
VariableDeclarator:
  VariableDeclaratorId [= VariableInitializer]
VariableDeclaratorId:
  Identifier [Dims]
Dims:
  {Annotation} [ ] {{Annotation} [ ]}
VariableInitializer:
  Expression 
  ArrayInitializer
  
Statement:
  StatementWithoutTrailingSubstatement 
  LabeledStatement 
  IfThenStatement 
  IfThenElseStatement 
  WhileStatement 
  ForStatement
StatementNoShortIf:
  StatementWithoutTrailingSubstatement 
  LabeledStatementNoShortIf 
  IfThenElseStatementNoShortIf 
  WhileStatementNoShortIf 
  ForStatementNoShortIf
StatementWithoutTrailingSubstatement:
  Block 
  EmptyStatement 
  ExpressionStatement 
  AssertStatement 
  SwitchStatement 
  DoStatement 
  BreakStatement 
  ContinueStatement 
  ReturnStatement 
  SynchronizedStatement 
  ThrowStatement 
  TryStatement
  
IfThenStatement:
  if ( Expression ) Statement
IfThenElseStatement:
  if ( Expression ) StatementNoShortIf else Statement
IfThenElseStatementNoShortIf:
  if ( Expression ) StatementNoShortIf else StatementNoShortIf
  
EmptyStatement:
  ;
  
LabeledStatement:
  Identifier : Statement
LabeledStatementNoShortIf:
  Identifier : StatementNoShortIf
  
ExpressionStatement:
  StatementExpression ;
StatementExpression:
  Assignment 
  PreIncrementExpression 
  PreDecrementExpression 
  PostIncrementExpression 
  PostDecrementExpression 
  MethodInvocation 
  ClassInstanceCreationExpression
  
IfThenStatement:
  if ( Expression ) Statement
IfThenElseStatement:
  if ( Expression ) StatementNoShortIf else Statement
IfThenElseStatementNoShortIf:
  if ( Expression ) StatementNoShortIf else StatementNoShortIf
  
AssertStatement:
  assert Expression ; 
  assert Expression : Expression ;
  
SwitchStatement:
  switch ( Expression ) SwitchBlock
SwitchBlock:
  { {SwitchBlockStatementGroup} {SwitchLabel} }
SwitchBlockStatementGroup:
  SwitchLabels BlockStatements
SwitchLabels:
  SwitchLabel {SwitchLabel}
SwitchLabel:
  case ConstantExpression : 
  case EnumConstantName : 
  default :
EnumConstantName:
  Identifier
  
WhileStatement:
  while ( Expression ) Statement
WhileStatementNoShortIf:
  while ( Expression ) StatementNoShortIf
  
DoStatement:
  do Statement while ( Expression ) ;
  
ForStatement:
  BasicForStatement 
  EnhancedForStatement
ForStatementNoShortIf:
  BasicForStatementNoShortIf 
  EnhancedForStatementNoShortIf
  
BasicForStatement:
  for ( [ForInit] ; [Expression] ; [ForUpdate] ) Statement
BasicForStatementNoShortIf:
  for ( [ForInit] ; [Expression] ; [ForUpdate] ) StatementNoShortIf
ForInit:
  StatementExpressionList 
  LocalVariableDeclaration
ForUpdate:
  StatementExpressionList
StatementExpressionList:
  StatementExpression {, StatementExpression}
  
EnhancedForStatement:
  for ( {VariableModifier} LocalVariableType VariableDeclaratorId : Expression ) Statement
EnhancedForStatementNoShortIf:
  for ( {VariableModifier} LocalVariableType VariableDeclaratorId : Expression ) StatementNoShortIf
  
VariableModifier:
  Annotation 
  final
LocalVariableType:
  UnannType 
  var
VariableDeclaratorId:
  Identifier [Dims]
Dims:
  {Annotation} [ ] {{Annotation} [ ]}
  
BreakStatement:
  break [Identifier] ;
  
ContinueStatement:
  continue [Identifier] ;
  
ReturnStatement:
  return [Expression] ;
  
ThrowStatement:
  throw Expression ;
  
SynchronizedStatement:
  synchronized ( Expression ) Block
  
TryStatement:
  try Block Catches 
  try Block [Catches] Finally 
  TryWithResourcesStatement
Catches:
  CatchClause {CatchClause}
CatchClause:
  catch ( CatchFormalParameter ) Block
CatchFormalParameter:
  {VariableModifier} CatchType VariableDeclaratorId
CatchType:
  UnannClassType {| ClassType}
Finally:
  finally Block
  
VariableModifier:
  Annotation 
  final
VariableDeclaratorId:
  Identifier [Dims]
Dims:
  {Annotation} [ ] {{Annotation} [ ]}
  
TryWithResourcesStatement:
  try ResourceSpecification Block [Catches] [Finally]
ResourceSpecification:
  ( ResourceList [;] )
ResourceList:
  Resource {; Resource}
Resource:
  {VariableModifier} LocalVariableType Identifier = Expression 
  VariableAccess
VariableAccess:
  ExpressionName 
  FieldAccess
  
VariableModifier:
  Annotation 
  final
LocalVariableType:
  UnannType 
  var

