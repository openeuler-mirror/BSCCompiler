diff --git a/shared/include/ast.h b/shared/include/ast.h
index dd30f43..a502fd8 100644
--- a/shared/include/ast.h
+++ b/shared/include/ast.h
@@ -1271,7 +1271,6 @@ class ASTBuilder;
 
 class ASTTree {
 public:
-  TreePool    mTreePool;
   TreeNode   *mRootNode;
 
 private:
diff --git a/shared/include/ast_builder.h b/shared/include/ast_builder.h
index 491ab34..4e1f0b0 100644
--- a/shared/include/ast_builder.h
+++ b/shared/include/ast_builder.h
@@ -18,6 +18,7 @@
 
 #include "ast.h"
 #include "ast_mempool.h"
+#include <iostream>
 
 namespace maplefe {
 
@@ -59,14 +60,12 @@ public:
   // information for a single action
   unsigned                mActionId;
   std::vector<Param>      mParams;
-  TreePool               *mTreePool;
 
 public:
-  ASTBuilder() : mTreePool(NULL), mTrace(false) {}
+  ASTBuilder() : mTrace(false) {}
   ~ASTBuilder() {}
 
   void SetTrace(bool b) {mTrace = b;}
-  void SetTreePool(TreePool *p) {mTreePool = p;}
 
   void AddParam(Param p) {mParams.push_back(p);}
   void ClearParams() {mParams.clear();}
diff --git a/shared/include/ast_mempool.h b/shared/include/ast_mempool.h
index f9a5c32..62db391 100644
--- a/shared/include/ast_mempool.h
+++ b/shared/include/ast_mempool.h
@@ -54,5 +54,6 @@ public:
                     //     is out of the control of mMP.
 };
 
+extern TreePool gTreePool;
 }
 #endif
diff --git a/shared/include/ast_type.h b/shared/include/ast_type.h
index 6e59109..bfe95e4 100644
--- a/shared/include/ast_type.h
+++ b/shared/include/ast_type.h
@@ -131,7 +131,7 @@ public:
 
 class PrimTypePool {
 private:
-  TreePool                   mTreePool;
+  //TreePool                   mTreePool;
   SmallVector<PrimTypeNode*> mTypes;
 
   void Init();
diff --git a/shared/src/ast.cpp b/shared/src/ast.cpp
index 8e74c28..872f732 100644
--- a/shared/src/ast.cpp
+++ b/shared/src/ast.cpp
@@ -59,7 +59,6 @@ static const char* GetOperatorName(OprId opr) {
 
 ASTTree::ASTTree() {
   mRootNode = NULL;
-  gASTBuilder.SetTreePool(&mTreePool);
 }
 
 ASTTree::~ASTTree() {
@@ -227,7 +226,7 @@ TreeNode* ASTTree::Manipulate(AppealNode *appeal_node) {
 TreeNode* ASTTree::Manipulate2Cast(TreeNode *child_a, TreeNode *child_b) {
   if (child_a->IsParenthesis()) {
     ParenthesisNode *type = (ParenthesisNode*)child_a;
-    CastNode *n = (CastNode*)mTreePool.NewTreeNode(sizeof(CastNode));
+    CastNode *n = (CastNode*)gTreePool.NewTreeNode(sizeof(CastNode));
     new (n) CastNode();
     n->SetDestType(type->GetExpr());
     n->SetExpr(child_b);
@@ -257,7 +256,7 @@ void ASTTree::Dump(unsigned indent) {
 }
 
 TreeNode* ASTTree::BuildBinaryOperation(TreeNode *childA, TreeNode *childB, OprId id) {
-  BinOperatorNode *n = (BinOperatorNode*)mTreePool.NewTreeNode(sizeof(BinOperatorNode));
+  BinOperatorNode *n = (BinOperatorNode*)gTreePool.NewTreeNode(sizeof(BinOperatorNode));
   new (n) BinOperatorNode(id);
   n->mOpndA = childA;
   n->mOpndB = childB;
@@ -267,7 +266,7 @@ TreeNode* ASTTree::BuildBinaryOperation(TreeNode *childA, TreeNode *childB, OprI
 }
 
 TreeNode* ASTTree::BuildPassNode() {
-  PassNode *n = (PassNode*)mTreePool.NewTreeNode(sizeof(PassNode));
+  PassNode *n = (PassNode*)gTreePool.NewTreeNode(sizeof(PassNode));
   new (n) PassNode();
   return n;
 }
diff --git a/shared/src/ast_builder.cpp b/shared/src/ast_builder.cpp
index 9319e84..2234b36 100644
--- a/shared/src/ast_builder.cpp
+++ b/shared/src/ast_builder.cpp
@@ -51,13 +51,13 @@ TreeNode* ASTBuilder::Build() {
 TreeNode* ASTBuilder::CreateTokenTreeNode(const Token *token) {
   unsigned size = 0;
   if (token->IsIdentifier()) {
-    IdentifierNode *n = (IdentifierNode*)mTreePool->NewTreeNode(sizeof(IdentifierNode));
+    IdentifierNode *n = (IdentifierNode*)gTreePool.NewTreeNode(sizeof(IdentifierNode));
     new (n) IdentifierNode(token->GetName());
     mLastTreeNode = n;
     return n;
   } else if (token->IsLiteral()) {
     LitData data = token->GetLitData();
-    LiteralNode *n = (LiteralNode*)mTreePool->NewTreeNode(sizeof(LiteralNode));
+    LiteralNode *n = (LiteralNode*)gTreePool.NewTreeNode(sizeof(LiteralNode));
     new (n) LiteralNode(data);
     mLastTreeNode = n;
     return n;
@@ -79,14 +79,14 @@ TreeNode* ASTBuilder::CreateTokenTreeNode(const Token *token) {
     if ((strlen(token->GetName()) == 4) && !strncmp(token->GetName(), "this", 4)) {
       LitData data;
       data.mType = LT_ThisLiteral;
-      LiteralNode *n = (LiteralNode*)mTreePool->NewTreeNode(sizeof(LiteralNode));
+      LiteralNode *n = (LiteralNode*)gTreePool.NewTreeNode(sizeof(LiteralNode));
       new (n) LiteralNode(data);
       mLastTreeNode = n;
       return n;
     } else if ((strlen(token->GetName()) == 5) && !strncmp(token->GetName(), "super", 5)) {
       LitData data;
       data.mType = LT_SuperLiteral;
-      LiteralNode *n = (LiteralNode*)mTreePool->NewTreeNode(sizeof(LiteralNode));
+      LiteralNode *n = (LiteralNode*)gTreePool.NewTreeNode(sizeof(LiteralNode));
       new (n) LiteralNode(data);
       mLastTreeNode = n;
       return n;
@@ -154,7 +154,7 @@ TreeNode* ASTBuilder::BuildPackageName() {
   MASSERT(!gModule.mPackage);
   MASSERT(mLastTreeNode->IsField() || mLastTreeNode->IsIdentifier());
 
-  PackageNode *n = (PackageNode*)mTreePool->NewTreeNode(sizeof(PackageNode));
+  PackageNode *n = (PackageNode*)gTreePool.NewTreeNode(sizeof(PackageNode));
   new (n) PackageNode();
   n->SetPackage(mLastTreeNode);
 
@@ -165,7 +165,7 @@ TreeNode* ASTBuilder::BuildPackageName() {
 }
 
 TreeNode* ASTBuilder::BuildSingleTypeImport() {
-  ImportNode *n = (ImportNode*)mTreePool->NewTreeNode(sizeof(ImportNode));
+  ImportNode *n = (ImportNode*)gTreePool.NewTreeNode(sizeof(ImportNode));
   new (n) ImportNode();
   n->SetImportSingle();
   n->SetImportType();
@@ -182,7 +182,7 @@ TreeNode* ASTBuilder::BuildSingleTypeImport() {
 }
 
 TreeNode* ASTBuilder::BuildAllTypeImport() {
-  ImportNode *n = (ImportNode*)mTreePool->NewTreeNode(sizeof(ImportNode));
+  ImportNode *n = (ImportNode*)gTreePool.NewTreeNode(sizeof(ImportNode));
   new (n) ImportNode();
   n->SetImportAll();
   n->SetImportType();
@@ -200,7 +200,7 @@ TreeNode* ASTBuilder::BuildAllTypeImport() {
 
 // It takes the mLastTreeNode as parameter
 TreeNode* ASTBuilder::BuildSingleStaticImport() {
-  ImportNode *n = (ImportNode*)mTreePool->NewTreeNode(sizeof(ImportNode));
+  ImportNode *n = (ImportNode*)gTreePool.NewTreeNode(sizeof(ImportNode));
   new (n) ImportNode();
   n->SetImportSingle();
   n->SetImportType();
@@ -234,7 +234,7 @@ TreeNode* ASTBuilder::BuildParenthesis() {
   MASSERT(!p.mIsEmpty && p.mIsTreeNode);
   expr = p.mData.mTreeNode;
 
-  ParenthesisNode *n = (ParenthesisNode*)mTreePool->NewTreeNode(sizeof(ParenthesisNode));
+  ParenthesisNode *n = (ParenthesisNode*)gTreePool.NewTreeNode(sizeof(ParenthesisNode));
   new (n) ParenthesisNode();
   n->SetExpr(expr);
 
@@ -256,7 +256,7 @@ TreeNode* ASTBuilder::BuildCast() {
   TreeNode *desttype = p_a.mData.mTreeNode;
   TreeNode *expr = p_b.mData.mTreeNode;
 
-  CastNode *n = (CastNode*)mTreePool->NewTreeNode(sizeof(CastNode));
+  CastNode *n = (CastNode*)gTreePool.NewTreeNode(sizeof(CastNode));
   new (n) CastNode();
 
   n->SetDestType(desttype);
@@ -281,7 +281,7 @@ TreeNode* ASTBuilder::BuildUnaryOperation() {
   MASSERT(token->IsOperator() && "First param of Unary Operator is not an operator token?");
 
   // create the sub tree
-  UnaOperatorNode *n = (UnaOperatorNode*)mTreePool->NewTreeNode(sizeof(UnaOperatorNode));
+  UnaOperatorNode *n = (UnaOperatorNode*)gTreePool.NewTreeNode(sizeof(UnaOperatorNode));
   new (n) UnaOperatorNode(token->GetOprId());
 
   // set 1st param
@@ -322,7 +322,7 @@ TreeNode* ASTBuilder::BuildBinaryOperation() {
   MASSERT(token->IsOperator() && "Second param of Binary Operator is not an operator token?");
 
   // create the sub tree
-  BinOperatorNode *n = (BinOperatorNode*)mTreePool->NewTreeNode(sizeof(BinOperatorNode));
+  BinOperatorNode *n = (BinOperatorNode*)gTreePool.NewTreeNode(sizeof(BinOperatorNode));
   new (n) BinOperatorNode(token->GetOprId());
   mLastTreeNode = n;
 
@@ -359,7 +359,7 @@ TreeNode* ASTBuilder::BuildReturn() {
   if (mTrace)
     std::cout << "In BuildReturn" << std::endl;
 
-  ReturnNode *result = (ReturnNode*)mTreePool->NewTreeNode(sizeof(ReturnNode));
+  ReturnNode *result = (ReturnNode*)gTreePool.NewTreeNode(sizeof(ReturnNode));
   new (result) ReturnNode();
 
   Param p_result = mParams[0];
@@ -379,7 +379,7 @@ TreeNode* ASTBuilder::BuildCondBranch() {
   if (mTrace)
     std::cout << "In BuildCondBranch" << std::endl;
 
-  CondBranchNode *cond_branch = (CondBranchNode*)mTreePool->NewTreeNode(sizeof(CondBranchNode));
+  CondBranchNode *cond_branch = (CondBranchNode*)gTreePool.NewTreeNode(sizeof(CondBranchNode));
   new (cond_branch) CondBranchNode();
 
   Param p_cond = mParams[0];
@@ -461,7 +461,7 @@ TreeNode* ASTBuilder::BuildBreak() {
   if (mTrace)
     std::cout << "In BuildBreak " << std::endl;
 
-  BreakNode *break_node = (BreakNode*)mTreePool->NewTreeNode(sizeof(BreakNode));
+  BreakNode *break_node = (BreakNode*)gTreePool.NewTreeNode(sizeof(BreakNode));
   new (break_node) BreakNode();
 
   MASSERT(mParams.size() == 1 && "BuildBreak has NO 1 params?");
@@ -486,7 +486,7 @@ TreeNode* ASTBuilder::BuildForLoop() {
   if (mTrace)
     std::cout << "In BuildForLoop " << std::endl;
 
-  ForLoopNode *for_loop = (ForLoopNode*)mTreePool->NewTreeNode(sizeof(ForLoopNode));
+  ForLoopNode *for_loop = (ForLoopNode*)gTreePool.NewTreeNode(sizeof(ForLoopNode));
   new (for_loop) ForLoopNode();
 
   MASSERT(mParams.size() == 4 && "BuildForLoop has NO 4 params?");
@@ -539,7 +539,7 @@ TreeNode* ASTBuilder::BuildWhileLoop() {
   if (mTrace)
     std::cout << "In BuildWhileLoop " << std::endl;
 
-  WhileLoopNode *while_loop = (WhileLoopNode*)mTreePool->NewTreeNode(sizeof(WhileLoopNode));
+  WhileLoopNode *while_loop = (WhileLoopNode*)gTreePool.NewTreeNode(sizeof(WhileLoopNode));
   new (while_loop) WhileLoopNode();
 
   MASSERT(mParams.size() == 2 && "BuildWhileLoop has NO 2 params?");
@@ -566,7 +566,7 @@ TreeNode* ASTBuilder::BuildDoLoop() {
   if (mTrace)
     std::cout << "In BuildDoLoop " << std::endl;
 
-  DoLoopNode *do_loop = (DoLoopNode*)mTreePool->NewTreeNode(sizeof(DoLoopNode));
+  DoLoopNode *do_loop = (DoLoopNode*)gTreePool.NewTreeNode(sizeof(DoLoopNode));
   new (do_loop) DoLoopNode();
 
   MASSERT(mParams.size() == 2 && "BuildDoLoop has NO 2 params?");
@@ -595,7 +595,7 @@ TreeNode* ASTBuilder::BuildSwitchLabel() {
     std::cout << "In BuildSwitchLabel " << std::endl;
 
   SwitchLabelNode *label =
-    (SwitchLabelNode*)mTreePool->NewTreeNode(sizeof(SwitchLabelNode));
+    (SwitchLabelNode*)gTreePool.NewTreeNode(sizeof(SwitchLabelNode));
   new (label) SwitchLabelNode();
 
   MASSERT(mParams.size() == 1 && "BuildSwitchLabel has NO 1 params?");
@@ -615,7 +615,7 @@ TreeNode* ASTBuilder::BuildDefaultSwitchLabel() {
   if (mTrace)
     std::cout << "In BuildDefaultSwitchLabel " << std::endl;
   SwitchLabelNode *label =
-    (SwitchLabelNode*)mTreePool->NewTreeNode(sizeof(SwitchLabelNode));
+    (SwitchLabelNode*)gTreePool.NewTreeNode(sizeof(SwitchLabelNode));
   new (label) SwitchLabelNode();
   label->SetIsDefault(true);
   mLastTreeNode = label;
@@ -632,7 +632,7 @@ TreeNode* ASTBuilder::BuildOneCase() {
     std::cout << "In BuildOneCase " << std::endl;
 
   SwitchCaseNode *case_node =
-    (SwitchCaseNode*)mTreePool->NewTreeNode(sizeof(SwitchCaseNode));
+    (SwitchCaseNode*)gTreePool.NewTreeNode(sizeof(SwitchCaseNode));
   new (case_node) SwitchCaseNode();
 
   MASSERT(mParams.size() == 2 && "BuildOneCase has NO 1 params?");
@@ -655,7 +655,7 @@ TreeNode* ASTBuilder::BuildOneCase() {
 
 SwitchCaseNode* ASTBuilder::SwitchLabelToCase(SwitchLabelNode *label) {
   SwitchCaseNode *case_node =
-    (SwitchCaseNode*)mTreePool->NewTreeNode(sizeof(SwitchCaseNode));
+    (SwitchCaseNode*)gTreePool.NewTreeNode(sizeof(SwitchCaseNode));
   new (case_node) SwitchCaseNode();
   case_node->AddLabel(label);
   return case_node;
@@ -703,7 +703,7 @@ TreeNode* ASTBuilder::BuildSwitch() {
     std::cout << "In BuildSwitch " << std::endl;
 
   SwitchNode *switch_node =
-    (SwitchNode*)mTreePool->NewTreeNode(sizeof(SwitchNode));
+    (SwitchNode*)gTreePool.NewTreeNode(sizeof(SwitchNode));
   new (switch_node) SwitchNode();
 
   MASSERT(mParams.size() == 2 && "BuildSwitch has NO 1 params?");
@@ -796,7 +796,7 @@ TreeNode* ASTBuilder::BuildDecl() {
     var = p_name.mData.mTreeNode;
   }
 
-  DeclNode *decl = decl = (DeclNode*)mTreePool->NewTreeNode(sizeof(DeclNode));
+  DeclNode *decl = decl = (DeclNode*)gTreePool.NewTreeNode(sizeof(DeclNode));
   new (decl) DeclNode(var);
 
   mLastTreeNode = decl;
@@ -838,7 +838,7 @@ TreeNode* ASTBuilder::BuildStruct() {
   TreeNode *name = p_name.mData.mTreeNode;
   MASSERT(name->IsIdentifier());
 
-  StructNode *struct_node = (StructNode*)mTreePool->NewTreeNode(sizeof(StructNode));
+  StructNode *struct_node = (StructNode*)gTreePool.NewTreeNode(sizeof(StructNode));
   new (struct_node) StructNode((IdentifierNode*)name);
 
   mLastTreeNode = struct_node;
@@ -893,7 +893,7 @@ TreeNode* ASTBuilder::BuildFieldLiteral() {
   MASSERT(p_value.mIsTreeNode);
   TreeNode *value = p_value.mData.mTreeNode;
 
-  FieldLiteralNode *field_literal = (FieldLiteralNode*)mTreePool->NewTreeNode(sizeof(FieldLiteralNode));
+  FieldLiteralNode *field_literal = (FieldLiteralNode*)gTreePool.NewTreeNode(sizeof(FieldLiteralNode));
   new (field_literal) FieldLiteralNode();
   field_literal->SetFieldName((IdentifierNode*)field);
   field_literal->SetLiteral(value);
@@ -912,7 +912,7 @@ TreeNode* ASTBuilder::BuildStructLiteral() {
   MASSERT(p_literal.mIsTreeNode);
   TreeNode *literal = p_literal.mData.mTreeNode;
 
-  StructLiteralNode *struct_literal = (StructLiteralNode*)mTreePool->NewTreeNode(sizeof(StructLiteralNode));
+  StructLiteralNode *struct_literal = (StructLiteralNode*)gTreePool.NewTreeNode(sizeof(StructLiteralNode));
   new (struct_literal) StructLiteralNode();
 
   if (literal->IsFieldLiteral()) {
@@ -965,7 +965,7 @@ TreeNode* ASTBuilder::BuildField() {
       TreeNode *child = pass->GetChild(i);
       MASSERT(child->IsIdentifier());
 
-      field = (FieldNode*)mTreePool->NewTreeNode(sizeof(FieldNode));
+      field = (FieldNode*)gTreePool.NewTreeNode(sizeof(FieldNode));
       new (field) FieldNode();
       field->SetUpper(upper);
       field->SetField((IdentifierNode*)child);
@@ -974,7 +974,7 @@ TreeNode* ASTBuilder::BuildField() {
     }
   } else {
     MASSERT(node_b->IsIdentifier());
-    field = (FieldNode*)mTreePool->NewTreeNode(sizeof(FieldNode));
+    field = (FieldNode*)gTreePool.NewTreeNode(sizeof(FieldNode));
     new (field) FieldNode();
     field->SetUpper(node_a);
     field->SetField((IdentifierNode*)node_b);
@@ -1017,7 +1017,7 @@ TreeNode* ASTBuilder::BuildVarList() {
     node_ret->Merge(node_a);
   } else {
     // both nodes are not VarListNode
-    node_ret = (VarListNode*)mTreePool->NewTreeNode(sizeof(VarListNode));
+    node_ret = (VarListNode*)gTreePool.NewTreeNode(sizeof(VarListNode));
     new (node_ret) VarListNode();
     if (node_a)
       node_ret->Merge(node_a);
@@ -1155,7 +1155,7 @@ TreeNode* ASTBuilder::BuildClass() {
     MERROR("The class name should be an indentifier node. Not?");
   IdentifierNode *in = (IdentifierNode*)node_name;
 
-  ClassNode *node_class = (ClassNode*)mTreePool->NewTreeNode(sizeof(ClassNode));
+  ClassNode *node_class = (ClassNode*)gTreePool.NewTreeNode(sizeof(ClassNode));
   new (node_class) ClassNode();
   node_class->SetName(in->GetName());
 
@@ -1174,7 +1174,7 @@ TreeNode* ASTBuilder::BuildBlock() {
   if (mTrace)
     std::cout << "In BuildBlock" << std::endl;
 
-  BlockNode *block = (BlockNode*)mTreePool->NewTreeNode(sizeof(BlockNode));
+  BlockNode *block = (BlockNode*)gTreePool.NewTreeNode(sizeof(BlockNode));
   new (block) BlockNode();
 
   Param p_subtree = mParams[0];
@@ -1260,7 +1260,7 @@ TreeNode* ASTBuilder::CvtToBlock(TreeNode *tnode) {
     return tnode;
   }
 
-  BlockNode *block = (BlockNode*)mTreePool->NewTreeNode(sizeof(BlockNode));
+  BlockNode *block = (BlockNode*)gTreePool.NewTreeNode(sizeof(BlockNode));
   new (block) BlockNode();
   block->AddChild(tnode);
   return block;
@@ -1344,7 +1344,7 @@ TreeNode* ASTBuilder::BuildAnnotationType() {
     MERROR("The annotation type name should be an indentifier node. Not?");
   IdentifierNode *in = (IdentifierNode*)node_name;
 
-  AnnotationTypeNode *annon_type = (AnnotationTypeNode*)mTreePool->NewTreeNode(sizeof(AnnotationTypeNode));
+  AnnotationTypeNode *annon_type = (AnnotationTypeNode*)gTreePool.NewTreeNode(sizeof(AnnotationTypeNode));
   new (annon_type) AnnotationTypeNode();
   annon_type->SetId(in);
 
@@ -1372,7 +1372,7 @@ TreeNode* ASTBuilder::BuildAnnotation() {
   if (!iden->IsIdentifier())
     MERROR("The annotation name is NOT an indentifier node.");
 
-  AnnotationNode *annot = (AnnotationNode*)mTreePool->NewTreeNode(sizeof(AnnotationNode));
+  AnnotationNode *annot = (AnnotationNode*)gTreePool.NewTreeNode(sizeof(AnnotationNode));
   new (annot) AnnotationNode();
   annot->SetId((IdentifierNode*)iden);
 
@@ -1394,7 +1394,7 @@ TreeNode* ASTBuilder::BuildInterface() {
     MERROR("The name is NOT an indentifier node.");
   IdentifierNode *in = (IdentifierNode*)node_name;
 
-  InterfaceNode *interf = (InterfaceNode*)mTreePool->NewTreeNode(sizeof(InterfaceNode));
+  InterfaceNode *interf = (InterfaceNode*)gTreePool.NewTreeNode(sizeof(InterfaceNode));
   new (interf) InterfaceNode();
   interf->SetName(in->GetName());
 
@@ -1427,7 +1427,7 @@ TreeNode* ASTBuilder::BuildDim() {
   if (mTrace)
     std::cout << "In BuildDim" << std::endl;
 
-  DimensionNode *dim = (DimensionNode*)mTreePool->NewTreeNode(sizeof(DimensionNode));
+  DimensionNode *dim = (DimensionNode*)gTreePool.NewTreeNode(sizeof(DimensionNode));
   new (dim) DimensionNode();
   dim->AddDim();
 
@@ -1498,7 +1498,7 @@ TreeNode* ASTBuilder::AddDimsTo() {
       mLastTreeNode = node_a;
     } else if (node_a->IsPrimType()) {
       PrimTypeNode *pt = (PrimTypeNode*)node_a;
-      PrimArrayTypeNode *pat = (PrimArrayTypeNode*)mTreePool->NewTreeNode(sizeof(PrimArrayTypeNode));
+      PrimArrayTypeNode *pat = (PrimArrayTypeNode*)gTreePool.NewTreeNode(sizeof(PrimArrayTypeNode));
       new (pat) PrimArrayTypeNode();
       pat->SetPrim(pt);
       pat->SetDims(dim);
@@ -1582,7 +1582,7 @@ TreeNode* ASTBuilder::BuildNewOperation() {
   if (mTrace)
     std::cout << "In BuildNewOperation " << std::endl;
 
-  NewNode *new_node = (NewNode*)mTreePool->NewTreeNode(sizeof(NewNode));
+  NewNode *new_node = (NewNode*)gTreePool.NewTreeNode(sizeof(NewNode));
   new (new_node) NewNode();
 
   MASSERT(mParams.size() == 3 && "BuildNewOperation has NO 3 params?");
@@ -1625,7 +1625,7 @@ TreeNode* ASTBuilder::BuildAssert() {
   if (mTrace)
     std::cout << "In BuildAssert " << std::endl;
 
-  AssertNode *assert_node = (AssertNode*)mTreePool->NewTreeNode(sizeof(AssertNode));
+  AssertNode *assert_node = (AssertNode*)gTreePool.NewTreeNode(sizeof(AssertNode));
   new (assert_node) AssertNode();
 
   MASSERT(mParams.size() >= 1 && "BuildAssert has NO expression?");
@@ -1661,7 +1661,7 @@ TreeNode* ASTBuilder::BuildCall() {
   if (mTrace)
     std::cout << "In BuildCall" << std::endl;
 
-  CallNode *call = (CallNode*)mTreePool->NewTreeNode(sizeof(CallNode));
+  CallNode *call = (CallNode*)gTreePool.NewTreeNode(sizeof(CallNode));
   new (call) CallNode();
 
   // The default is having no param.
@@ -1771,7 +1771,7 @@ TreeNode* ASTBuilder::BuildExprList() {
     node_ret->Merge(node_a);
   } else {
     // both nodes are not ExprListNode
-    node_ret = (ExprListNode*)mTreePool->NewTreeNode(sizeof(ExprListNode));
+    node_ret = (ExprListNode*)gTreePool.NewTreeNode(sizeof(ExprListNode));
     new (node_ret) ExprListNode();
     if (node_a)
       node_ret->Merge(node_a);
@@ -1823,7 +1823,7 @@ TreeNode* ASTBuilder::BuildFunction() {
     IdentifierNode *in = (IdentifierNode*)node_name;
   }
 
-  FunctionNode *function = (FunctionNode*)mTreePool->NewTreeNode(sizeof(FunctionNode));
+  FunctionNode *function = (FunctionNode*)gTreePool.NewTreeNode(sizeof(FunctionNode));
   new (function) FunctionNode();
 
   if (node_name)
@@ -1937,7 +1937,7 @@ TreeNode* ASTBuilder::AddThrowsTo() {
     TreeNode *tree_node = p_body.mData.mTreeNode;
     if (tree_node->IsIdentifier()) {
       IdentifierNode *id = (IdentifierNode*)tree_node;
-      ExceptionNode *exception = (ExceptionNode*)mTreePool->NewTreeNode(sizeof(ExceptionNode));
+      ExceptionNode *exception = (ExceptionNode*)gTreePool.NewTreeNode(sizeof(ExceptionNode));
       new (exception) ExceptionNode(id);
       func->AddThrow(exception);
     } else if (tree_node->IsPass()) {
@@ -1946,7 +1946,7 @@ TreeNode* ASTBuilder::AddThrowsTo() {
         TreeNode *child = pass->GetChild(i);
         if (child->IsIdentifier()) {
           IdentifierNode *id = (IdentifierNode*)child;
-          ExceptionNode *exception = (ExceptionNode*)mTreePool->NewTreeNode(sizeof(ExceptionNode));
+          ExceptionNode *exception = (ExceptionNode*)gTreePool.NewTreeNode(sizeof(ExceptionNode));
           new (exception) ExceptionNode(id);
           func->AddThrow(exception);
         } else {
@@ -1998,7 +1998,7 @@ TreeNode* ASTBuilder::BuildUserType() {
     MERROR("The Identifier of user type is not an identifier.");
   IdentifierNode *id = (IdentifierNode*)node;
 
-  UserTypeNode *user_type = (UserTypeNode*)mTreePool->NewTreeNode(sizeof(UserTypeNode));
+  UserTypeNode *user_type = (UserTypeNode*)gTreePool.NewTreeNode(sizeof(UserTypeNode));
   new (user_type) UserTypeNode(id);
   mLastTreeNode = user_type;
   return mLastTreeNode;
@@ -2061,7 +2061,7 @@ TreeNode* ASTBuilder::BuildLambda() {
     }
   }
 
-  LambdaNode *lambda = (LambdaNode*)mTreePool->NewTreeNode(sizeof(LambdaNode));
+  LambdaNode *lambda = (LambdaNode*)gTreePool.NewTreeNode(sizeof(LambdaNode));
   new (lambda) LambdaNode();
 
   if (params_node) {
@@ -2102,7 +2102,7 @@ TreeNode* ASTBuilder::BuildInstanceOf() {
   MASSERT(r_param.mIsTreeNode);
   TreeNode *right = r_param.mData.mTreeNode;
 
-  InstanceOfNode *instanceof = (InstanceOfNode*)mTreePool->NewTreeNode(sizeof(InstanceOfNode));
+  InstanceOfNode *instanceof = (InstanceOfNode*)gTreePool.NewTreeNode(sizeof(InstanceOfNode));
   new (instanceof) InstanceOfNode();
 
   instanceof->SetLeft(left);
diff --git a/shared/src/ast_mempool.cpp b/shared/src/ast_mempool.cpp
index 1c9cf52..0938534 100644
--- a/shared/src/ast_mempool.cpp
+++ b/shared/src/ast_mempool.cpp
@@ -17,6 +17,8 @@
 
 namespace maplefe {
 
+TreePool gTreePool;
+
 TreePool::~TreePool() {
   Release();
 }
diff --git a/shared/src/ast_type.cpp b/shared/src/ast_type.cpp
index 13cfb0d..9d958d6 100644
--- a/shared/src/ast_type.cpp
+++ b/shared/src/ast_type.cpp
@@ -119,7 +119,7 @@ PrimTypePool gPrimTypePool;
 
 PrimTypePool::PrimTypePool() {
   // 1024 per block could be better.
-  mTreePool.SetBlockSize(1024);
+  //mTreePool.SetBlockSize(1024);
   Init();
 }
 
@@ -129,7 +129,7 @@ PrimTypePool::~PrimTypePool() {
 
 void PrimTypePool::Init() {
   for (unsigned i = 0; i < TypeKeywordTableSize; i++) {
-    PrimTypeNode *n = (PrimTypeNode*)mTreePool.NewTreeNode(sizeof(PrimTypeNode));
+    PrimTypeNode *n = (PrimTypeNode*)gTreePool.NewTreeNode(sizeof(PrimTypeNode));
     new (n) PrimTypeNode();
     n->SetPrimType((TypeId)TypeKeywordTable[i].mId);
     mTypes.PushBack(n);
