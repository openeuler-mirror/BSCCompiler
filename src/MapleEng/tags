!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOCA_MEMMAX	lmbc/include/mfunction.h	30;"	d
AddGlobalVar	lmbc/src/init.cpp	/^inline void LmbcMod::AddGlobalVar(MIRSymbol &sym, VarInf *pInf) {$/;"	f	class:maple::LmbcMod
AddPUStaticVar	lmbc/src/init.cpp	/^inline void LmbcMod::AddPUStaticVar(PUIdx puIdx, MIRSymbol &sym, VarInf *pInf) {$/;"	f	class:maple::LmbcMod
AlignOffset	lmbc/src/init.cpp	/^inline void AlignOffset(uint32 &offset, uint32 align) {$/;"	f	namespace:maple
Alloca	lmbc/src/mfunction.cpp	/^uint8 *MFunction::Alloca(uint32 sz) {$/;"	f	class:maple::MFunction
CASE_TOPTYP	lmbc/src/invoke_method.cpp	122;"	d	file:
CalcGlobalAndStaticVarSize	lmbc/src/init.cpp	/^void LmbcMod::CalcGlobalAndStaticVarSize() {$/;"	f	class:maple::LmbcMod
CallExtFuncDirect	lmbc/src/mfunction.cpp	/^void MFunction::CallExtFuncDirect(CallNode* call) {$/;"	f	class:maple::MFunction
CallExtFuncIndirect	lmbc/src/mfunction.cpp	/^void MFunction::CallExtFuncIndirect(IcallNode *icallproto, void* fp) {$/;"	f	class:maple::MFunction
CallIntrinsic	lmbc/src/mfunction.cpp	/^void MFunction::CallIntrinsic(IntrinsiccallNode &intrn) {$/;"	f	class:maple::MFunction
CallMapleFuncDirect	lmbc/src/mfunction.cpp	/^void MFunction::CallMapleFuncDirect(CallNode *call) {$/;"	f	class:maple::MFunction
CallMapleFuncIndirect	lmbc/src/mfunction.cpp	/^void MFunction::CallMapleFuncIndirect(IcallNode *icall, LmbcFunc *callInfo) {$/;"	f	class:maple::MFunction
CallVaArgFunc	lmbc/src/mfunction.cpp	/^void MFunction::CallVaArgFunc(int numArgs, LmbcFunc *callInfo) {$/;"	f	class:maple::MFunction
CallWithFFI	lmbc/src/mfunction.cpp	/^void MFunction::CallWithFFI(PrimType ret_ptyp, ffi_fp_t fp) {$/;"	f	class:maple::MFunction
CheckFlexArrayMember	lmbc/src/init.cpp	/^uint32 CheckFlexArrayMember(MIRSymbol &sym, MIRType &ty) {$/;"	f	namespace:maple
CheckUnamedBitField	lmbc/src/init.cpp	/^void LmbcMod::CheckUnamedBitField(MIRStructType &stType, uint32 &prevInitFd, uint32 curFd, int32 &allocdBits) {$/;"	f	class:maple::LmbcMod
CompareDouble	lmbc/src/invoke_method.cpp	/^inline bool CompareDouble(double x, double y, double epsilon = 0.0000000000000001f) {$/;"	f	namespace:maple
CompareFloat	lmbc/src/invoke_method.cpp	/^inline bool CompareFloat(float x, float y, float epsilon = 0.00000001f) {$/;"	f	namespace:maple
CvtType	lmbc/src/invoke_method.cpp	/^MValue CvtType(MValue &opnd, PrimType toPtyp, PrimType fromPtyp) {$/;"	f	namespace:maple
EXPANDFFI1	lmbc/src/mfunction.cpp	278;"	d	file:
EXPANDFFI2	lmbc/src/mfunction.cpp	279;"	d	file:
EXPRBININTOP	lmbc/include/mexpression.h	103;"	d
EXPRBININTOPUNSIGNED	lmbc/include/mexpression.h	122;"	d
EXPRBINOP	lmbc/include/mexpression.h	21;"	d
EXPRCOMPOP	lmbc/include/mexpression.h	40;"	d
EXPRCOMPOPNOFLOAT	lmbc/include/mexpression.h	63;"	d
EXPRMAXMINOP	lmbc/include/mexpression.h	165;"	d
EXPRREMOP	lmbc/include/mexpression.h	186;"	d
EXPRSELECTOP	lmbc/include/mexpression.h	81;"	d
EXPRUNROP	lmbc/include/mexpression.h	214;"	d
EvalExpr	lmbc/src/invoke_method.cpp	/^MValue EvalExpr(MFunction& func, BaseNode* expr, ParmInf *parm) {$/;"	f	namespace:maple
FFITYPE_Derived	lmbc/include/mprimtype.h	112;"	d
FFITYPE_Invalid	lmbc/include/mprimtype.h	70;"	d
FFITYPE_a32	lmbc/include/mprimtype.h	83;"	d
FFITYPE_a64	lmbc/include/mprimtype.h	84;"	d
FFITYPE_agg	lmbc/include/mprimtype.h	104;"	d
FFITYPE_c128	lmbc/include/mprimtype.h	89;"	d
FFITYPE_c64	lmbc/include/mprimtype.h	88;"	d
FFITYPE_constStr	lmbc/include/mprimtype.h	102;"	d
FFITYPE_dynany	lmbc/include/mprimtype.h	92;"	d
FFITYPE_dynbool	lmbc/include/mprimtype.h	95;"	d
FFITYPE_dynf32	lmbc/include/mprimtype.h	100;"	d
FFITYPE_dynf64	lmbc/include/mprimtype.h	99;"	d
FFITYPE_dyni32	lmbc/include/mprimtype.h	96;"	d
FFITYPE_dynnone	lmbc/include/mprimtype.h	101;"	d
FFITYPE_dynnull	lmbc/include/mprimtype.h	94;"	d
FFITYPE_dynobj	lmbc/include/mprimtype.h	98;"	d
FFITYPE_dynstr	lmbc/include/mprimtype.h	97;"	d
FFITYPE_dynundef	lmbc/include/mprimtype.h	93;"	d
FFITYPE_f128	lmbc/include/mprimtype.h	87;"	d
FFITYPE_f32	lmbc/include/mprimtype.h	85;"	d
FFITYPE_f64	lmbc/include/mprimtype.h	86;"	d
FFITYPE_gen	lmbc/include/mprimtype.h	103;"	d
FFITYPE_i128	lmbc/include/mprimtype.h	113;"	d
FFITYPE_i16	lmbc/include/mprimtype.h	73;"	d
FFITYPE_i32	lmbc/include/mprimtype.h	74;"	d
FFITYPE_i64	lmbc/include/mprimtype.h	75;"	d
FFITYPE_i8	lmbc/include/mprimtype.h	72;"	d
FFITYPE_ptr	lmbc/include/mprimtype.h	81;"	d
FFITYPE_ref	lmbc/include/mprimtype.h	82;"	d
FFITYPE_reservedpty1	lmbc/include/mprimtype.h	126;"	d
FFITYPE_reservedpty10	lmbc/include/mprimtype.h	135;"	d
FFITYPE_reservedpty2	lmbc/include/mprimtype.h	127;"	d
FFITYPE_reservedpty3	lmbc/include/mprimtype.h	128;"	d
FFITYPE_reservedpty4	lmbc/include/mprimtype.h	129;"	d
FFITYPE_reservedpty5	lmbc/include/mprimtype.h	130;"	d
FFITYPE_reservedpty6	lmbc/include/mprimtype.h	131;"	d
FFITYPE_reservedpty7	lmbc/include/mprimtype.h	132;"	d
FFITYPE_reservedpty8	lmbc/include/mprimtype.h	133;"	d
FFITYPE_reservedpty9	lmbc/include/mprimtype.h	134;"	d
FFITYPE_simpleobj	lmbc/include/mprimtype.h	91;"	d
FFITYPE_simplestr	lmbc/include/mprimtype.h	90;"	d
FFITYPE_u1	lmbc/include/mprimtype.h	80;"	d
FFITYPE_u128	lmbc/include/mprimtype.h	114;"	d
FFITYPE_u16	lmbc/include/mprimtype.h	77;"	d
FFITYPE_u32	lmbc/include/mprimtype.h	78;"	d
FFITYPE_u64	lmbc/include/mprimtype.h	79;"	d
FFITYPE_u8	lmbc/include/mprimtype.h	76;"	d
FFITYPE_unknown	lmbc/include/mprimtype.h	111;"	d
FFITYPE_v16i8	lmbc/include/mprimtype.h	108;"	d
FFITYPE_v16u8	lmbc/include/mprimtype.h	118;"	d
FFITYPE_v2f32	lmbc/include/mprimtype.h	125;"	d
FFITYPE_v2f64	lmbc/include/mprimtype.h	109;"	d
FFITYPE_v2i32	lmbc/include/mprimtype.h	119;"	d
FFITYPE_v2i64	lmbc/include/mprimtype.h	105;"	d
FFITYPE_v2u32	lmbc/include/mprimtype.h	122;"	d
FFITYPE_v2u64	lmbc/include/mprimtype.h	115;"	d
FFITYPE_v4f32	lmbc/include/mprimtype.h	110;"	d
FFITYPE_v4i16	lmbc/include/mprimtype.h	120;"	d
FFITYPE_v4i32	lmbc/include/mprimtype.h	106;"	d
FFITYPE_v4u16	lmbc/include/mprimtype.h	123;"	d
FFITYPE_v4u32	lmbc/include/mprimtype.h	116;"	d
FFITYPE_v8i16	lmbc/include/mprimtype.h	107;"	d
FFITYPE_v8i8	lmbc/include/mprimtype.h	121;"	d
FFITYPE_v8u16	lmbc/include/mprimtype.h	117;"	d
FFITYPE_v8u8	lmbc/include/mprimtype.h	124;"	d
FFITYPE_void	lmbc/include/mprimtype.h	71;"	d
FindExtFunc	lmbc/src/mplsh.cpp	/^void *LmbcMod::FindExtFunc(PUIdx puidx) {$/;"	f	class:maple::LmbcMod
FindExtSym	lmbc/src/mplsh.cpp	/^void *LmbcMod::FindExtSym(StIdx stidx) {$/;"	f	class:maple::LmbcMod
FuncAddr	lmbc/include/lmbc_eng.h	/^class FuncAddr {$/;"	c	namespace:maple
FuncAddr	lmbc/src/init.cpp	/^FuncAddr::FuncAddr(bool lmbcFunc, void *func, std::string name, uint32 formalsAggSz) {$/;"	f	class:maple::FuncAddr
GetAggCallArgsSize	lmbc/src/mfunction.cpp	/^size_t GetAggCallArgsSize(LmbcFunc *callee, CallNode *call) {$/;"	f	namespace:maple
GetAggFormalsSize	lmbc/src/init.cpp	/^uint32 GetAggFormalsSize(MIRFunction *func) {$/;"	f	namespace:maple
GetFormalVarAddr	lmbc/src/mfunction.cpp	/^uint8 *MFunction::GetFormalVarAddr(StIdx stidx) {$/;"	f	class:maple::MFunction
GetFuncAddr	lmbc/src/init.cpp	/^FuncAddr* LmbcMod::GetFuncAddr(PUIdx idx) {$/;"	f	class:maple::LmbcMod
GetGlobalVarInitAddr	lmbc/src/init.cpp	/^uint8 *LmbcMod::GetGlobalVarInitAddr(VarInf* pInf, uint32 align) {$/;"	f	class:maple::LmbcMod
GetIReadAggrSize	lmbc/src/mfunction.cpp	/^size_t GetIReadAggrSize(BaseNode* expr) {$/;"	f	namespace:maple
GetVarAddr	lmbc/src/init.cpp	/^uint8 *LmbcMod::GetVarAddr(PUIdx puIdx, StIdx stIdx) {$/;"	f	class:maple::LmbcMod
GetVarAddr	lmbc/src/init.cpp	/^uint8 *LmbcMod::GetVarAddr(StIdx stIdx) {$/;"	f	class:maple::LmbcMod
HandleFloatEq	lmbc/src/invoke_method.cpp	/^void HandleFloatEq(Opcode op, PrimType opndType, MValue &res, MValue &op1, MValue &op2) {$/;"	f	namespace:maple
Import	lmbc/src/mplsh.cpp	/^LmbcMod::Import(std::string path) {$/;"	f	class:maple::LmbcMod
InitAddrofConst	lmbc/src/init.cpp	/^void LmbcMod::InitAddrofConst(VarInf *pInf, MIRAddrofConst &addrofConst, uint8* dst) {$/;"	f	class:maple::LmbcMod
InitAggConst	lmbc/src/init.cpp	/^void LmbcMod::InitAggConst(VarInf *pInf, MIRConst &mirConst) {$/;"	f	class:maple::LmbcMod
InitArrayConst	lmbc/src/init.cpp	/^void LmbcMod::InitArrayConst(VarInf *pInf, MIRConst &mirConst) {$/;"	f	class:maple::LmbcMod
InitBitFieldConst	lmbc/src/init.cpp	/^void LmbcMod::InitBitFieldConst(VarInf *pInf, MIRConst &elemConst, int32 &allocdBits, bool &forceAlign) {$/;"	f	class:maple::LmbcMod
InitDoubleConst	lmbc/src/init.cpp	/^inline void LmbcMod::InitDoubleConst(VarInf *pInf, MIRDoubleConst &f64Const, uint8* dst) {$/;"	f	class:maple::LmbcMod
InitFloatConst	lmbc/src/init.cpp	/^inline void LmbcMod::InitFloatConst(VarInf *pInf, MIRFloatConst &f32Const, uint8* dst) {$/;"	f	class:maple::LmbcMod
InitGlobalVariable	lmbc/src/init.cpp	/^void LmbcMod::InitGlobalVariable(VarInf *pInf) {$/;"	f	class:maple::LmbcMod
InitGlobalVars	lmbc/src/init.cpp	/^void LmbcMod::InitGlobalVars(void) {$/;"	f	class:maple::LmbcMod
InitIntConst	lmbc/src/init.cpp	/^void LmbcMod::InitIntConst(VarInf* pInf, MIRIntConst &intConst, uint8* dst) {$/;"	f	class:maple::LmbcMod
InitLblConst	lmbc/src/init.cpp	/^void LmbcMod::InitLblConst(VarInf *pInf, MIRLblConst &labelConst, uint8 *dst) {$/;"	f	class:maple::LmbcMod
InitModule	lmbc/src/init.cpp	/^void LmbcMod::InitModule(void) {$/;"	f	class:maple::LmbcMod
InitPointerConst	lmbc/src/init.cpp	/^void LmbcMod::InitPointerConst(VarInf *pInf, MIRConst &mirConst) {$/;"	f	class:maple::LmbcMod
InitScalarConst	lmbc/src/init.cpp	/^void LmbcMod::InitScalarConst(VarInf *pInf, MIRConst &mirConst) {$/;"	f	class:maple::LmbcMod
InitStrConst	lmbc/src/init.cpp	/^void LmbcMod::InitStrConst(VarInf* pInf, MIRStrConst &mirStrConst, uint8* dst) {$/;"	f	class:maple::LmbcMod
InvokeFunc	lmbc/src/invoke_method.cpp	/^MValue InvokeFunc(LmbcFunc* fn, MFunction *caller) {$/;"	f	namespace:maple
IsExtFunc	lmbc/src/mfunction.cpp	/^bool IsExtFunc(PUIdx puIdx, LmbcMod& module) {$/;"	f	namespace:maple
IsZero	lmbc/src/invoke_method.cpp	/^bool IsZero(MValue& cond) {$/;"	f	namespace:maple
LOAD_ALGO_PRIMARY_TYPE	lmbc/src/mfunction.cpp	281;"	d	file:
LkupLmbcFunc	lmbc/src/init.cpp	/^LmbcMod::LkupLmbcFunc(PUIdx puIdx) {$/;"	f	class:maple::LmbcMod
LmbcFunc	lmbc/include/lmbc_eng.h	/^class LmbcFunc {$/;"	c	namespace:maple
LmbcFunc	lmbc/src/init.cpp	/^LmbcFunc::LmbcFunc(LmbcMod *mod, MIRFunction *func) : lmbcMod(mod), mirFunc(func) {$/;"	f	class:maple::LmbcFunc
LmbcMod	lmbc/include/lmbc_eng.h	/^class LmbcMod {$/;"	c	namespace:maple
LmbcMod	lmbc/src/mplsh.cpp	/^LmbcMod::LmbcMod(char* path) : lmbcPath(path) {$/;"	f	class:maple::LmbcMod
LoadArgs	lmbc/src/invoke_method.cpp	/^void LoadArgs(MFunction& func) {$/;"	f	namespace:maple
LoadDefLibs	lmbc/src/mplsh.cpp	/^void LmbcMod::LoadDefLibs() {$/;"	f	class:maple::LmbcMod
MASSERT	lmbc/include/massert.h	21;"	d
MFunction	lmbc/include/mfunction.h	/^class MFunction {$/;"	c	namespace:maple
MFunction	lmbc/src/mfunction.cpp	/^MFunction::MFunction(LmbcFunc  *funcInfo,$/;"	f	class:maple::MFunction
MPLENG_LMBC_H_	lmbc/include/lmbc_eng.h	16;"	d
MPLENG_MASSERT_H_	lmbc/include/massert.h	16;"	d
MPLENG_MEXPRESSION_H_	lmbc/include/mexpression.h	16;"	d
MPLENG_MFUNCTION_H_	lmbc/include/mfunction.h	16;"	d
MPLENG_MPRIMTYPE_H_	lmbc/include/mprimtype.h	16;"	d
MPLENG_MVALUE_H_	lmbc/include/mvalue.h	16;"	d
MPLENG_SHIM_H_	lmbc/include/eng_shim.h	16;"	d
MVal2Int64	lmbc/src/invoke_method.cpp	/^int64 MVal2Int64(MValue &val) {$/;"	f	namespace:maple
MValue	lmbc/include/mvalue.h	/^  struct MValue {$/;"	s	namespace:maple
OPCODE	lmbc/src/invoke_method.cpp	245;"	d	file:
OPCODE	lmbc/src/invoke_method.cpp	247;"	d	file:
OPCODE	lmbc/src/invoke_method.cpp	626;"	d	file:
OPCODE	lmbc/src/invoke_method.cpp	628;"	d	file:
PRIMTYPE	lmbc/src/mfunction.cpp	280;"	d	file:
PRIMTYPE	lmbc/src/mfunction.cpp	283;"	d	file:
PTYSIZE_Derived	lmbc/include/mprimtype.h	67;"	d
PTYSIZE_Invalid	lmbc/include/mprimtype.h	25;"	d
PTYSIZE_a32	lmbc/include/mprimtype.h	38;"	d
PTYSIZE_a64	lmbc/include/mprimtype.h	39;"	d
PTYSIZE_agg	lmbc/include/mprimtype.h	59;"	d
PTYSIZE_c128	lmbc/include/mprimtype.h	44;"	d
PTYSIZE_c64	lmbc/include/mprimtype.h	43;"	d
PTYSIZE_constStr	lmbc/include/mprimtype.h	57;"	d
PTYSIZE_dynany	lmbc/include/mprimtype.h	47;"	d
PTYSIZE_dynbool	lmbc/include/mprimtype.h	50;"	d
PTYSIZE_dynf32	lmbc/include/mprimtype.h	55;"	d
PTYSIZE_dynf64	lmbc/include/mprimtype.h	54;"	d
PTYSIZE_dyni32	lmbc/include/mprimtype.h	51;"	d
PTYSIZE_dynnone	lmbc/include/mprimtype.h	56;"	d
PTYSIZE_dynnull	lmbc/include/mprimtype.h	49;"	d
PTYSIZE_dynobj	lmbc/include/mprimtype.h	53;"	d
PTYSIZE_dynstr	lmbc/include/mprimtype.h	52;"	d
PTYSIZE_dynundef	lmbc/include/mprimtype.h	48;"	d
PTYSIZE_f128	lmbc/include/mprimtype.h	42;"	d
PTYSIZE_f32	lmbc/include/mprimtype.h	40;"	d
PTYSIZE_f64	lmbc/include/mprimtype.h	41;"	d
PTYSIZE_gen	lmbc/include/mprimtype.h	58;"	d
PTYSIZE_i16	lmbc/include/mprimtype.h	28;"	d
PTYSIZE_i32	lmbc/include/mprimtype.h	29;"	d
PTYSIZE_i64	lmbc/include/mprimtype.h	30;"	d
PTYSIZE_i8	lmbc/include/mprimtype.h	27;"	d
PTYSIZE_ptr	lmbc/include/mprimtype.h	36;"	d
PTYSIZE_ref	lmbc/include/mprimtype.h	37;"	d
PTYSIZE_simpleobj	lmbc/include/mprimtype.h	46;"	d
PTYSIZE_simplestr	lmbc/include/mprimtype.h	45;"	d
PTYSIZE_u1	lmbc/include/mprimtype.h	35;"	d
PTYSIZE_u16	lmbc/include/mprimtype.h	32;"	d
PTYSIZE_u32	lmbc/include/mprimtype.h	33;"	d
PTYSIZE_u64	lmbc/include/mprimtype.h	34;"	d
PTYSIZE_u8	lmbc/include/mprimtype.h	31;"	d
PTYSIZE_unknown	lmbc/include/mprimtype.h	66;"	d
PTYSIZE_v16i8	lmbc/include/mprimtype.h	63;"	d
PTYSIZE_v2f64	lmbc/include/mprimtype.h	64;"	d
PTYSIZE_v2i64	lmbc/include/mprimtype.h	60;"	d
PTYSIZE_v4f32	lmbc/include/mprimtype.h	65;"	d
PTYSIZE_v4i32	lmbc/include/mprimtype.h	61;"	d
PTYSIZE_v8i16	lmbc/include/mprimtype.h	62;"	d
PTYSIZE_void	lmbc/include/mprimtype.h	26;"	d
PUIdx2FuncAddr	lmbc/include/lmbc_eng.h	/^  std::unordered_map<PUIdx, FuncAddr*> PUIdx2FuncAddr;$/;"	m	class:maple::LmbcMod
ParmInf	lmbc/include/lmbc_eng.h	/^  ParmInf(PrimType type, size_t sz, bool ispreg, int32_t storageIdx)$/;"	f	struct:maple::ParmInf
ParmInf	lmbc/include/lmbc_eng.h	/^  ParmInf(PrimType type, size_t sz, bool ispreg, int32_t storageIdx, MIRSymbol *psym)$/;"	f	struct:maple::ParmInf
ParmInf	lmbc/include/lmbc_eng.h	/^  ParmInf(PrimType type, size_t sz, bool ispreg, int32_t storageIdx, MIRSymbol *psym, PUIdx puidx)$/;"	f	struct:maple::ParmInf
ParmInf	lmbc/include/lmbc_eng.h	/^struct ParmInf {$/;"	s	namespace:maple
ROUNDUP8	lmbc/src/init.cpp	22;"	d	file:
RegAssignZextOrSext	lmbc/src/invoke_method.cpp	/^bool RegAssignZextOrSext(MValue& from, PrimType toTyp, MValue& to) {$/;"	f	namespace:maple
RunLmbc	lmbc/src/mplsh.cpp	/^RunLmbc(int argc, char** argv) {$/;"	f	namespace:maple
ScanFormals	lmbc/src/init.cpp	/^void LmbcFunc::ScanFormals(void) {$/;"	f	class:maple::LmbcFunc
ScanLabels	lmbc/src/init.cpp	/^void LmbcFunc::ScanLabels(StmtNode* stmt) {$/;"	f	class:maple::LmbcFunc
ScanPUStatic	lmbc/src/init.cpp	/^void LmbcMod::ScanPUStatic(MIRFunction *func) {$/;"	f	class:maple::LmbcMod
SetBitFieldConst	lmbc/src/init.cpp	/^void SetBitFieldConst(uint8* baseFdAddr, uint32 baseFdSz, uint32 bitsOffset, uint8 bitsSize, MIRConst &elemConst) {$/;"	f	namespace:maple
UpdateGlobalVarInitAddr	lmbc/src/init.cpp	/^inline void LmbcMod::UpdateGlobalVarInitAddr(VarInf* pInf, uint32 size) {$/;"	f	class:maple::LmbcMod
VARNAMELENGTH	lmbc/include/mfunction.h	29;"	d
VaListAarch64	lmbc/include/mfunction.h	/^} VaListAarch64;$/;"	t	namespace:maple	typeref:struct:maple::__anon2
VaListX86_64	lmbc/include/mfunction.h	/^} VaListX86_64[1];$/;"	t	namespace:maple	typeref:struct:maple::__anon1
__engineShim	lmbc/src/eng_shim.cpp	/^__engineShim(LmbcFunc* fn, ...) {$/;"	f	namespace:maple
a64	lmbc/include/mvalue.h	/^      uint8   *a64;    \/\/ object ref (use uint8_t* instead of void* for reference)$/;"	m	union:maple::MValue::__anon4
aggSize	lmbc/include/mvalue.h	/^    size_t   aggSize;  \/\/ for PTY_agg only$/;"	m	struct:maple::MValue
aggrArgsBuf	lmbc/include/mfunction.h	/^    uint8*      aggrArgsBuf;   \/\/ buffer for PTY_agg call formal args, which offsets into it$/;"	m	class:maple::MFunction
allocaMem	lmbc/include/mfunction.h	/^    uint8*      allocaMem;     \/\/ point to reserved stack memory for Maple IR OP_alloca$/;"	m	class:maple::MFunction
allocaOffset	lmbc/include/mfunction.h	/^    uint32      allocaOffset;  \/\/ next avail offset in allocaMem$/;"	m	class:maple::MFunction
callArgs	lmbc/include/mfunction.h	/^    MValue*     callArgs;      \/\/ array of call args to pass to callee$/;"	m	class:maple::MFunction
caller	lmbc/include/mfunction.h	/^    MFunction*  caller;        \/\/ caller of current func$/;"	m	class:maple::MFunction
extFuncMap	lmbc/include/lmbc_eng.h	/^  std::unordered_map<PUIdx,  void*>extFuncMap;  \/\/ PUIdx to ext func addr map$/;"	m	class:maple::LmbcMod
extSymMap	lmbc/include/lmbc_eng.h	/^  std::unordered_map<uint32, void*>extSymMap;   \/\/ StIdx.FullIdx() to ext sym addr map$/;"	m	class:maple::LmbcMod
f32	lmbc/include/mvalue.h	/^      float   f32;$/;"	m	union:maple::MValue::__anon4
f64	lmbc/include/mvalue.h	/^      double  f64;$/;"	m	union:maple::MValue::__anon4
ffi_type_table	lmbc/src/mfunction.cpp	/^static ffi_type ffi_type_table[] = {$/;"	m	namespace:maple	file:
formalVars	lmbc/include/mfunction.h	/^    MValue*     formalVars;    \/\/ array of var\/non-preg args passed in$/;"	m	class:maple::MFunction
formalsAggSize	lmbc/include/lmbc_eng.h	/^  uint32        formalsAggSize;    \/\/ total struct size of all formal args of type agg$/;"	m	class:maple::LmbcFunc
formalsAggSize	lmbc/include/lmbc_eng.h	/^  uint32 formalsAggSize; \/\/ native func only$/;"	m	class:maple::FuncAddr
formalsNum	lmbc/include/lmbc_eng.h	/^  uint16        formalsNum;        \/\/ num formals: vars+pregs$/;"	m	class:maple::LmbcFunc
formalsNumVars	lmbc/include/lmbc_eng.h	/^  uint32        formalsNumVars;    \/\/ num formals: vars only$/;"	m	class:maple::LmbcFunc
formalsSize	lmbc/include/lmbc_eng.h	/^  uint32        formalsSize;       \/\/ total size of all formal args$/;"	m	class:maple::LmbcFunc
fp	lmbc/include/mfunction.h	/^    uint8*      fp;            \/\/ point to bottom of frame$/;"	m	class:maple::MFunction
fp_offset	lmbc/include/mfunction.h	/^  uint fp_offset;$/;"	m	struct:maple::__anon1
frame	lmbc/include/mfunction.h	/^    uint8*      frame;         \/\/ stack frame (auto var only)$/;"	m	class:maple::MFunction
frameSize	lmbc/include/lmbc_eng.h	/^  uint32        frameSize;         \/\/ auto var size in bytes$/;"	m	class:maple::LmbcFunc
funcMap	lmbc/include/lmbc_eng.h	/^  FuncMap     funcMap;$/;"	m	class:maple::LmbcMod
funcName	lmbc/include/lmbc_eng.h	/^  std::string funcName;$/;"	m	class:maple::FuncAddr
funcPtr	lmbc/include/lmbc_eng.h	/^  } funcPtr;$/;"	m	class:maple::FuncAddr	typeref:union:maple::FuncAddr::__anon3
gettid	lmbc/include/mfunction.h	23;"	d
globalAndStaticVars	lmbc/include/lmbc_eng.h	/^  std::unordered_map<uint64, VarInf*> globalAndStaticVars;$/;"	m	class:maple::LmbcMod
globalStrTbl	lmbc/include/lmbc_eng.h	/^  std::unordered_map<uint32, std::string> globalStrTbl;$/;"	m	class:maple::LmbcMod
gp_offset	lmbc/include/mfunction.h	/^  uint gp_offset;$/;"	m	struct:maple::__anon1
gr_offs	lmbc/include/mfunction.h	/^  int  gr_offs;$/;"	m	struct:maple::__anon2
gr_top	lmbc/include/mfunction.h	/^  void *gr_top;$/;"	m	struct:maple::__anon2
i16	lmbc/include/mvalue.h	/^      int16   i16;$/;"	m	union:maple::MValue::__anon4
i32	lmbc/include/mvalue.h	/^      int32   i32;$/;"	m	union:maple::MValue::__anon4
i64	lmbc/include/mvalue.h	/^      int64   i64;$/;"	m	union:maple::MValue::__anon4
i8	lmbc/include/mvalue.h	/^      int8    i8;$/;"	m	union:maple::MValue::__anon4
info	lmbc/include/mfunction.h	/^    LmbcFunc*   info;          \/\/ current func$/;"	m	class:maple::MFunction
isLmbcFunc	lmbc/include/lmbc_eng.h	/^  bool isLmbcFunc;$/;"	m	class:maple::FuncAddr
isPreg	lmbc/include/lmbc_eng.h	/^  bool isPreg;$/;"	m	struct:maple::ParmInf
isVarArgs	lmbc/include/lmbc_eng.h	/^  bool          isVarArgs;$/;"	m	class:maple::LmbcFunc
isVararg	lmbc/include/lmbc_eng.h	/^  bool isVararg;$/;"	m	struct:maple::ParmInf
labelMap	lmbc/include/lmbc_eng.h	/^  LabelMap      labelMap;          \/\/ map labelIdx to Stmt address$/;"	m	class:maple::LmbcFunc
libHandles	lmbc/include/lmbc_eng.h	/^  std::vector<void*> libHandles;$/;"	m	class:maple::LmbcMod
lmbcFunc	lmbc/include/lmbc_eng.h	/^    LmbcFunc *lmbcFunc;$/;"	m	union:maple::FuncAddr::__anon3
lmbcMod	lmbc/include/lmbc_eng.h	/^  LmbcMod       *lmbcMod;$/;"	m	class:maple::LmbcFunc
lmbcPath	lmbc/include/lmbc_eng.h	/^  std::string lmbcPath;$/;"	m	class:maple::LmbcMod
main	lmbc/src/mplsh.cpp	/^main(int argc, char **argv) {$/;"	f
maple	lmbc/include/eng_shim.h	/^namespace maple {$/;"	n
maple	lmbc/include/lmbc_eng.h	/^namespace maple {$/;"	n
maple	lmbc/include/mfunction.h	/^namespace maple {$/;"	n
maple	lmbc/include/mvalue.h	/^namespace maple {$/;"	n
maple	lmbc/src/eng_shim.cpp	/^namespace maple {$/;"	n	file:
maple	lmbc/src/init.cpp	/^namespace maple {$/;"	n	file:
maple	lmbc/src/invoke_method.cpp	/^namespace maple {$/;"	n	file:
maple	lmbc/src/load_store.cpp	/^namespace maple {$/;"	n	file:
maple	lmbc/src/mfunction.cpp	/^namespace maple {$/;"	n	file:
maple	lmbc/src/mplsh.cpp	/^namespace maple {$/;"	n	file:
mirFunc	lmbc/include/lmbc_eng.h	/^  MIRFunction   *mirFunc;$/;"	m	class:maple::LmbcFunc
mload	lmbc/src/load_store.cpp	/^void mload(uint8* addr, PrimType ptyp, MValue& res, size_t aggSize) {$/;"	f	namespace:maple
mstore	lmbc/src/load_store.cpp	/^void mstore(uint8* addr, PrimType ptyp, MValue& val, bool toVarArgStack) {$/;"	f	namespace:maple
nativeFunc	lmbc/include/lmbc_eng.h	/^    void *nativeFunc;$/;"	m	union:maple::FuncAddr::__anon3
nextStmt	lmbc/include/mfunction.h	/^    StmtNode*   nextStmt;      \/\/ next maple IR statement to execute$/;"	m	class:maple::MFunction
numCallArgs	lmbc/include/mfunction.h	/^    uint16      numCallArgs;   \/\/ number of call args to pass to callee$/;"	m	class:maple::MFunction
numPregs	lmbc/include/lmbc_eng.h	/^  size_t        numPregs;$/;"	m	class:maple::LmbcFunc
overflow_arg_area	lmbc/include/mfunction.h	/^  void *overflow_arg_area;$/;"	m	struct:maple::__anon1
pRegs	lmbc/include/mfunction.h	/^    MValue*     pRegs;         \/\/ array of  pseudo regs used in function$/;"	m	class:maple::MFunction
pos2Parm	lmbc/include/lmbc_eng.h	/^  std::vector<ParmInf*> pos2Parm;  \/\/ formals info lkup by pos order$/;"	m	class:maple::LmbcFunc
preLoadLibs	lmbc/src/mplsh.cpp	/^std::vector<std::string> preLoadLibs = {$/;"	m	namespace:maple	file:
ptr	lmbc/include/mvalue.h	/^      void    *ptr;$/;"	m	union:maple::MValue::__anon4
ptyp	lmbc/include/lmbc_eng.h	/^  PrimType ptyp;$/;"	m	struct:maple::ParmInf
ptyp	lmbc/include/mvalue.h	/^    PrimType ptyp:8;$/;"	m	struct:maple::MValue
puIdx	lmbc/include/lmbc_eng.h	/^  PUIdx puIdx;     \/\/ VarInf only - for PUStatic var$/;"	m	struct:maple::ParmInf
reg_save_area	lmbc/include/mfunction.h	/^  void *reg_save_area;$/;"	m	struct:maple::__anon1
retSize	lmbc/include/lmbc_eng.h	/^  uint32        retSize;$/;"	m	class:maple::LmbcFunc
retVal0	lmbc/include/mfunction.h	/^    MValue      retVal0;       \/\/ %retVal0 return from callee$/;"	m	class:maple::MFunction
retVal1	lmbc/include/mfunction.h	/^    MValue      retVal1;       \/\/ %retval1 return from callee$/;"	m	class:maple::MFunction
size	lmbc/include/lmbc_eng.h	/^  size_t size;$/;"	m	struct:maple::ParmInf
stack	lmbc/include/mfunction.h	/^  void *stack;$/;"	m	struct:maple::__anon2
stidx2Parm	lmbc/include/lmbc_eng.h	/^  std::unordered_map<int32, ParmInf*> stidx2Parm;  \/\/ formals info lkup by formals stidx$/;"	m	class:maple::LmbcFunc
storeIdx	lmbc/include/lmbc_eng.h	/^  int32 storeIdx;$/;"	m	struct:maple::ParmInf
str	lmbc/include/mvalue.h	/^      void    *str;$/;"	m	union:maple::MValue::__anon4
sym	lmbc/include/lmbc_eng.h	/^  MIRSymbol *sym;  \/\/ VarInf only - for global and PUStatic var$/;"	m	struct:maple::ParmInf
u16	lmbc/include/mvalue.h	/^      uint16  u16;$/;"	m	union:maple::MValue::__anon4
u32	lmbc/include/mvalue.h	/^      uint32  u32;$/;"	m	union:maple::MValue::__anon4
u64	lmbc/include/mvalue.h	/^      uint64  u64;$/;"	m	union:maple::MValue::__anon4
u8	lmbc/include/mvalue.h	/^      uint8   u8;$/;"	m	union:maple::MValue::__anon4
vaArgs	lmbc/include/mfunction.h	/^    uint8*      vaArgs;        \/\/ AARCH64 ABI vararg stack for calling va-arg funcs$/;"	m	class:maple::MFunction
vaArgsSize	lmbc/include/mfunction.h	/^    uint32      vaArgsSize;$/;"	m	class:maple::MFunction
vaListObjAarch64	lmbc/src/mfunction.cpp	/^ffi_type *vaListObjAarch64 [] = {$/;"	m	namespace:maple	file:
vaListObjX86_64	lmbc/src/mfunction.cpp	/^ffi_type *vaListObjX86_64 [] = {$/;"	m	namespace:maple	file:
vaList_ffi_type	lmbc/src/mfunction.cpp	/^ffi_type vaList_ffi_type = { 0, 0,  FFI_TYPE_STRUCT, vaListObjAarch64 };$/;"	m	namespace:maple	file:
varArgsBuf	lmbc/include/mfunction.h	/^    uint8*      varArgsBuf;    \/\/ buffer for PTY_agg call var-args, which offsets into it$/;"	m	class:maple::MFunction
vr_offs	lmbc/include/mfunction.h	/^  int  vr_offs;$/;"	m	struct:maple::__anon2
vr_top	lmbc/include/mfunction.h	/^  void *vr_top;$/;"	m	struct:maple::__anon2
x	lmbc/include/mvalue.h	/^    } x;$/;"	m	struct:maple::MValue	typeref:union:maple::MValue::__anon4
~MFunction	lmbc/src/mfunction.cpp	/^MFunction::~MFunction() { }$/;"	f	class:maple::MFunction
