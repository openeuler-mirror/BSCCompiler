#
# Copyright (c) [2020-2021] Huawei Technologies Co.,Ltd.All rights reserved.
#
# OpenArkCompiler is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#
#     http://license.coscl.org.cn/MulanPSL2
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.
#
include_directories = [
  "${MAPLEALL_ROOT}/maple_ir/include",
  "${MAPLEALL_ROOT}/mpl2mpl/include",
  "${MAPLEALL_ROOT}/maple_util/include",
  "${MAPLEALL_ROOT}/maple_driver/include",
  "${MAPLEALL_ROOT}/mempool/include",
  "${THIRD_PARTY_ROOT}/bounds_checking_function/include",
  "${MAPLEALL_ROOT}/maple_ipa/include",
  "${MAPLEALL_ROOT}/maple_me/include",
  "${MAPLEALL_ROOT}/maple_phase/include",
  "${THIRD_PARTY_ROOT}/llvm_modified/include/llvm/BinaryFormat",
]

src_libmplir = [
  "src/global_tables.cpp",
  "src/intrinsics.cpp",
  "src/lexer.cpp",
  "src/mir_symbol_builder.cpp",
  "src/mir_builder.cpp",
  "src/mir_const.cpp",
  "src/mir_function.cpp",
  "src/mir_lower.cpp",
  "src/mir_module.cpp",
  "src/verification.cpp",
  "src/verify_annotation.cpp",
  "src/verify_mark.cpp",
  "src/mir_nodes.cpp",
  "src/mir_symbol.cpp",
  "src/mir_type.cpp",
  "src/opcode_info.cpp",
  "src/option.cpp",
  "src/parser.cpp",
  "src/mir_parser.cpp",
  "src/mir_pragma.cpp",
  "src/printing.cpp",
  "src/bin_func_import.cpp",
  "src/bin_func_export.cpp",
  "src/bin_mpl_import.cpp",
  "src/bin_mpl_export.cpp",
  "src/debug_info.cpp",
  "src/debug_info_util.cpp",
  "${MAPLEALL_ROOT}/maple_ipa/src/ea_connection_graph.cpp",
]

src_irbuild = [ "src/driver.cpp" ]

configs = [ "${MAPLEALL_ROOT}:mapleallcompilecfg" ]

cflags_cc += [ "-DSTORE_BACK_VTABLE_REF_AFTER_LOAD=1" ]

static_library("libmplir") {
  sources = src_libmplir
  include_dirs = include_directories
  output_dir = "${root_out_dir}/lib/${HOST_ARCH}"
  deps = [
    "${MAPLEALL_ROOT}/maple_driver:libdriver_option",
    "${MAPLEALL_ROOT}/maple_driver:liboption_parser",
    "${MAPLEALL_ROOT}/maple_phase:libmplphase",
    "${MAPLEALL_ROOT}/maple_util:libmplutil",
  ]
}

executable("irbuild") {
  sources = src_irbuild
  include_dirs = include_directories
  deps = [
    ":libmplir",
    "${MAPLEALL_ROOT}/maple_driver:liboption_parser",
    "${MAPLEALL_ROOT}/maple_phase:libmplphase",
    "${MAPLEALL_ROOT}/maple_phase:libmplphase",
    "${MAPLEALL_ROOT}/maple_util:libmplutil",
    "${MAPLEALL_ROOT}/mempool:libmempool",
    "${MAPLEALL_ROOT}/mpl2mpl:libmpl2mpl",
    "${THIRD_PARTY_ROOT}/bounds_checking_function:libHWSecureC",
  ]
}

src_mpldbg = [ "src/mpl_dbg.cpp" ]

executable("mpldbg") {
  sources = src_mpldbg
  include_dirs = include_directories
  deps = [
    ":libmplir",
    "${MAPLEALL_ROOT}/maple_driver:liboption_parser",
    "${MAPLEALL_ROOT}/maple_phase:libmplphase",
    "${MAPLEALL_ROOT}/maple_util:libmplutil",
    "${MAPLEALL_ROOT}/mempool:libmempool",
    "${MAPLEALL_ROOT}/mpl2mpl:libmpl2mpl",
    "${THIRD_PARTY_ROOT}/bounds_checking_function:libHWSecureC",
  ]
}
