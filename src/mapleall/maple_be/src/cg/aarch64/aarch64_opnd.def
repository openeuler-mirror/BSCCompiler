/*
 * Copyright (c) [2020] Huawei Technologies Co.,Ltd.All rights reserved.
 *
 * OpenArkCompiler is licensed under the Mulan PSL v1.
 * You can use this software according to the terms and conditions of the Mulan PSL v1.
 * You may obtain a copy of Mulan PSL v1 at:
 *
 *     http://license.coscl.org.cn/MulanPSL
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v1 for more details.
 */
AArch64OpndProp mopdInt32RegSrc = {Operand::kOpdRegister, {kRegTyInt, kAllRegNum, kRegPropUse }, 32};
AArch64OpndProp mopdInt32RegDest = {Operand::kOpdRegister, {kRegTyInt, kAllRegNum, kRegPropDef}, 32};
AArch64OpndProp mopdInt32RegDestSrc = {Operand::kOpdRegister, {kRegTyInt, kAllRegNum, kRegPropDef | kRegPropUse}, 32};
AArch64OpndProp mopdInt64RegSrc = {Operand::kOpdRegister, {kRegTyInt, kAllRegNum, kRegPropUse}, 64};
AArch64OpndProp mopdInt64RegDest = {Operand::kOpdRegister, {kRegTyInt, kAllRegNum, kRegPropDef}, 64};
AArch64OpndProp mopdInt64RegDestSrc = {Operand::kOpdRegister, {kRegTyInt, kAllRegNum, kRegPropDef | kRegPropUse}, 64};
AArch64OpndProp mopdF8RegSrc = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropUse}, 8};
AArch64OpndProp mopdF8RegDest = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropDef}, 8};
AArch64OpndProp mopdF16RegSrc = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropUse}, 16};
AArch64OpndProp mopdF16RegDest = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropDef}, 16};
AArch64OpndProp mopdF32RegSrc = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropUse}, 32};
AArch64OpndProp mopdF32RegDest = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropDef}, 32};
AArch64OpndProp mopdF32RegDestSrc = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropDef | kRegPropUse}, 32};
AArch64OpndProp mopdF64RegSrc = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropUse}, 64};
AArch64OpndProp mopdF64RegDest = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropDef}, 64};
AArch64OpndProp mopdF64RegDestSrc = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropDef | kRegPropUse}, 64};
AArch64OpndProp mopdV128RegSrc = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropUse | kVector}, 128};
AArch64OpndProp mopdV128RegDest = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropDef | kVector}, 128};
AArch64OpndProp mopdV128RegDestSrc = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropDef | kRegPropUse | kVector}, 128};
AArch64OpndProp mopdV64RegSrc = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropUse | kVector}, 64};
AArch64OpndProp mopdV64RegDest = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropDef | kVector}, 64};
AArch64OpndProp mopdV64RegDestSrc = {Operand::kOpdRegister, {kRegTyFloat, kAllRegNum, kRegPropDef | kVector}, 64};
AArch64OpndProp mopdIntImm4Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 4};
AArch64OpndProp mopdIntImm5Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 5};
AArch64OpndProp mopdIntImm6Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 6};
AArch64OpndProp mopdIntImm8Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 8};

bool Imm12BitValid(int64 value) {
  bool result = maplebe::IsBitSizeImmediate(value, kMaxImmVal12Bits, 0);
  result |= maplebe::IsBitSizeImmediate(value, kMaxImmVal12Bits, kMaxImmVal12Bits); // for target linux-aarch64-gnu
  return result;
}

bool Imm12BitMaskValid(int64 value) {
  if (value == 0 || static_cast<int64>(value) == -1) {
    return true;
  }
  return maplebe::IsBitmaskImmediate(static_cast<uint64>(value), k32BitSize);
}

bool Imm13BitValid(int64 value) {
  bool result = maplebe::IsBitSizeImmediate(value, kMaxImmVal13Bits, 0);
  result |= maplebe::IsBitSizeImmediate(value, kMaxImmVal13Bits, kMaxImmVal13Bits); // for target linux-aarch64-gnu
  return result;
}

bool Imm13BitMaskValid(int64 value) {
  if (value == 0 || static_cast<int64>(value) == -1) {
    return true;
  }
  return maplebe::IsBitmaskImmediate(static_cast<uint64>(value), k64BitSize);
}

bool Imm16BitValid(int64 value) {
  bool result = maplebe::IsBitSizeImmediate(value, kMaxImmVal16Bits, 0);
   /*
    * for target linux-aarch64-gnu
    * aarch64 assembly takes up to 24-bits immediate, generating
    * either cmp or cmp with shift 12 encoding
    */
  result |= maplebe::IsBitSizeImmediate(value, kMaxImmVal12Bits, kMaxImmVal12Bits);
  return result;
}

AArch64ImmOpndProp mopdIntImm12Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 12, Imm12BitValid};
AArch64ImmOpndProp  mopdIntImm13Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 13, Imm13BitValid};
AArch64ImmOpndProp mopdIntBitMaskImm12Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 12, Imm12BitMaskValid};
AArch64ImmOpndProp  mopdIntBitMaskImm13Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 13, Imm13BitMaskValid};
AArch64ImmOpndProp mopdIntImm16Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 16, Imm16BitValid};
AArch64OpndProp mopdIntImm24Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 24};
AArch64OpndProp mopdIntImm32Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 32};
AArch64OpndProp mopdIntImm32Literal = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse | kLoadLiteral}, 32};
AArch64OpndProp mopdIntImm64Src = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 64};
AArch64OpndProp mopdIntImm64Literal = {Operand::kOpdImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse | kLoadLiteral}, 64};
AArch64OpndProp mopdFpzeroImm8Src = {Operand::kOpdFPZeroImmediate, {kRegTyUndef, kAllRegNum, kRegPropUse}, 8};

/*
 * 8bit         : 0
 * halfword     : 1
 * 32bit - word : 2
 * 64bit - word : 3
 * 128bit- word : 4
 */
bool StrLdrSignedOfstValid(int64 value, uint wordSize) {
  if (value <= k256BitSize && value >= kNegative256BitSize) {
    return true;
  } else if ((value > k256BitSize) && (value <= kMaxPimm[wordSize])) {
    uint64 mask = (1 << wordSize) - 1U;
    return (static_cast<uint64>(value) & mask) ? false : true;
  }
  return false;
}


bool StrLdr8ImmValid(int64 value) {
  return StrLdrSignedOfstValid(value, 0);
}

bool StrLdr16ImmValid(int64 value) {
  return StrLdrSignedOfstValid(value, k1ByteSize);
}

bool StrLdr32ImmValid(int64 value) {
  return StrLdrSignedOfstValid(value, k2ByteSize);
}

bool StrLdr32PairImmValid(int64 value) {
  if ((value < k256BitSize)  && (value >= kNegative256BitSize)) {
    return (static_cast<uint64>(value) & 3) ? false : true;
  }
  return false;
}

bool StrLdr64ImmValid(int64 value) {
 return StrLdrSignedOfstValid(value, k3ByteSize);
}

bool StrLdr64PairImmValid(int64 value) {
  if (value < k512BitSize && (value >= kNegative512BitSize)) {
    return (static_cast<uint64>(value) & 7) ? false : true;
  }
  return false;
}

bool StrLdr128ImmValid(int64 value) {
  return StrLdrSignedOfstValid(value, k4ByteSize);
}

AArch64ImmOpndProp mopdMem8Src = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse}, 8, StrLdr8ImmValid};
AArch64ImmOpndProp mopdMem16Src = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse}, 16, StrLdr16ImmValid};
AArch64ImmOpndProp mopdMem32Src = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse}, 32, StrLdr32ImmValid};
AArch64ImmOpndProp mopdMemPair32Src = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse}, 32, StrLdr32PairImmValid};
AArch64OpndProp mopdMem32SrcH = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse | kMemLow12}, 16};
AArch64OpndProp mopdMem32SrcL = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse | kMemLow12}, 16};
AArch64ImmOpndProp mopdMem64Src = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse}, 64, StrLdr64ImmValid};
AArch64ImmOpndProp mopdMem128Src = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse}, 128, StrLdr128ImmValid};
AArch64ImmOpndProp mopdMemPair64Src = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse}, 64, StrLdr64PairImmValid};
AArch64OpndProp mopdMem64SrcL = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse | kMemLow12}, 12};

AArch64ImmOpndProp mopdMem8Dest  = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropDef }, 8, StrLdr8ImmValid};
AArch64ImmOpndProp mopdMem16Dest = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropDef }, 16, StrLdr16ImmValid};
AArch64ImmOpndProp mopdMem32Dest = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropDef }, 32, StrLdr32ImmValid};
AArch64ImmOpndProp mopdMem64Dest = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropDef }, 64, StrLdr64ImmValid};
AArch64ImmOpndProp mopdMem128Dest = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropDef}, 128, StrLdr128ImmValid};
AArch64ImmOpndProp mopdMemPair32Dest = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropDef }, 32, StrLdr32PairImmValid};
AArch64ImmOpndProp mopdMemPair64Dest = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropDef }, 64, StrLdr64PairImmValid};


AArch64OpndProp mopdLbl64Src = {Operand::kOpdBBAddress, {kRegTyUndef,kAllRegNum, kRegPropUse}, 64};
AArch64OpndProp mopdLiteralSrc = {Operand::kOpdStImmediate, {kRegTyUndef,kAllRegNum, kRegPropUse}, 64};
AArch64OpndProp mopdLiteralL12Src = {Operand::kOpdStImmediate, {kRegTyUndef, kAllRegNum, kLiteralLow12}, 12};
AArch64OpndProp mopdListSrc = {Operand::kOpdList, {kRegTyUndef, kAllRegNum, kRegPropUse}, 1};
AArch64OpndProp mopdCcRegSrc = {Operand::kOpdRegister, {kRegTyCc, kAllRegNum, kRegPropUse}, 1};
AArch64OpndProp mopdCcRegDest = {Operand::kOpdRegister, {kRegTyCc, kAllRegNum, kRegPropDef}, 1};
AArch64OpndProp mopdCcRegDestSrc = {Operand::kOpdRegister, {kRegTyCc, kAllRegNum, kRegPropDef | kRegPropUse}, 1};
AArch64OpndProp mopdSpRegDest = {Operand::kOpdRegister, {kRegTyInt, RSP, kRegPropDef}, 32};
AArch64OpndProp mopdMem32SrcPre = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse | kPreInc}, 32};
AArch64OpndProp mopdMem32SrcPost = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse | kPostInc}, 32};
AArch64OpndProp mopdMem64SrcPre = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse | kPreInc}, 64};
AArch64OpndProp mopdMem64SrcPost = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse | kPostInc}, 64};
AArch64OpndProp mopdMem32LiteralSrc = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse}, 32};
AArch64OpndProp mopdMem64LiteralSrc = {Operand::kOpdMem, {kRegTyUndef, kAllRegNum, kRegPropUse}, 64};

AArch64OpndProp mopdCondSrc = {Operand::kOpdCond, {kRegTyCc, kAllRegNum, kRegPropUse}, 4};

AArch64OpndProp mopdBitshift32Src = {Operand::kOpdShift, {kRegTyUndef, kAllRegNum, kRegPropUse}, 5};
AArch64OpndProp mopdBitshift64Src = {Operand::kOpdShift, {kRegTyUndef, kAllRegNum, kRegPropUse}, 6};
AArch64OpndProp mopdExtendshift64Src = {Operand::kOpdExtend, {kRegTyUndef, kAllRegNum, kRegPropUse}, 3};
AArch64OpndProp mopdLsl4Src  = {Operand::kOpdShift, {kRegTyUndef, kAllRegNum, kRegPropUse}, 4};
AArch64OpndProp mopdLsl6Src  = {Operand::kOpdShift, {kRegTyUndef, kAllRegNum, kRegPropUse}, 6};
AArch64OpndProp mopdLsl12Src = {Operand::kOpdShift, {kRegTyUndef, kAllRegNum, kRegPropUse}, 12};

AArch64OpndProp mopdString = {Operand::kOpdString, {kRegTyUndef, kAllRegNum, kRegPropUse}, 0};

// physical register

AArch64OpndProp *MOPDReg = &mopdInt32RegSrc;
// in mopdReg32IS, Reg means register, 32 means 32-bits, I means integer(F means float),
// S means source, D means dest, H means high harf bits, L means low harf bits
AArch64OpndProp *mopdReg32IS = &mopdInt32RegSrc;
AArch64OpndProp *mopdReg32ID = &mopdInt32RegDest;
AArch64OpndProp *mopdReg32IDS = &mopdInt32RegDestSrc;
AArch64OpndProp *mopdReg64IS = &mopdInt64RegSrc;
AArch64OpndProp *mopdReg64ID = &mopdInt64RegDest;
AArch64OpndProp *mopdReg64IDS = &mopdInt64RegDestSrc;
AArch64OpndProp *mopdReg8FS = &mopdF8RegSrc;
AArch64OpndProp *mopdReg8FD = &mopdF8RegDest;
AArch64OpndProp *mopdReg16FS = &mopdF16RegSrc;
AArch64OpndProp *mopdReg16FD = &mopdF16RegDest;
AArch64OpndProp *mopdReg32FS = &mopdF32RegSrc;
AArch64OpndProp *mopdReg32FD = &mopdF32RegDest;
AArch64OpndProp *mopdReg32FDS = &mopdF32RegDestSrc;
AArch64OpndProp *mopdReg64FS = &mopdF64RegSrc;
AArch64OpndProp *mopdReg64FD = &mopdF64RegDest;
AArch64OpndProp *mopdReg64FDS = &mopdF64RegDestSrc;
AArch64OpndProp *mopdReg128VS = &mopdV128RegSrc;
AArch64OpndProp *mopdReg128VD = &mopdV128RegDest;
AArch64OpndProp *mopdReg128VDS = &mopdV128RegDestSrc;
AArch64OpndProp *mopdReg64VS = &mopdV64RegSrc;
AArch64OpndProp *mopdReg64VD = &mopdV64RegDest;
AArch64OpndProp *mopdReg64VDS = &mopdV64RegDestSrc;
AArch64OpndProp *mopdMem = &mopdMem32Src;
AArch64OpndProp *mopdMem8S = &mopdMem8Src;
AArch64OpndProp *mopdMem16S = &mopdMem16Src;
AArch64OpndProp *mopdMem32S = &mopdMem32Src;
AArch64OpndProp *mopdMem32PS = &mopdMemPair32Src;
AArch64OpndProp *mopdMem32SL = &mopdMem32SrcL;
AArch64OpndProp *mopdMem32SH = &mopdMem32SrcH;
AArch64OpndProp *mopdMem64PS = &mopdMemPair64Src;
AArch64OpndProp *mopdMem64S = &mopdMem64Src;
AArch64OpndProp *mopdMem128S = &mopdMem128Src;
AArch64OpndProp *mopdMem64SL = &mopdMem64SrcL;
AArch64OpndProp *mopdMem8D  = &mopdMem8Dest;
AArch64OpndProp *mopdMem16D = &mopdMem16Dest;
AArch64OpndProp *mopdMem32D = &mopdMem32Dest;
AArch64OpndProp *mopdMem32PD = &mopdMemPair32Dest;
AArch64OpndProp *mopdMem64D = &mopdMem64Dest;
AArch64OpndProp *mopdMem128D = &mopdMem128Dest;
AArch64OpndProp *mopdMem64PD = &mopdMemPair64Dest;
AArch64OpndProp *mopdMem32SPRE = &mopdMem32SrcPre;
AArch64OpndProp *mopdMem32SPOST = &mopdMem32SrcPost;
AArch64OpndProp *mopdMem64SPRE = &mopdMem64SrcPre;
AArch64OpndProp *mopdMem64SPOST = &mopdMem64SrcPost;
AArch64OpndProp *mopdMem32LiteralS = &mopdMem32LiteralSrc;
AArch64OpndProp *mopdMem64LiteralS = &mopdMem64LiteralSrc;
AArch64OpndProp *mopdImm4 = &mopdIntImm4Src;
AArch64OpndProp *mopdImm5 = &mopdIntImm5Src;
AArch64OpndProp *mopdImm6 = &mopdIntImm6Src;
AArch64OpndProp *mopdImm8 = &mopdIntImm8Src;
AArch64OpndProp *mopdImm12 = &mopdIntImm12Src;
AArch64OpndProp *mopdImmBm12 = &mopdIntBitMaskImm12Src;
AArch64OpndProp *mopdImm13 = &mopdIntImm13Src;
AArch64OpndProp *mopdImmBm13 = &mopdIntBitMaskImm13Src;
AArch64OpndProp *mopdImm16 = &mopdIntImm16Src;
AArch64OpndProp *mopdImm24 = &mopdIntImm24Src;
AArch64OpndProp *mopdImm32 = &mopdIntImm32Src;
AArch64OpndProp* mopdImm32LI = &mopdIntImm32Literal;
AArch64OpndProp *mopdImm64 = &mopdIntImm64Src;
AArch64OpndProp* mopdImm64LI = &mopdIntImm64Literal;
AArch64OpndProp *mopdFPZeroImm8 = &mopdFpzeroImm8Src;
AArch64OpndProp *mopdFuncName = &mopdLbl64Src;
AArch64OpndProp *mopdLabel = &mopdLbl64Src;
AArch64OpndProp *mopdLiteral = &mopdLiteralSrc;
AArch64OpndProp *mopdLiteralL12 = &mopdLiteralL12Src;

AArch64OpndProp *mopdRegCCS = &mopdCcRegSrc;
AArch64OpndProp *mopdRegCCD = &mopdCcRegDest;
AArch64OpndProp *mopdRegCCDS = &mopdCcRegDestSrc;

AArch64OpndProp *mopdCond = &mopdCondSrc;

AArch64OpndProp *mopdBitShift32 = &mopdBitshift32Src;
AArch64OpndProp *mopdBitShift64 = &mopdBitshift64Src;
AArch64OpndProp *mopdExtendShift64 = &mopdExtendshift64Src;
AArch64OpndProp *mopdLSL4  = &mopdLsl4Src;
AArch64OpndProp *mopdLSL6  = &mopdLsl6Src;
AArch64OpndProp *mopdLSL12 = &mopdLsl12Src;

AArch64OpndProp *mopdRSPD = &mopdSpRegDest;
AArch64OpndProp *mopdLISTS = &mopdListSrc;
AArch64OpndProp *mopdSTRING = &mopdString;
AArch64OpndProp *mopdUndef = nullptr;
