/*
 * Copyright (c) [2022] Huawei Technologies Co.,Ltd.All rights reserved.
 *
 * OpenArkCompiler is licensed under the Mulan PSL v1.
 * You can use this software according to the terms and conditions of the Mulan PSL v1.
 * You may obtain a copy of Mulan PSL v1 at:
 *
 *     http://license.coscl.org.cn/MulanPSL
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v1 for more details.
 */

OpndDescription mopdInt8RegSrc = {Operand::kOpdRegister, operand::kIsUse & operand::kInt, 8};
OpndDescription mopdInt8RegDest = {Operand::kOpdRegister, operand::kIsDef & operand::kInt, 8};
OpndDescription mopdInt8RegDestSrc = {Operand::kOpdRegister, operand::kIsDef & operand::kIsUse & operand::kInt, 8};
OpndDescription mopdInt16RegSrc = {Operand::kOpdRegister, operand::kIsUse & operand::kInt, 16};
OpndDescription mopdInt16RegDest = {Operand::kOpdRegister, operand::kIsDef & operand::kInt, 16};
OpndDescription mopdInt16RegDestSrc = {Operand::kOpdRegister, operand::kIsDef & operand::kIsUse & operand::kInt, 16};
OpndDescription mopdInt32RegSrc = {Operand::kOpdRegister, operand::kIsUse & operand::kInt, 32};
OpndDescription mopdInt32RegDest = {Operand::kOpdRegister, operand::kIsDef & operand::kInt, 32};
OpndDescription mopdInt32RegDestSrc = {Operand::kOpdRegister, operand::kIsDef & operand::kIsUse & operand::kInt, 32};
OpndDescription mopdInt64RegSrc = {Operand::kOpdRegister, operand::kIsUse & operand::kInt, 64};
OpndDescription mopdInt64RegDest = {Operand::kOpdRegister, operand::kIsDef & operand::kInt, 64};
OpndDescription mopdInt64RegDestSrc = {Operand::kOpdRegister, operand::kIsDef & operand::kIsUse & operand::kInt, 64};

OpndDescription mopdIntImm64Src = {Operand::kOpdImmediate, operand::kIsUse, 64};
OpndDescription mopdIntImm32Src = {Operand::kOpdImmediate, operand::kIsUse, 32};
OpndDescription mopdIntImm8Src = {Operand::kOpdImmediate, operand::kIsUse, 8};

OpndDescription mopdMem8Src = {Operand::kOpdMem, operand::kIsUse, 8};
OpndDescription mopdMem16Src = {Operand::kOpdMem, operand::kIsUse, 16};
OpndDescription mopdMem32Src = {Operand::kOpdMem, operand::kIsUse, 32};
OpndDescription mopdMem64Src = {Operand::kOpdMem, operand::kIsUse, 64};

OpndDescription mopdMem8Dest  = {Operand::kOpdMem, operand::kIsDef, 8};
OpndDescription mopdMem16Dest = {Operand::kOpdMem, operand::kIsDef, 16};
OpndDescription mopdMem32Dest = {Operand::kOpdMem, operand::kIsDef, 32};
OpndDescription mopdMem64Dest = {Operand::kOpdMem, operand::kIsDef, 64};

OpndDescription mopdMem8DestSrc  = {Operand::kOpdMem, operand::kIsDef & operand::kIsUse, 8};
OpndDescription mopdMem16DestSrc = {Operand::kOpdMem, operand::kIsDef & operand::kIsUse, 16};
OpndDescription mopdMem32DestSrc = {Operand::kOpdMem, operand::kIsDef & operand::kIsUse, 32};
OpndDescription mopdMem64DestSrc = {Operand::kOpdMem, operand::kIsDef & operand::kIsUse, 64};
OpndDescription mopdLbl64Src = {Operand::kOpdUndef, operand::kIsUse, 64};

// physical register

OpndDescription *MOPDReg = &mopdInt32RegSrc;
// in mopdReg32IS, Reg means register, 32 means 32-bits, I means integer(F means float),
// S means source, D means dest, H means high harf bits, L means low harf bits
OpndDescription *mopdReg8IS =  &mopdInt8RegSrc;
OpndDescription *mopdReg8ID =  &mopdInt8RegDest;
OpndDescription *mopdReg8IDS = &mopdInt8RegDestSrc;
OpndDescription *mopdReg16IS =  &mopdInt16RegSrc;
OpndDescription *mopdReg16ID =  &mopdInt16RegDest;
OpndDescription *mopdReg16IDS = &mopdInt16RegDestSrc;
OpndDescription *mopdReg32IS = &mopdInt32RegSrc;
OpndDescription *mopdReg32ID = &mopdInt32RegDest;
OpndDescription *mopdReg32IDS = &mopdInt32RegDestSrc;
OpndDescription *mopdReg64IS = &mopdInt64RegSrc;
OpndDescription *mopdReg64ID = &mopdInt64RegDest;
OpndDescription *mopdReg64IDS = &mopdInt64RegDestSrc;
OpndDescription *mopdMem = &mopdMem32Src;
OpndDescription *mopdMem8S = &mopdMem8Src;
OpndDescription *mopdMem16S = &mopdMem16Src;
OpndDescription *mopdMem32S = &mopdMem32Src;
OpndDescription *mopdMem64S = &mopdMem64Src;
OpndDescription *mopdMem8D  = &mopdMem8Dest;
OpndDescription *mopdMem16D = &mopdMem16Dest;
OpndDescription *mopdMem32D = &mopdMem32Dest;
OpndDescription *mopdMem64D = &mopdMem64Dest;

OpndDescription *mopdMem8DS  = &mopdMem8DestSrc;
OpndDescription *mopdMem16DS = &mopdMem16DestSrc;
OpndDescription *mopdMem32DS = &mopdMem32DestSrc;
OpndDescription *mopdMem64DS = &mopdMem64DestSrc;

OpndDescription *mopdImm64 = &mopdIntImm64Src;
OpndDescription *mopdImm32 = &mopdIntImm32Src;
OpndDescription *mopdImm8 = &mopdIntImm8Src;

OpndDescription *mopdLabel = &mopdLbl64Src;

OpndDescription *mopdUndef = nullptr;
