#
# Copyright (c) [2020-2021] Huawei Technologies Co.,Ltd.All rights reserved.
#
# OpenArkCompiler is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#
#     http://license.coscl.org.cn/MulanPSL2
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.
#
include_directories = [
  "${MAPLEALL_ROOT}/maple_be/include/cg",
  "${MAPLEALL_ROOT}/maple_be/include/ad",
  "${MAPLE_BUILD_OUTPUT}/common/target",
  "${MAPLEALL_ROOT}/maple_be/include/ad/target",
  "${MAPLEALL_ROOT}/maple_be/include/be",
  "${MAPLEALL_ROOT}/maple_driver/include",
  "${MAPLEALL_ROOT}/maple_util/include",
  "${MAPLEALL_ROOT}/maple_ir/include",
  "${MAPLEALL_ROOT}/mpl2mpl/include",
  "${MAPLEALL_ROOT}/mempool/include",
  "${MAPLEALL_ROOT}/maple_ipa/include",
  "${MAPLEALL_ROOT}/maple_phase/include",
  "${THIRD_PARTY_ROOT}/bounds_checking_function/include",
  "${THIRD_PARTY_ROOT}/dwarf/include",
  "${THIRD_PARTY_ROOT}/bounds_checking_function/include"
]

deps_libcg = []

deps_libmplbe = [
  ":libcglowerer",
]

if(TARGET == "aarch64"){
  include_directories += [
    "${MAPLEALL_ROOT}/maple_be/include/cg/aarch64",
    "${MAPLEALL_ROOT}/maple_be/include/be/aarch64",
  ]
  deps_libcg += [ ":libcgaarch64", ]
}

if(TARGET == "riscv64"){
  include_directories += [
    "${MAPLEALL_ROOT}/maple_be/include/cg/riscv64",
    "${MAPLEALL_ROOT}/maple_be/include/be/riscv64",
  ]
  deps_libcg += [ ":libcgriscv64", ]
}

if(TARGET == "ark"){
  include_directories += [
    "${MAPLEALL_ROOT}/maple_be/include/cg/ark",
    "${MAPLEALL_ROOT}/maple_be/include/be/ark",
  ]
  deps_libcg += [ ":libcgark", ]
}

src_libmplad = [ "src/ad/mad.cpp" ]

src_libcglowerer = [
  "src/be/bbt.cpp",
  "src/be/trycatchblockslower.cpp",
  "src/be/lower.cpp",
]

src_libmplbe = [
  "src/be/becommon.cpp",
  "src/be/switch_lowerer.cpp",
  "src/be/rt.cpp",
]

src_libcgaarch64 = [
  "src/cg/aarch64/aarch64_abi.cpp",
  "src/cg/aarch64/mpl_atomic.cpp",
  "src/cg/aarch64/aarch64_cgfunc.cpp",
  "src/cg/aarch64/aarch64_dependence.cpp",
  "src/cg/aarch64/aarch64_ebo.cpp",
  "src/cg/aarch64/aarch64_emitter.cpp",
  "src/cg/aarch64/aarch64_fixshortbranch.cpp",
  "src/cg/aarch64/aarch64_global.cpp",
  "src/cg/aarch64/aarch64_proepilog.cpp",
  "src/cg/aarch64/aarch64_immediate.cpp",
  "src/cg/aarch64/aarch64_operand.cpp",
  "src/cg/aarch64/aarch64_color_ra.cpp",
  "src/cg/aarch64/aarch64_reg_alloc.cpp",
  "src/cg/aarch64/aarch64_cg.cpp",
  "src/cg/aarch64/aarch64_ico.cpp",
  "src/cg/aarch64/aarch64_insn.cpp",
  "src/cg/aarch64/aarch64_isa.cpp",
  "src/cg/aarch64/aarch64_memlayout.cpp",
  "src/cg/aarch64/aarch64_args.cpp",
  "src/cg/aarch64/aarch64_live.cpp",
  "src/cg/aarch64/aarch64_yieldpoint.cpp",
  "src/cg/aarch64/aarch64_offset_adjust.cpp",
  "src/cg/aarch64/aarch64_optimize_common.cpp",
  "src/cg/aarch64/aarch64_peep.cpp",
  "src/cg/aarch64/aarch64_reaching.cpp",
  "src/cg/aarch64/aarch64_schedule.cpp",
  "src/cg/aarch64/aarch64_strldr.cpp",
  "src/cg/aarch64/aarch64_lsra.cpp",
]

src_libcgriscv64 = [
  "src/cg/riscv64/mpl_atomic.cpp",
  "src/cg/riscv64/riscv64_abi.cpp",
  "src/cg/riscv64/riscv64_args.cpp",
  "src/cg/riscv64/riscv64_cg.cpp",
  "src/cg/riscv64/riscv64_cgfunc.cpp",
  "src/cg/riscv64/riscv64_color_ra.cpp",
  "src/cg/riscv64/riscv64_dependence.cpp",
  "src/cg/riscv64/riscv64_ebo.cpp",
  "src/cg/riscv64/riscv64_emitter.cpp",
  "src/cg/riscv64/riscv64_fixshortbranch.cpp",
  "src/cg/riscv64/riscv64_global.cpp",
  "src/cg/riscv64/riscv64_ico.cpp",
  "src/cg/riscv64/riscv64_immediate.cpp",
  "src/cg/riscv64/riscv64_insn.cpp",
  "src/cg/riscv64/riscv64_isa.cpp",
  "src/cg/riscv64/riscv64_live.cpp",
  "src/cg/riscv64/riscv64_lsra.cpp",
  "src/cg/riscv64/riscv64_memlayout.cpp",
  "src/cg/riscv64/riscv64_offset_adjust.cpp",
  "src/cg/riscv64/riscv64_operand.cpp",
  "src/cg/riscv64/riscv64_optimize_common.cpp",
  "src/cg/riscv64/riscv64_peep.cpp",
  "src/cg/riscv64/riscv64_proepilog.cpp",
  "src/cg/riscv64/riscv64_reaching.cpp",
  "src/cg/riscv64/riscv64_reg_alloc.cpp",
  "src/cg/riscv64/riscv64_schedule.cpp",
  "src/cg/riscv64/riscv64_strldr.cpp",
  "src/cg/riscv64/riscv64_yieldpoint.cpp",
]

src_libcgark = [
  "src/cg/ark/foo.cpp",
]

src_libcg = [
  "src/cg/args.cpp",
  "src/cg/cfgo.cpp",
  "src/cg/cfi.cpp",
  "src/cg/cg.cpp",
  "src/cg/cgbb.cpp",
  "src/cg/cgfunc.cpp",
  "src/cg/cg_cfg.cpp",
  "src/cg/cg_option.cpp",
  "src/cg/cg_phasemanager.cpp",
  "src/cg/ebo.cpp",
  "src/cg/eh_func.cpp",
  "src/cg/emit.cpp",
  "src/cg/global.cpp",
  "src/cg/live.cpp",
  "src/cg/ico.cpp",
  "src/cg/peep.cpp",
  "src/cg/label_creation.cpp",
  "src/cg/loop.cpp",
  "src/cg/memlayout.cpp",
  "src/cg/offset_adjust.cpp",
  "src/cg/optimize_common.cpp",
  "src/cg/pressure.cpp",
  "src/cg/proepilog.cpp",
  "src/cg/reaching.cpp",
  "src/cg/schedule.cpp",
  "src/cg/strldr.cpp",
  "src/cg/yieldpoint.cpp",
]

cflags_cc -= [ "-DRC_NO_MMAP" ]
cflags_cc -= [ "-DMIR_JAVA=1" ]

configs = [ "${MAPLEALL_ROOT}:mapleallcompilecfg" ]

static_library("libmplad") {
  sources = src_libmplad
  include_dirs = include_directories
  output_dir = "${root_out_dir}/lib/${HOST_ARCH}"

  cflags_cc += [ "-DRC_NO_MMAP" ]
}

source_set("libcglowerer") {
  sources = src_libcglowerer
  include_dirs = include_directories
}

static_library("libmplbe") {
  sources = src_libmplbe
  deps = deps_libmplbe
  include_dirs = include_directories
  output_dir = "${root_out_dir}/lib/${HOST_ARCH}"
}

source_set("libcgaarch64") {
  sources = src_libcgaarch64
  include_dirs = include_directories
}

source_set("libcgriscv64") {
  sources = src_libcgriscv64
  include_dirs = include_directories
}

source_set("libcgark") {
  sources = src_libcgark
  include_dirs = include_directories
}

static_library("libcg") {
  sources = src_libcg
  include_dirs = include_directories
  deps = deps_libcg
  output_dir = "${root_out_dir}/lib/${HOST_ARCH}"
}

executable("maplegen") {
  sources = [
    "${MAPLEALL_ROOT}/maple_be/mdgen/src/mdgenerator.cpp",
    "${MAPLEALL_ROOT}/maple_be/mdgen/src/mdlexer.cpp",
    "${MAPLEALL_ROOT}/maple_be/mdgen/src/mdmain.cpp",
    "${MAPLEALL_ROOT}/maple_be/mdgen/src/mdparser.cpp",
    "${MAPLEALL_ROOT}/maple_be/mdgen/src/mdrecord.cpp",
  ]
  deps = [
    "${THIRD_PARTY_ROOT}/bounds_checking_function:libHWSecureC",
    "${MAPLEALL_ROOT}/mempool:libmempool",
    "${MAPLEALL_ROOT}/maple_util:libmplutil",
  ]

  include_dirs = [
    "${MAPLEALL_ROOT}/maple_be/mdgen/include",
    "${MAPLEALL_ROOT}/maple_util/include",
    "${MAPLEALL_ROOT}/maple_ir/include",
    "${MAPLEALL_ROOT}/mpl2mpl/include",
    "${MAPLEALL_ROOT}/mempool/include",
    "${THIRD_PARTY_ROOT}/bounds_checking_function/include",
  ]
}
