/*
 * Copyright (c) [2022] Huawei Technologies Co.,Ltd.All rights reserved.
 *
 * OpenArkCompiler is licensed under the Mulan PSL v1.
 * You can use this software according to the terms and conditions of the Mulan PSL v1.
 * You may obtain a copy of Mulan PSL v1 at:
 *
 *     http://license.coscl.org.cn/MulanPSL
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v1 for more details.
 */

// (code, type, desc)
// final ok
// we should mark kIFT_FinalOk carefully, because it will ignore most size limits
DEF_IF(kIfcOk, kIFT_FinalOk, "[ok] normally inlined")

DEF_IF(kIfcDeclaredAlwaysInline, kIFT_FinalOk, "[ok] callee is declared 'always_inline'")

DEF_IF(kIfcHardCoded, kIFT_FinalOk, "[ok] callee is hard coded to be inlined")

DEF_IF(kIfcInlineList, kIFT_FinalOk, "[ok] callee is in the inline list")

DEF_IF(kIfcInlineListCallsite, kIFT_FinalOk, "[ok] callsite is in the inline list")

DEF_IF(kIfcPreferInlineOn, kIFT_FinalOk, "[ok] callsite is marked with '#pragma prefer_inline ON'")

DEF_IF(kIfcProfileHotCallsite, kIFT_FinalOk, "[ok] profile shows this is a hot callsite")

DEF_IF(kIfcExternGnuInlineCalleeDepth0, kIFT_FinalOk, "[ok] depth == 0 'extern gnu_inline' should always be inlined")

// mutate
DEF_IF(kIfcNeedFurtherAnalysis, kIFT_Mutable, "need further analysis")

DEF_IF(kIfcNotDeclaredInlineTooBig, kIFT_Mutable, "callee is not declared 'inline' and callee size is too big")

DEF_IF(kIfcNotDeclaredInlineGrow, kIFT_Mutable, "callee is not declared 'inline' and size will grow")

DEF_IF(kIfcUnlikelyCall, kIFT_Mutable, "unlikely callsite")

DEF_IF(kIfcOutOfEarlyInline, kIFT_Mutable, "early inlining is not responsible for it")

DEF_IF(kIfcOutOfGreedyInline, kIFT_Mutable, "greedy inlining is not responsible for it")

// final fail
DEF_IF(kIfcEmptyCallee, kIFT_FinalFail, "callee's body is not available")

DEF_IF(kIfcPreemptable, kIFT_FinalFail, "callee's body may be replaced at link time")

DEF_IF(kIfcProfileColdCallsite, kIFT_FinalFail, "profile shows this is a cold callsite")

DEF_IF(kIfcUnsafe, kIFT_FinalFail, "unsafe inline")

DEF_IF(kIfcUnsafeRegion, kIFT_FinalFail, "callee is unsafe but callStmt is in safe region")

DEF_IF(kIfcDeclaredNoinline, kIFT_FinalFail, "callee is declared 'noinline'")

DEF_IF(kIfcExcludedCaller, kIFT_FinalFail, "caller is in the excluded list")

DEF_IF(kIfcExcludedCallee, kIFT_FinalFail, "callee is in the excluded list")

DEF_IF(kIfcMCCFunc, kIFT_FinalFail, "callee is MCC runtime func")

DEF_IF(kIfcRCUnsafe, kIFT_FinalFail, "RC unsafe")

DEF_IF(kIfcAttr, kIFT_FinalFail, "callee has uninlinable attributes")

DEF_IF(kIfcArgToFormalError, kIFT_FinalFail, "incompatible type conversion from arguments to formals")

DEF_IF(kIfcSetjmpCallee, kIFT_FinalFail, "callee is setjmp")

DEF_IF(kIfcSetjmpInCallee, kIFT_FinalFail, "callee contains setjmp call")

DEF_IF(kIfcAddrTakenLabel, kIFT_FinalFail, "callee has address taken labels")

// mark uninlinable such as recursive level too much, VMStack
DEF_IF(kIfcMarkUninlinable, kIFT_FinalFail, "callee was marked uninlinable")

DEF_IF(kIfcGinlineRecursiveCall, kIFT_FinalFail, "resursive inlining has not been supported by ginline")

DEF_IF(kIfcTooBigForEInline, kIFT_FinalFail, "callee is too big for early inline")

DEF_IF(kIfcTooBigForGInline, kIFT_FinalFail, "callee is too big for greedy inline")

DEF_IF(kIfcNoinlineList, kIFT_FinalFail, "callee is in the noinline list")

DEF_IF(kIfcNoinlineListCallsite, kIFT_FinalFail, "callsite is in the noinline list")

DEF_IF(kIfcPreferInlineOff, kIFT_FinalFail, "callsite is marked with '#pragma prefer_inline OFF'")

DEF_IF(kIfcIndirectCall, kIFT_FinalFail, "inlining indirect call is not supported")

DEF_IF(kIfcNotInCallgraph, kIFT_FinalFail, "callee is not in the callgraph")

DEF_IF(kIfcExternGnuInlineCaller, kIFT_FinalFail, "caller is declared 'extern gnu_inline'")

DEF_IF(kIfcExternGnuInlineCalleeDepthN, kIFT_FinalFail, "depth >= 1 'extern gnu_inline' should not be inlined")

DEF_IF(kIfcOutlined, kIFT_FinalFail, "outlined func will not be inlined any more")

DEF_IF(kIfcPreventedBySameHotCall, kIFT_FinalFail, "same callsites with hot freq have been inlined")

DEF_IF(kIfcPreventedBySPS, kIFT_FinalFail, "callsite is prevented from inlining by --stack-protector-strong")

