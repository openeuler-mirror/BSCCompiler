#
# Copyright (c) [2020-2021] Huawei Technologies Co.,Ltd.All rights reserved.
#
# OpenArkCompiler is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#
#     http://license.coscl.org.cn/MulanPSL2
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.
#
configs = [ "${MAPLEALL_ROOT}:mapleallcompilecfg" ]

include_directories = [
  "${MAPLEALL_ROOT}",
  "${MAPLEALL_ROOT}/maple_be/include",
  "${MAPLEALL_ROOT}/maple_be/include/cg",
  "${MAPLEALL_ROOT}/maple_be/include/be",
  "${MAPLEALL_ROOT}/maple_be/include/ad",
  "${MAPLEALL_ROOT}/maple_be/include/ad/target",
  "${MAPLE_BUILD_OUTPUT}/common/target",
  "${MAPLEALL_ROOT}/maple_be/include/cg/aarch64",
  "${MAPLEALL_ROOT}/maple_be/include/be/aarch64",
  "${MAPLEALL_ROOT}/maple_driver/defs",
  "${MAPLEALL_ROOT}/maple_driver/include",
  "${MAPLEALL_ROOT}/maple_util/include",
  "${MAPLEALL_ROOT}/mpl2mpl/include",
  "${MAPLEALL_ROOT}/maple_me/include",
  "${MAPLEALL_ROOT}/maplewpo/include",
  "${MAPLEALL_ROOT}/maple_ipa/include",
  "${MAPLEALL_ROOT}/maple_phase/include",
  "${MAPLEALL_ROOT}/maple_ir/include",
  "${MAPLEALL_ROOT}/mempool/include",
  "${THIRD_PARTY_ROOT}/bounds_checking_function/include",
  "${THIRD_PARTY_ROOT}/llvm_modified/include/llvm/BinaryFormat",
]

executable("maple") {
  sources = [
    "src/as_compiler.cpp",
    "src/compiler.cpp",
    "src/compiler_factory.cpp",
    "src/compiler_selector.cpp",
    "src/dex2mpl_compiler.cpp",
    "src/driver_runner.cpp",
    "src/file_utils.cpp",
    "src/ipa_compiler.cpp",
    "src/jbc2mpl_compiler.cpp",
    "src/cpp2mpl_compiler.cpp",
    "src/clang_compiler.cpp",
    "src/ld_compiler.cpp",
    "src/maple.cpp",
    "src/maple_comb_compiler.cpp",
    "src/mpl_options.cpp",
    "src/mplcg_compiler.cpp",
  ]

  include_dirs = include_directories

  deps = [
    ":libdriver_option",
    ":liboption_parser",
    "${MAPLEALL_ROOT}/maple_be:libcg",
    "${MAPLEALL_ROOT}/maple_be:libmplad",
    "${MAPLEALL_ROOT}/maple_be:libmplbe",
    "${MAPLEALL_ROOT}/maple_ipa:libmplipa",
    "${MAPLEALL_ROOT}/maple_ir:libmplir",
    "${MAPLEALL_ROOT}/maple_me:libmplme",
    "${MAPLEALL_ROOT}/maple_me:libmplmewpo",
    "${MAPLEALL_ROOT}/maple_phase:libmplphase",
    "${MAPLEALL_ROOT}/maple_phase:libmplphase",
    "${MAPLEALL_ROOT}/maple_util:libmplutil",
    "${MAPLEALL_ROOT}/mempool:libmempool",
    "${MAPLEALL_ROOT}/mpl2mpl:libmpl2mpl",
    "${THIRD_PARTY_ROOT}/bounds_checking_function:libHWSecureC",
  ]
}

static_library("libdriver_option") {
  sources = [ "src/driver_option_common.cpp" ]

  include_dirs = [ "${MAPLEALL_ROOT}/maple_driver/include" ]

  output_dir = "${root_out_dir}/lib/${HOST_ARCH}"
}

static_library("liboption_parser") {
  sources = [ "src/option_parser.cpp" ]

  include_dirs = [
    "${MAPLEALL_ROOT}/maple_util/include",
    "${MAPLEALL_ROOT}/maple_driver/include",
    "${MAPLEALL_ROOT}/maple_ir/include",
    "${MAPLEALL_ROOT}/mempool/include",
    "${THIRD_PARTY_ROOT}/bounds_checking_function/include",
  ]
  output_dir = "${root_out_dir}/lib/${HOST_ARCH}"
}
