#
# Copyright (c) [2020-2021] Huawei Technologies Co.,Ltd.All rights reserved.
#
# OpenArkCompiler is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#
#     http://license.coscl.org.cn/MulanPSL2
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.
#
src_libmplutil = [
  "src/mpl_logging.cpp",
  "src/muid.cpp",
  "src/namemangler.cpp",
  "src/literalstrname.cpp",
  "src/file_layout.cpp",
  "src/file_utils.cpp",
  "src/mpl_scheduler.cpp",
  "src/itab_util.cpp",
  "src/mpl_timer.cpp",
  "src/profile.cpp",
  "src/string_utils.cpp",
  "src/error_code.cpp",
  "src/thread_env.cpp",
  "src/mpl_int_val.cpp",
  "src/chain_layout.cpp",
  "src/mpl_profdata.cpp",
  "src/suffix_array.cpp",
  "src/mpl_posix_sighandler.cpp"
]

src_libcommandline = [
  "src/set_spec.cpp",
  "src/cl_option.cpp",
  "src/cl_option_parser.cpp",
  "src/cl_parser.cpp",
]

include_libmplutil = [
  "${MAPLEALL_ROOT}/maple_util/include",
  "${MAPLEALL_ROOT}/maple_pgo/include",
  "${MAPLEALL_ROOT}/maple_ir/include",
  "${MAPLEALL_ROOT}/maple_me/include",
  "${MAPLEALL_ROOT}/mpl2mpl/include",
  "${MAPLEALL_ROOT}/maple_phase/include",
  "${MAPLEALL_ROOT}/maple_be/include/cg",
  "${MAPLEALL_ROOT}/maple_be/include/be",
  "${MAPLEALL_ROOT}/mempool/include",
  "${MAPLEALL_ROOT}/maple_driver/include",
  "${THIRD_PARTY_ROOT}/bounds_checking_function/include",
]

include_libcommandline = [
  "${MAPLEALL_ROOT}/maple_util/include",
  "${MAPLEALL_ROOT}/maple_ir/include",
  "${THIRD_PARTY_ROOT}/bounds_checking_function/include",
  "${MAPLEALL_ROOT}/mempool/include",
  "${MAPLEALL_ROOT}/maple_driver/include",
]

configs = [ "${MAPLEALL_ROOT}:mapleallcompilecfg" ]

static_library("libmplutil") {
  sources = src_libmplutil
  include_dirs = include_libmplutil
  libs = [ "pthread", "dl" ]
  output_dir = "${root_out_dir}/lib/${HOST_ARCH}"
}

static_library("libcommandline") {
  sources = src_libcommandline
  include_dirs = include_libcommandline
  output_dir = "${root_out_dir}/lib/${HOST_ARCH}"
}
